{"remainingRequest":"/Users/andriikotko/Work/storj/web/multinode/node_modules/thread-loader/dist/cjs.js!/Users/andriikotko/Work/storj/web/multinode/node_modules/babel-loader/lib/index.js!/Users/andriikotko/Work/storj/web/multinode/node_modules/ts-loader/index.js??ref--13-3!/Users/andriikotko/Work/storj/web/multinode/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andriikotko/Work/storj/web/multinode/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andriikotko/Work/storj/web/multinode/src/app/components/modals/AddNewNode.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/andriikotko/Work/storj/web/multinode/src/app/components/modals/AddNewNode.vue","mtime":1612525852483},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}