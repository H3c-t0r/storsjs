{"remainingRequest":"/Users/andriikotko/Work/storj/web/multinode/node_modules/thread-loader/dist/cjs.js!/Users/andriikotko/Work/storj/web/multinode/node_modules/babel-loader/lib/index.js!/Users/andriikotko/Work/storj/web/multinode/node_modules/ts-loader/index.js??ref--13-3!/Users/andriikotko/Work/storj/web/multinode/src/api/nodes.ts","dependencies":[{"path":"/Users/andriikotko/Work/storj/web/multinode/src/api/nodes.ts","mtime":1612525852474},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/andriikotko/Work/storj/web/multinode/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}