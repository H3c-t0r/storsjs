// Code generated for package template by go-bindata DO NOT EDIT. (@generated)
// sources:
// public.html.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x59\x57\xdb\xba\x16\x7e\xe7\x57\xe8\xea\x9e\x37\x6a\x9b\x0c\x10\x38\xcb\xce\xba\x9c\x00\x25\x3d\x6d\xa1\x4c\xa7\xf4\x4d\xb6\xb6\x63\x25\xb2\xe4\x23\xc9\x09\x21\xab\xff\xfd\x2e\x0f\x19\x89\x49\x07\xa0\x3c\xf4\x05\xa2\x2d\x69\xeb\xdb\x83\xf6\x60\xb9\xff\x39\x3a\xeb\x5c\xdd\x9e\x1f\xa3\xc8\xc4\xbc\xbd\xe5\x66\xff\x10\x27\xa2\xe7\x61\x10\xb8\xbd\x85\x10\x42\x6e\x04\x84\x16\x3f\xf3\x61\x0c\x86\xa0\x20\x22\x4a\x83\xf1\xf0\xf5\xd5\x89\xb5\x8f\x57\xa7\x05\x89\xc1\xc3\x43\x06\xa3\x44\x2a\x83\x51\x20\x85\x01\x61\x3c\x3c\x62\xd4\x44\x1e\x85\x21\x0b\xc0\xca\x07\x6f\x10\x13\xcc\x30\xc2\x2d\x1d\x10\x0e\x5e\xed\x0d\xd2\x91\x62\x62\x60\x19\x69\x85\xcc\x78\x42\x2e\xb2\xe7\x4c\x0c\x90\x02\xee\x61\x6d\xc6\x1c\x74\x04\x60\x30\x8a\x14\x84\x1e\x8e\x8c\x49\xf4\x9f\x8e\xa3\x0d\x09\x06\x09\x31\x91\xed\x4b\x69\xb4\x51\x24\x09\xa8\xb0\x03\x19\x3b\x33\x82\xd3\xb4\x77\xed\x1d\x27\xd0\x7a\x4e\xb3\x63\x26\xec\x40\x6b\x8c\x98\x30\xd0\x53\xcc\x8c\x3d\xac\x23\xd2\xd8\x6f\x5a\x07\xa4\x6b\xea\xe2\x22\xe9\xd4\xea\xd7\x83\x83\xde\xe5\x81\x4f\x8e\x78\xb3\x56\xfb\xf8\xe9\x30\x39\x89\x3b\xf5\xbd\xe3\xd1\xe1\xd9\xe9\xfe\x3f\xbd\x2f\x7c\xf7\xc3\xed\xed\xdd\x49\x18\x6c\x7f\x0c\xce\xfd\x1a\xfd\xfb\x6d\xbf\x75\x39\xc0\x28\x50\x52\x6b\xa9\x58\x8f\x09\x0f\x13\x21\xc5\x38\x96\xa9\x5e\x94\xcd\x30\xc3\xa1\x7d\x69\xa4\xea\xa3\x43\x1a\x33\x81\xae\xbb\xae\x53\x50\xb7\x0a\x5b\x38\x73\x63\xb8\xbe\xa4\xe3\x85\xdd\xd9\x0c\xa8\x39\x21\x27\x0a\x32\x5c\xa6\xe4\x54\xca\x86\x28\xe0\x44\x6b\x0f\x0b\x32\x44\x82\x0c\x2d\x43\xfc\x4c\x6e\x9a\x53\xb2\x11\x46\x4a\x72\xf0\xb0\x21\x3e\x67\xda\xe0\x87\x6c\x72\x56\x64\x81\x91\xc5\x0c\xc4\x39\xb7\xdc\x4a\x24\x30\x6c\x08\x73\xa6\xa9\x06\xa5\x0b\xd6\x94\x18\x62\x19\xd9\xeb\x95\x27\x4c\x2d\xf8\xdf\xd9\xba\x85\xe3\x31\x22\x8a\x11\x2b\xf3\x21\x25\xb9\x5e\x60\x56\xce\x68\xe0\x10\x18\xa0\x1e\x36\x2a\x05\xdc\xbe\xce\xe6\x5c\x87\x7c\x37\xe4\x39\xd6\x44\xc9\x3e\x04\xe6\x5b\xe0\x4e\x97\x6e\x42\x3c\x5f\xb7\x02\x3a\x24\x5c\x03\x6e\x9f\x97\xf3\x3f\x07\x3c\x90\x69\x22\xc5\xb7\xe0\x2e\x57\x6e\x82\x3d\x5b\xb6\x1e\x75\xa7\x98\x5e\x0b\xda\x75\x28\x5b\x71\x3f\xd7\x59\xf2\xc8\xc2\x9f\x33\xaf\xdd\xda\x5a\xe7\x9d\x86\xf8\x56\x19\x3b\x96\x9c\xb3\x53\xd2\x56\x98\xaf\xec\x4c\x88\x00\x14\x12\x0a\x48\x47\x72\xb4\xde\x1f\x17\xc4\xcf\x96\xf3\x52\x4e\x4e\x7c\xe0\x1c\xa8\x3f\x5e\xf5\xdd\x35\x62\x46\xb5\xdc\xe5\xd0\x29\x11\x94\x33\xd1\x73\x9d\xa8\xf6\x70\xd9\x64\xc2\x42\x24\xa4\x41\xf6\xd7\xaf\x0f\x79\x84\x52\xc5\x28\x06\x13\x49\xea\xe1\x44\x56\x5f\xb8\x90\x01\xa7\x1a\x4c\xc5\x34\x87\x1e\x08\x5a\xe0\xe9\x8a\x50\xba\x4e\x49\x59\xbf\x7c\x41\x63\x19\x02\xab\xa7\x64\x9a\x54\x1c\x5d\xf0\xcf\x14\x33\xdd\x12\x48\x6e\xc5\xd4\x6a\xa2\xd2\x65\x0a\xb5\x61\x14\x4a\xe5\x61\x88\x09\xe3\xb8\x7d\x6c\x7d\x20\x8c\xbb\x4e\x3e\xf5\x08\xe3\x05\x24\x53\xb6\x8f\xe0\xc8\xb7\x30\x91\xa4\x26\x37\x67\x71\x56\x99\x76\xca\x81\x19\x27\x99\x5d\xe1\xce\x60\x94\x70\x12\x40\x24\x39\x05\xe5\x61\xbc\x24\x71\x09\x1d\xe5\xcc\xac\x98\x62\xa4\xe0\xdf\x94\xa9\xcc\xc7\x37\x01\xd0\x09\x11\x53\x66\x11\xf0\xc4\xf2\xb9\x0c\x06\xb8\x9d\x23\x40\x84\x52\x05\x5a\x23\x19\x22\x13\x01\xca\x5c\xc8\x75\xb2\x2d\x8f\x68\xe1\xe1\x8d\x59\x99\x7a\x71\x33\xea\xd4\x8f\x99\xc1\xed\x67\xb1\xa0\x9f\x1a\x23\x45\x6e\xc2\xf2\x9c\xd2\x86\x99\x0d\x40\x1b\x8c\x86\x84\xa7\xe0\xe1\x4c\x79\x4c\x84\x72\x66\x3b\xdf\x08\xe4\x1b\x61\x25\x8a\xc5\x44\x8d\x71\xfb\x2d\x98\xd2\xe1\x0b\xa6\x3f\xa3\xe4\xf5\x53\xd5\x37\xcf\x75\x32\xad\xaf\xbb\xf2\xc0\x35\xa0\x35\xf7\x3d\xdf\x15\xd5\xe7\xf7\x54\xc5\xc4\x30\x29\x5c\x27\xaa\x57\x9c\x9f\x25\x62\x58\x08\x6f\x1c\x50\xfe\xd7\x8a\xe4\x10\x54\x85\xa6\x27\x13\x45\x44\x0f\xd0\x1f\x4c\x50\xb8\x7b\x83\xfe\x00\x0e\x31\x08\x83\xfe\xf4\x90\x9d\x29\xb5\x02\x5b\x71\xa2\x6a\xbb\x86\xb6\x27\x93\x62\xf7\xd7\xaf\xae\x63\xe8\x94\x54\x32\x9a\x12\x1d\xa3\xaa\x10\x80\xa0\x55\x1a\x70\x72\x09\x2a\x04\x8e\xea\x0b\x39\xb1\x4a\x2d\x53\x01\xed\x69\x7a\xad\x3a\xea\x87\xd4\xb7\x51\x85\x55\xb6\x7d\x3a\xfd\xa1\x9f\xd1\x61\xd5\xc6\x75\xf4\x75\xd9\xba\x2a\xa1\x3e\x2c\x94\xbe\x31\x8f\x2e\xd5\x55\xeb\x53\x69\x69\xf3\xd7\x94\x4d\xa7\x90\x8e\xc0\x10\xc6\xf5\xaf\xcb\xa9\xa5\xfa\xb2\x18\x39\x2b\x18\x51\xf7\xe8\x25\xb3\x6b\x09\x81\xd1\x47\x32\x6c\xa3\x46\x1b\xb4\xde\xaa\x5b\x7b\xfb\x7e\xd3\x6a\xee\xfb\x75\xcb\xdf\x85\x03\x0b\xf6\x9b\x4d\x1f\x9a\x2d\x68\xb4\xc8\xf3\x67\xe1\x12\x69\x8e\xfb\x77\xe2\x5d\xde\xf2\xcd\x89\x77\x6a\xee\x8d\xb9\xf7\xc1\x1d\x79\x3d\x69\xf8\xa9\xc3\x41\x47\x01\x31\x30\x95\xf8\x95\x45\x83\x8f\xb9\xb7\xbf\x78\x3c\xc8\x41\x54\x47\x84\xc3\x11\x68\x19\xcf\x74\xf6\xfc\x97\x3f\xab\xb8\x05\x8c\xd0\xd3\x06\x81\x4d\xba\x7c\x6a\x0b\xcb\x91\x00\xc5\x28\x6e\x9f\x65\x3f\x5e\x38\xd2\x4f\x0f\xaf\xb6\x2a\x69\xd6\x5b\x24\xa4\x3b\x56\xab\x16\xfa\x56\x33\x68\x36\x2d\x52\xf7\x9b\x16\xad\xb7\x76\x28\xad\x11\xba\x07\x7b\xcf\x6f\xea\xac\x8c\x45\x8c\x22\x13\x11\x93\x75\xfa\x29\xa7\x48\x8e\x44\xde\x74\x25\xd3\x3b\xfa\x3b\xfc\x2f\x6e\xf9\xde\xf0\x1f\xe4\x11\xaf\x3a\x01\xac\x46\xc4\xd7\x13\xfb\x8b\x16\xec\x91\x0e\x6c\x56\x45\xfd\xa2\x26\xec\x47\x1b\x88\x92\xe5\xac\x8d\x98\x4c\xec\xec\x4f\x5e\xd7\x3f\x47\x4b\xf6\x74\x2d\xc3\xc3\x0f\x8f\x8f\x75\x0c\x8b\x1f\x34\xd7\x37\x0c\xc5\x27\xc8\x0d\xfd\xc2\x93\xd7\x00\xc5\xa1\x4b\x5e\xf3\xab\xea\x80\x42\x45\x59\x9a\x98\xa2\x7a\xd1\x3c\x31\x3b\xbe\x3a\x51\xdc\xdd\xdd\x3d\x7f\x1e\x28\x70\x20\x46\x7f\x47\xfb\xe5\x2d\x95\xd1\xbe\x18\x95\x57\xcc\xda\x5c\xe3\x97\xee\xf5\xca\x4a\xfc\x15\x56\xab\x26\x74\x43\x29\x0d\xa8\xb9\xe5\xb2\xd1\x92\xca\x96\x75\x2a\x0c\x61\x62\x75\xc5\x2a\x5a\x57\x07\x8a\x25\x06\x69\x15\xcc\xdf\x1d\x03\x49\xc1\xee\xff\x9b\x82\x1a\xe7\x8f\x8d\xc5\x4f\xab\x61\xef\xda\x35\x5b\x73\x16\xe7\x0f\x8c\xfd\xb5\xef\x8b\x47\xe1\x67\x7a\x5f\x8f\xcc\xf9\xe9\x0e\xd7\x97\x97\x7a\x57\x74\xae\x92\xb4\xef\xdc\x8f\x9b\x9d\xed\xb3\xb7\x09\x89\xe5\xc9\xcd\xb8\xb1\xff\xe1\xe6\x2f\x71\xbc\xdd\xf5\xfd\x9b\xdb\x6b\x18\x6d\x9f\xa9\xce\x67\x72\x31\x08\xfb\xd5\xef\x8b\xae\x53\x60\xdd\x0c\x9f\x66\xe0\x28\x70\x36\x54\xb6\x00\xe3\x88\x24\x76\x12\x99\x24\xa0\xec\xbe\xfe\x5f\xcd\xae\xed\xd9\x3b\x0e\x65\xda\x38\x69\x4c\xa7\x33\xd5\x22\x7d\xda\x3b\x3e\xb8\x38\x1d\xfa\xdd\xf1\x97\x93\x77\x32\x34\xdb\xf5\xf8\x9d\x7f\x4a\x8e\xff\xe1\x94\x0f\xbb\x07\xdd\xb3\xdb\xf1\xae\x68\xdc\xdf\x1c\xdc\xdf\x5f\x99\xb8\xdb\xb8\x1e\x68\xfa\xe9\xe2\x66\x28\xef\x3e\x84\x52\x1e\xca\x27\x10\xe9\x3b\x5e\x82\xfb\xab\x0f\xc1\xeb\x85\x3a\xeb\xdd\x5c\x0c\xd3\xc3\xab\xf3\xda\x7d\xeb\x5d\xff\xf4\xfd\x20\x3d\xbb\x6e\x7d\x1e\xb5\x76\x9a\xdb\xd1\x7e\x63\xf7\xbd\xda\xde\xfb\xf4\xfe\xe0\x7a\x78\xdb\xff\x72\xdc\xe8\x26\xe9\xde\x55\xd2\xda\xed\xb7\xfe\x8a\x9c\xc1\xc5\xce\xbb\xbf\xbb\xdf\x23\x54\xe6\xec\x99\xb3\x96\xef\xbd\x4e\xf1\xe0\xeb\x3a\xf9\x63\xfd\xff\x03\x00\x00\xff\xff\x20\xa0\xbe\x91\xbc\x1f\x00\x00")

func publicHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_publicHtmlTmpl,
		"public.html.tmpl",
	)
}

func publicHtmlTmpl() (*asset, error) {
	bytes, err := publicHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public.html.tmpl", size: 8124, mode: os.FileMode(436), modTime: time.Unix(1589742291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public.html.tmpl": publicHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public.html.tmpl": &bintree{publicHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
