// Code generated for package template by go-bindata DO NOT EDIT. (@generated)
// sources:
// public.html.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x57\xdb\xba\x16\x9e\xf3\x2b\x74\x7d\xcf\x8c\xda\x26\x2f\x02\x67\x39\x59\x97\x06\x28\xe9\x69\x0b\xe5\x75\x4a\x67\xb2\xb5\x1d\x2b\x91\x25\x57\x92\x13\x42\x16\xff\xfd\x2e\x3f\xf2\xb6\x13\xda\x02\xed\xa0\x0c\x82\x25\x6d\x6d\x7d\xfb\xa9\x2d\x5b\xce\x7f\x8e\xcf\x3b\xd7\x77\x17\x27\x28\xd0\x21\x6b\xef\x38\xc9\x3f\xc4\x30\xef\xb5\x0c\xe0\x46\x7b\x07\x21\x84\x9c\x00\x30\xc9\x1e\xd3\x66\x08\x1a\x23\x2f\xc0\x52\x81\x6e\x19\x37\xd7\xa7\xe6\x81\xb1\x3a\xcc\x71\x08\x2d\x63\x48\x61\x14\x09\xa9\x0d\xe4\x09\xae\x81\xeb\x96\x31\xa2\x44\x07\x2d\x02\x43\xea\x81\x99\x36\xde\x20\xca\xa9\xa6\x98\x99\xca\xc3\x0c\x5a\x95\x37\x48\x05\x92\xf2\x81\xa9\x85\xe9\x53\xdd\xe2\x62\x91\x3d\xa3\x7c\x80\x24\xb0\x96\xa1\xf4\x98\x81\x0a\x00\xb4\x81\x02\x09\x7e\xcb\x08\xb4\x8e\xd4\xdf\xb6\xad\x34\xf6\x06\x11\xd6\x81\xe5\x0a\xa1\x95\x96\x38\xf2\x08\xb7\x3c\x11\xda\xb3\x0e\xbb\x6e\x35\xac\x3d\xdb\x53\x6a\xde\x67\x85\x94\x5b\x9e\x52\x06\xa2\x5c\x43\x4f\x52\x3d\x6e\x19\x2a\xc0\xb5\x83\xba\x79\x88\xbb\xba\xca\x2f\xa3\x4e\xa5\x7a\x33\x38\xec\x5d\x1d\xba\xf8\x98\xd5\x2b\x95\x4f\x9f\x8f\xa2\xd3\xb0\x53\xdd\x3f\x19\x1d\x9d\x9f\x1d\xfc\xdb\xfb\xca\x1a\x1f\xef\xee\xee\x4f\x7d\x6f\xf7\x93\x77\xe1\x56\xc8\x3f\xef\xfa\xcd\xab\x81\x81\x3c\x29\x94\x12\x92\xf6\x28\x6f\x19\x98\x0b\x3e\x0e\x45\xac\x16\x65\xd3\x54\x33\x68\x5f\x69\x21\xfb\xe8\x88\x84\x94\xa3\x9b\xae\x63\x67\xbd\x3b\x99\x2d\xec\xb9\x31\x1c\x57\x90\xf1\xc2\xec\x64\x04\xe4\xbc\x23\xed\xe4\x78\x88\x3c\x86\x95\x6a\x19\x89\x0d\x30\xe5\x20\x8d\x65\x9a\x94\x8e\xd0\x19\x5d\x32\x85\xe3\xa1\xa9\xb1\x9b\x68\x82\xa4\x3d\x49\xcb\x40\x52\x30\x68\x19\x1a\xbb\x8c\x2a\x5d\xc0\x26\x65\x85\x17\x18\x99\x54\x43\x98\x72\x4b\xed\x86\x3d\x4d\x87\x30\x67\x1a\x2b\x90\x2a\x63\x4d\xb0\xc6\xa6\x16\xbd\x5e\xbe\xc2\xd4\xa6\xff\x9d\xd1\x2d\x2c\x6f\x20\x2c\x29\x36\x13\x89\xa4\x60\x6a\x81\x59\x3e\xa2\x80\x81\xa7\x81\xb4\x0c\x2d\x63\x30\xda\x37\xc9\x98\x63\xe3\xef\x86\x3c\xc7\x1a\x49\xd1\x07\x4f\x3f\x05\xee\x94\x74\x1b\xe2\x39\xdd\x0a\x68\x1f\x33\x05\x46\xfb\x22\x1f\xff\x39\xe0\x9e\x88\x23\xc1\x9f\x82\x3b\xa7\xdc\x06\x7b\x46\x56\x8c\xba\x93\x0d\x17\x82\x76\x6c\x42\x87\x2b\x2e\x6a\x73\xbc\xd0\x95\x79\x78\xe2\xc7\x3b\x3b\x45\xde\x39\xf3\x62\xa4\xb1\x6b\xe6\x79\x65\xc9\x4d\x3b\x79\xdf\xca\x32\x0b\x3c\x92\x99\x11\xe6\x80\x7c\x4c\x00\xa9\x40\x8c\x8a\x3d\x73\x41\x11\x09\x39\xcb\x25\x66\xd8\x05\xc6\x80\xb8\xe3\x55\x2f\x2e\x10\x38\xa8\xa4\xce\x87\xce\x30\x27\x8c\xf2\x9e\x63\x07\x95\x75\xb2\xc9\x84\xfa\x88\x0b\x8d\xac\xc7\xc7\x75\x1e\xbe\x90\x21\x0a\x41\x07\x82\xb4\x8c\x48\x94\x87\x9e\x4f\x81\x11\x05\xba\x64\x98\x41\x0f\x38\xc9\xf0\x74\xb9\x2f\x1c\x3b\xef\x29\x26\x5f\xd0\x58\x82\xc0\xec\x49\x11\x47\x25\x4b\x67\xfc\x13\xc5\xcc\x0d\xc5\xcc\x90\x98\x75\x94\x3b\x4f\xa6\x36\x03\xf9\x42\xb6\x0c\x08\x31\x65\x46\xfb\xc4\xfc\x88\x29\x73\xec\x74\x68\x03\xe3\x25\xfb\x67\x6c\x37\xe0\x48\xa7\x50\x1e\xc5\x3a\x35\x67\xb6\x56\xbe\x25\xe5\x0d\x3d\x8e\x12\xbb\xc2\xbd\x36\x50\xc4\xb0\x07\x81\x60\x04\x64\xcb\x30\x96\x24\xce\xa1\xa3\x94\x99\x19\x12\x03\x49\xf8\x16\x53\x99\x78\xfb\x36\x00\x2a\xc2\x7c\xca\x2c\x00\x16\x99\x2e\x13\xde\xc0\x68\xa7\x08\x10\x26\x44\x82\x52\x48\xf8\x48\x07\x80\x12\x17\x72\xec\x64\xca\x06\x2d\xac\xc7\xce\xca\xd0\xab\x9b\x51\xc5\x6e\x48\xb5\xd1\x7e\x11\x0b\xba\xb1\xd6\x82\xa7\x26\xcc\xd7\xc9\x6d\x98\xd8\x00\x94\x36\xd0\x10\xb3\x18\x5a\x46\xa2\x3c\xca\x7d\x31\xb3\x9d\xab\x39\x72\x35\x37\x23\x49\x43\x2c\xc7\x46\xfb\x1d\xe8\xdc\xe1\x33\xa6\x3f\xa3\xe4\xe2\xa1\xf2\xc8\x73\xec\x44\xeb\x45\x21\x0f\x4c\x01\x2a\x88\xf7\x05\xe9\xdb\x0e\xce\x12\xb4\x3d\xdf\x07\xdb\x6f\xb1\x37\x48\xb2\xeb\x66\x69\x9c\xa0\x3a\x8f\x74\x19\x62\x4d\x05\x77\xec\xa0\x5a\x42\x9d\x6c\xea\xb0\x90\x20\x19\xa0\xf4\xd7\x0c\xc4\xb0\xb0\x64\xc8\x66\xc9\xb6\xa3\x83\x76\x47\xb0\x38\xe4\x8e\xad\x83\xb4\x79\x9b\xd8\x25\x6b\xd9\x5a\x16\x4f\x9d\x4c\x24\xe6\x3d\x40\x7f\x51\x4e\xe0\xfe\x0d\xfa\x0b\x18\x84\xc0\x35\xfa\xbb\x85\xac\x44\xce\x12\xc5\xcc\x97\x25\xed\xc9\x24\x9b\xfd\xf8\xe8\xd8\x9a\x4c\xbb\x72\x46\xd3\xce\x0d\x08\x80\x93\x32\xf5\xdb\xa9\xf0\xe5\x9a\x9d\x6f\xcd\xa5\x1a\x5d\x70\xf9\x74\xf7\xd8\x18\x78\x53\x75\x58\xd3\x9a\x60\x93\xf8\x8b\xc1\x84\x25\x41\x29\xfb\xec\xd7\x24\xe0\xe3\x98\x95\xed\x10\xe5\xe0\x92\x5d\x97\xf2\x5e\xb6\x03\xe6\x8d\xc9\x24\x55\x2f\xb2\x92\xb8\x7b\x7c\xdc\xc2\x33\x53\x4d\x63\x99\x6d\x5a\xbc\x3e\x61\x22\xca\xaa\x99\xa5\xf2\xc4\x13\x8c\xe1\x48\xc1\xac\x46\x99\x76\xac\xe1\xca\xad\x81\x56\x06\x4a\xeb\xa6\xa5\x55\xed\xa0\xb1\x45\x59\xe5\x81\x3f\x23\x49\xf4\x99\x68\xae\x0c\xe2\xb2\x56\xa6\x54\x68\x26\xe2\x13\x70\xae\x99\x2c\xa9\xff\x9f\xaa\xda\x1f\x0a\xef\x75\x2e\x3f\x1c\xee\x45\x7f\x1b\x53\x40\x59\x62\x2c\xc7\xf5\xb3\xf9\xa0\x18\x62\x79\x8e\x58\x43\xb1\x29\x67\x2c\x13\x6e\xf7\xa7\xcd\x24\x1b\x86\x37\x67\xb5\xc2\x69\x45\x53\x8a\x2a\x8a\xd2\x12\x7a\xfd\x90\xf4\xc4\xca\x79\xe9\x4c\x55\x5c\x3c\x4f\x43\xfb\x29\xf5\x33\x20\x2b\xab\x92\x91\x91\x73\x4e\xcb\x82\x57\x28\xa9\xa7\x28\x8f\x41\x63\xca\xd4\xaf\x2b\xac\x73\xb9\x93\xac\x33\x4f\x8b\xdd\xe3\xd7\x2c\xb1\xa7\xaa\x27\x1b\xca\xec\x5a\x85\xd4\x48\xb5\x59\x35\xf7\x0f\xdc\xba\x59\x3f\x70\xab\xa6\xdb\x80\x43\x13\x0e\xea\x75\x17\xea\x4d\xa8\x35\xf1\xcb\x97\xe2\x39\xd2\x14\xf7\x9f\xea\x7b\x79\xca\x93\xab\xef\xc5\x48\xdb\x58\x80\xaf\xc5\xc8\xef\x53\x8b\x3f\x77\x3a\xe8\x48\xc0\x1a\xa6\x12\xff\xf2\x6c\xf0\x69\x29\x1b\x7c\x4a\xbd\xfd\xd5\xf3\x41\x0a\xa2\x3c\x23\x1c\x8d\x40\x89\x70\xa6\xb3\x97\x0f\xfe\xe4\xd8\xcd\x61\x84\x9e\x37\x09\x6c\xd3\xe5\x73\x5b\x58\x8c\x38\xc8\x2e\x31\xda\xe7\xc9\xc3\x2b\x67\xfa\xe9\xe2\xe5\x56\xc5\xf5\x6a\x13\xfb\x64\xcf\x6c\x56\x7c\xd7\xac\x7b\xf5\xba\x89\xab\x6e\xdd\x24\xd5\xe6\x1e\x21\x15\x4c\xf6\x61\xff\xe5\x4d\x9d\x1c\x27\x11\x25\x48\x07\x58\x23\x15\x88\x98\x11\x24\x46\x3c\x7d\xf3\x12\x4d\x63\xf4\x4f\xfa\x5f\x9c\xf2\xbd\xe9\xdf\x4b\x33\x5e\xf9\x06\xb0\x9a\x11\x7f\x9f\xdc\x9f\xbd\x87\x29\xab\x98\xe7\x47\xfd\xd7\x78\x8f\xe2\x2d\x1f\xac\x86\x3f\xfb\x1e\xe5\x47\xdf\xa1\xe4\x2c\x67\x27\xa7\xc9\xc4\x4a\x7e\xd2\x63\xc2\x4b\xbc\x55\xd9\x70\x02\x59\xea\xda\x7e\x00\x59\xff\x84\xb1\xe9\xfc\xb1\xf8\x69\xa4\xf8\xf8\x91\x7d\xcc\xd8\x72\xfa\x78\xf6\xf2\x21\x5b\x74\xc9\xe1\x7e\x55\x09\x91\xa9\x88\x12\x63\x86\xea\x55\xb7\x98\xd9\xf2\xe5\x7b\xcc\xfd\xfd\xfd\xcb\x6f\x21\x19\x0e\x44\xc9\x9f\x8d\x62\x79\x4a\xe9\x46\x91\xb5\xf2\x10\x33\xb7\x1f\x0f\x72\xf7\xfa\xcd\x4e\x07\x2b\xac\x56\x4d\xe8\xf8\x42\x68\x90\x73\xcb\x25\xad\xd5\x2f\x8f\xca\x93\x34\xd2\x48\x49\x6f\x7e\x45\xc1\x13\x04\xac\xfe\xb7\x18\xe4\x38\xbd\x97\x90\x3d\x9a\x35\xab\x61\x55\x2c\xc5\x68\x98\xde\x45\xe8\x17\x5e\x45\x38\xf6\xbf\x90\x87\x6a\xa0\x2f\xce\xf6\x98\xba\xba\x52\x0d\xde\xb9\x8e\xe2\xbe\xfd\x30\xae\x77\x76\xcf\xdf\x45\x38\x14\xa7\xb7\xe3\xda\xc1\xc7\xdb\xb7\xfc\x64\xb7\xeb\xba\xb7\x77\x37\x30\xda\x3d\x97\x9d\x2f\xf8\x72\xe0\xf7\xcb\xaf\x22\x38\x76\x86\xf5\x29\x02\x90\x04\x1e\x01\x46\x87\xd2\xe2\xa0\x6d\x1e\x85\x76\x24\xa2\x08\xa4\xd5\x57\xff\xab\x58\x95\x7d\x6b\xcf\x26\x54\x69\x3b\x0e\xc9\x74\xa4\x5c\xa8\xcf\xfb\x27\x87\x97\x67\x43\xb7\x3b\xfe\x7a\xfa\x5e\xf8\x7a\xb7\x1a\xbe\x77\xcf\xf0\xc9\xbf\x8c\xb0\x61\xf7\xb0\x7b\x7e\x37\x6e\xf0\xda\xc3\xed\xe1\xc3\xc3\xb5\x0e\xbb\xb5\x9b\x81\x22\x9f\x2f\x6f\x87\xe2\xfe\xa3\x2f\xc4\x91\x78\x16\xa1\xbe\xe3\xe2\x48\x7f\xf5\xde\x48\xb1\x58\xe7\xbd\xdb\xcb\x61\x7c\x74\x7d\x51\x79\x68\xbe\xef\x9f\x7d\x18\xc4\xe7\x37\xcd\x2f\xa3\xe6\x5e\x7d\x37\x38\xa8\x35\x3e\xc8\xdd\xfd\xcf\x1f\x0e\x6f\x86\x77\xfd\xaf\x27\xb5\x6e\x14\xef\x5f\x47\xcd\x46\xbf\xf9\x36\xb0\x07\x97\x7b\xef\xff\xe9\x7e\x8f\x58\x89\xff\x26\xfe\x97\x5f\x0f\xb1\xb3\xfb\x21\x8e\x9d\xde\xed\xf9\x7f\x00\x00\x00\xff\xff\xe9\xe8\xe5\x20\xeb\x23\x00\x00")

func publicHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_publicHtmlTmpl,
		"public.html.tmpl",
	)
}

func publicHtmlTmpl() (*asset, error) {
	bytes, err := publicHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public.html.tmpl", size: 9195, mode: os.FileMode(436), modTime: time.Unix(1589799673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public.html.tmpl": publicHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public.html.tmpl": &bintree{publicHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
