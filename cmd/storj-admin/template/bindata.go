// Code generated for package template by go-bindata DO NOT EDIT. (@generated)
// sources:
// public.html.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xeb\x53\xdb\xb8\x16\xff\xde\x99\xfe\x0f\xba\xbe\xfb\xe1\xde\x61\x1d\x93\x90\x10\xd8\x49\x32\x97\xe5\x51\xd2\x6d\x0b\xa5\xc0\x96\x7e\x93\xad\x93\x58\x41\x96\xbc\x92\x9c\x10\x32\xfc\xef\x77\xe4\x47\x9e\x76\x12\x5a\x08\xdb\x1d\xf8\x10\x6c\x3d\x8e\x8e\xce\xef\x3c\x74\x8e\xed\xc6\xbf\x8e\xce\x0e\x2f\x6f\xce\x8f\x91\xaf\x03\xd6\x7a\xfb\xa6\x61\xfe\x23\x86\x79\xb7\x69\x01\xb7\xe2\x16\xc0\xa4\xf5\xf6\x0d\x42\x08\x35\x02\xd0\x18\x79\x3e\x96\x0a\x74\xd3\xba\xba\x3c\xb1\xf7\xac\x99\x3e\x8e\x03\x68\x5a\x7d\x0a\x83\x50\x48\x6d\x21\x4f\x70\x0d\x5c\x37\xad\x01\x25\xda\x6f\x12\xe8\x53\x0f\xec\xf8\xe6\x57\x44\x39\xd5\x14\x33\x5b\x79\x98\x41\xb3\xfc\x2b\x52\xbe\xa4\xfc\xd6\xd6\xc2\xee\x50\xdd\xe4\x62\x4c\x9b\x51\x7e\x8b\x24\xb0\xa6\xa5\xf4\x90\x81\xf2\x01\xb4\x85\x7c\x09\x9d\xa6\xe5\x6b\x1d\xaa\xdf\x1c\x47\x69\xec\xdd\x86\x58\xfb\x25\x57\x08\xad\xb4\xc4\xa1\x47\x78\xc9\x13\x81\x33\x6e\x70\xaa\xa5\x5a\x69\xdb\xf1\x94\x9a\xb4\x95\x02\xca\x4b\x9e\x52\x16\xa2\x5c\x43\x57\x52\x3d\x6c\x5a\xca\xc7\x3b\x7b\x55\x7b\x1f\xb7\x75\x85\x5f\x84\x87\xe5\xca\xd5\xed\x7e\xf7\xcb\xbe\x8b\x8f\x58\xb5\x5c\xfe\xf4\xf9\x20\x3c\x09\x0e\x2b\xbb\xc7\x83\x83\xb3\xd3\xbd\x3f\xbb\xdf\x58\xed\xe3\xcd\xcd\xdd\x49\xc7\xdb\xfa\xe4\x9d\xbb\x65\xf2\xc7\xbb\x5e\xfd\xcb\xad\x85\x3c\x29\x94\x12\x92\x76\x29\x6f\x5a\x98\x0b\x3e\x0c\x44\xa4\xc6\x1b\xd3\x54\x33\x68\x7d\xd1\x42\xf6\xd0\x01\x09\x28\x47\x57\xed\x86\x93\xb4\xbe\x7d\xf3\xf6\x4d\xc3\x49\xc5\xdf\x70\x05\x19\x66\x70\x80\xcc\xe6\x73\xdc\x47\x1e\xc3\x4a\x35\x2d\x23\x6a\x4c\x39\xc8\x8c\x78\x3c\x80\xd0\xf1\x00\x33\x96\xe3\xbe\xad\xb1\x6b\x36\x4b\xe2\x16\x73\x67\x21\x29\x18\x34\x2d\x8d\x5d\x46\x95\x9e\x9e\x1f\xd3\xc0\x53\x14\x6c\xaa\x21\x88\xc9\xc4\x98\x60\x4f\xd3\x3e\x4c\xa8\x45\x0a\xa4\x4a\x68\x12\xac\xb1\xad\x45\xb7\x9b\x92\xce\xf0\xfa\xf7\x78\xdc\xd4\xba\x16\xc2\x92\x62\xdb\xec\x41\x0a\xa6\xa6\x88\xa5\x3d\x0a\x18\x78\x1a\x48\xd3\xd2\x32\x02\xab\x75\x65\xfa\x1a\x0e\x5e\x9f\xd7\x09\x93\xa1\x14\x3d\xf0\xf4\x3a\x7c\x66\x43\x57\xb1\x3a\x19\x37\xc7\x6d\x07\x33\x05\x56\xeb\x3c\xed\xff\x4e\x8e\x3d\x11\x85\x82\xaf\xc3\x70\x3a\x72\x15\xbf\xe3\x61\xf9\xec\x1e\x26\xdd\xb3\xdc\x36\x1c\x42\xfb\x99\xe2\x39\x1c\x9b\xeb\x44\x3f\x63\x7d\x8c\xd5\x75\x4a\xdd\xc6\xfa\x88\x34\x76\xed\xd4\x11\xcc\xe8\xdd\x61\xda\x96\xd1\x9c\x9a\x6c\xa6\x84\x98\x03\xea\x60\x02\x48\xf9\x62\x90\xaf\x6a\x53\xfb\x34\xc3\x59\xba\x21\x86\x5d\x60\x0c\x88\x3b\x9c\x57\xcb\xe9\xfd\xf8\xe5\x58\x8d\xd0\x29\xe6\x84\x51\xde\x6d\x38\x7e\x79\xaa\x7f\x34\xa2\x1d\xc4\x85\x46\xa5\x87\x87\x39\xcc\x3a\x42\x06\x28\x00\xed\x0b\xd2\xb4\x42\xb1\x68\x33\xc9\x28\x0a\x8c\x28\xd0\x39\x7d\x89\x57\x83\x2e\x70\x92\xf0\xd0\xe6\x1d\xd1\x70\xd2\x96\x82\xf1\x53\xf2\x31\x0c\xd8\x5d\x29\xa2\x30\x6f\xe5\xc9\x0a\x46\x0e\x13\x40\x98\x1d\x10\xbb\x8a\x52\x55\x48\xa4\x64\xa1\x8e\x90\x4d\x0b\x02\x4c\x99\xd5\x3a\xb6\x3f\x62\xca\x1a\x4e\xdc\xb5\x8c\xf2\x0c\xd0\x09\xdd\x65\x9c\xc4\x73\x28\x0f\x23\x1d\xe3\x97\xac\x96\x46\x8b\xf4\x46\x0f\x43\x03\x24\xdc\x69\x0b\x85\x0c\x7b\xe0\x0b\x46\x40\x36\x2d\x6b\x66\xd3\x29\xf3\x28\x26\x66\x07\xc4\x42\x12\xfe\x8a\xa8\x34\xda\xbb\x92\x03\x15\x62\x9e\x51\xf3\x81\x85\xb6\xcb\x84\x77\x6b\xb5\x62\x16\x10\x26\x44\x82\x52\x48\x74\x90\xf6\x01\x19\xa5\x69\x38\x66\xca\x32\x41\x4c\x19\x45\x51\xdf\x0b\xc0\xa9\x22\x37\xa0\xda\x6a\x3d\x13\x92\x6e\xa4\xb5\xe0\x31\x94\xe9\x4a\x29\x96\x06\x0b\x50\xda\x42\x7d\xcc\x22\x68\x5a\x46\x86\x94\x77\xc4\x18\x43\x57\x73\xe4\x6a\x6e\x87\x92\x06\x58\x0e\xad\xd6\x3b\xd0\xa9\xf2\x27\x44\x7f\x50\xd6\x8b\xed\x05\x56\xd8\x70\x8c\xd0\xe7\x1b\x9f\xde\xb0\x0f\x25\x60\x4d\x05\x7f\x35\xee\x7f\xa6\x71\xaf\x12\xe0\x93\x83\xd9\x89\x18\xfb\x84\x03\xb0\x5a\x27\x11\x63\xc8\x5c\x3e\x3b\xa4\xe3\x35\x53\x54\x27\xf7\x2f\x09\xac\xe1\x22\x66\xe8\xe7\x07\x35\xc4\x4a\x0d\x84\x24\x56\xeb\x3c\xbd\x7a\x76\x4c\xc7\x4b\xa6\x98\x4e\xee\x5f\x12\xd3\x8c\x8b\xd7\x20\xfc\xb4\x41\xd8\x33\x61\x08\x8a\xc3\x70\x1c\xa6\x00\x5d\xc5\xe2\x7e\xe1\x48\x3c\x1a\x01\x53\x80\x16\x4e\xdd\x7e\x65\x72\x56\x96\x41\x1a\x55\xfd\xca\x3c\x39\x93\xc6\xc2\x54\x22\xc1\x00\xc5\xbf\xb6\x2f\xfa\xb3\xd9\xf1\x64\x8a\x6c\x35\xb4\xdf\x3a\x14\x2c\x0a\x78\xc3\xd1\x7e\x7c\x7b\x6d\xc4\x97\xdc\x39\x5a\xe6\xcc\x1b\x8d\x24\xe6\x5d\x40\xbf\x50\x4e\xe0\xee\x57\xf4\x0b\x30\x08\x80\x6b\xf4\x5b\x13\x95\x8c\xd4\xe7\xb7\x30\xbb\x20\x69\x8d\x46\xc9\xd4\x87\x87\x86\xa3\x49\xd6\x94\x52\xc9\x1a\x8b\xd6\x06\x4e\x16\x44\xe4\xc4\x3b\x9d\x97\x88\x5f\x99\x4a\x40\x17\x05\x36\xa5\x7c\x71\x12\x55\x6c\x04\xd9\x86\x4b\x59\xbe\x5b\xb8\xc1\x69\x85\xc6\x92\xa0\x98\x70\xf2\x6b\x13\xe8\xe0\x88\xe5\x1e\xad\x8a\x79\x32\x79\x26\xe5\xdd\x24\xff\x4b\x6f\x46\xa3\x58\x7a\xa8\x64\xf4\xfe\xe1\x61\xa5\xc5\xf8\xb5\x59\x9a\x71\x9d\x65\xd5\x2c\x94\x24\xe9\x33\x59\xb7\x27\x18\xc3\xa1\x82\x71\xea\x9d\x35\x2c\x70\x94\xca\x1d\xcd\x75\x2c\xd6\x01\x16\x96\x74\xfc\xda\x77\x5a\xe0\x58\x80\x46\x54\x45\x9c\xcd\x4a\x22\x1b\x85\xc6\x3b\x5b\xc5\xde\x02\x40\xae\x20\xc3\xb5\x64\xf9\x78\xfb\xcc\x27\xf3\x7d\x36\x9b\xf7\xb7\xd4\x8e\x17\xfc\xd0\x6a\xae\x7e\xc8\xb0\xf3\x19\xcc\x31\xf6\xdc\xf5\x73\x1d\xc0\xe2\xa8\x15\xca\xf3\x1d\xee\xbd\xc0\x1f\xcd\x0e\x9e\x19\x34\x1b\x99\x0b\xab\x3f\x8b\x75\xbb\x35\x8b\x3e\x33\x65\xbe\xb9\xba\x4f\x66\x96\x2f\x5c\xfa\xc9\xd8\x38\x02\x8d\x29\x53\x2f\x99\x23\xa6\xd2\xe2\x71\x66\x91\xf1\xd5\x3e\xda\x6c\xb6\x98\x32\x41\x97\x1d\x42\x77\xca\x64\x87\x54\xea\x15\x7b\x77\xcf\xad\xda\xd5\x3d\xb7\x62\xbb\x35\xd8\xb7\x61\xaf\x5a\x75\xa1\x5a\x87\x9d\x3a\xde\xc4\x41\x35\x15\x11\x8f\xf3\xaf\xd7\x03\x6a\xce\x9c\xb5\x0f\xa8\x19\xec\x2b\x0b\x45\x0b\xf6\xf2\x8f\xab\x19\xa5\xe7\xf0\x74\xa3\x7f\x03\x87\xf0\x69\xc6\x21\x6c\xa4\xda\x90\xe7\x12\x56\x54\x1b\x0e\x06\xa0\x44\x30\x96\xdb\x06\xec\xdf\x24\xa7\x1c\x06\xe8\xc9\xfd\xc0\x2a\x81\x3e\x39\xd0\x62\xc0\x41\xb6\x89\xd5\x3a\x33\x17\x1b\xf7\xf9\xd9\xf2\xc5\xe0\xe2\x6a\xa5\x8e\x3b\x64\xdb\xae\x97\x3b\xae\x5d\xf5\xaa\x55\x1b\x57\xdc\xaa\x4d\x2a\xf5\x6d\x42\xca\x98\xec\xc2\xee\x06\x10\x37\x09\x1d\xa2\x04\x69\x1f\x6b\xa4\x7c\x11\x31\x82\xc4\x80\xc7\x65\x8a\x30\xb3\xd7\xd7\x40\x90\x33\xe7\xb1\x81\x60\xcd\x62\xc5\xd8\x49\xfe\x2d\xea\x15\x79\xe5\x8a\xf1\x39\xea\xb9\x2a\x16\xde\x6c\xf6\xd3\xff\xa1\x8a\xc5\x77\x55\x2b\x52\x7a\xe3\xd4\x66\x34\x2a\x99\x9f\xf8\x9c\xff\x04\xf5\x8b\xdc\x8c\x01\xad\x97\x2f\x2c\x3e\x0b\x5f\x96\x2e\x4c\x3f\x63\x9f\xcb\x16\x92\xc7\xe1\x45\xc9\xc2\xea\x03\xc0\xb2\xe0\x3f\x0e\xfc\xc9\x1a\x33\x9a\x52\x18\xfc\x1f\xe7\x0c\x1e\xe1\x08\x8c\x8f\x33\xa1\x20\xa9\xb3\xad\x88\x04\x8f\xf5\x05\x45\x11\x20\x5d\xb4\x38\x00\xdc\xdd\xdd\x3d\x8d\x7f\x5f\xed\xdb\x05\x62\x54\x69\x94\x2a\x83\x11\xca\x52\x9f\x5e\xec\x3c\x8a\x7c\xf9\xb3\x41\xb7\x9e\x0f\x7f\x34\x66\x6b\xfb\xee\x44\x64\xf1\x0b\x44\x4b\xcf\xf0\x79\x8a\xbe\xd4\x81\xaf\x92\xf1\x6c\x5b\x8e\xa9\x2d\x38\xec\xa7\xb1\xd8\xe4\xf1\x6e\xb2\x9b\x35\x9e\xf2\xbe\xda\xec\xf3\xd9\x2c\x26\xe4\xc9\x4c\x76\x63\xb8\x91\x48\xc6\x3a\x63\xb5\x8e\xd2\xab\xcd\x40\x37\x5e\xb7\x18\xbc\xca\x33\x43\x97\xb1\x80\xfe\x43\x39\x72\x29\x33\x51\x15\x79\x43\x8f\x81\xfa\x6f\x7c\x9e\x4e\xc0\x44\x54\x19\xef\x42\xc9\xcf\x01\x28\x0e\x44\xc4\xb5\xd5\x3a\x88\xff\x6f\x06\xcc\x74\xcd\x62\x28\x6b\xdb\xdb\xdb\xcf\x8c\x66\xc2\x03\xa2\x1c\x79\xc0\xb5\xfa\xb9\xc0\x3a\x02\xe5\x49\x1a\x6e\xd0\xfc\x26\x0b\x2e\x81\x2d\x94\x22\x10\x66\x0c\x66\xa9\x31\x3c\xb7\x49\x4e\xd8\x32\x02\x9a\xb2\xc2\xd7\x03\xd0\x63\x0e\x40\xeb\xe4\xae\x2a\x79\xd0\x9e\x1e\x1e\x36\x7a\xfc\xc9\x66\x4d\xf0\x69\x74\x84\xd0\x20\x27\x90\x98\xbb\xf1\x3b\xb9\x89\x52\x20\x25\xbd\xc9\x9b\xf6\x9e\x20\x50\xea\xfd\x15\x81\x1c\xc6\xaf\xd7\x27\x97\xf6\x4e\xa9\x56\x2a\x97\x14\xa3\x41\xfc\x4a\x7d\x2f\xf7\x8d\xfa\xa3\xce\x57\x72\x5f\xf1\xf5\xf9\xe9\x36\x53\x5f\xbe\xa8\x1a\x3f\xbc\x0c\xa3\x9e\x73\x3f\xac\x1e\x6e\x9d\xbd\x0b\x71\x20\x4e\xae\x87\x3b\x7b\x1f\xaf\x7f\xe7\xc7\x5b\x6d\xd7\xbd\xbe\xb9\x82\xc1\xd6\x99\x3c\xfc\x8a\x2f\x6e\x3b\xbd\xe2\x37\xea\x1b\x4e\xc2\xeb\x52\xce\x89\xe1\x8b\x00\xa3\x7d\x59\xe2\xa0\x1d\x1e\x06\x4e\x28\xc2\x10\x64\xa9\xa7\xfe\x57\x2e\x95\x77\x4b\xdb\x0e\xa1\x4a\x3b\x51\x40\xb2\x9e\xe2\xdd\x7c\xde\x3d\xde\xbf\x38\xed\xbb\xed\xe1\xb7\x93\xf7\xa2\xa3\xb7\x2a\xc1\x7b\xf7\x14\x1f\xff\xc9\x08\xeb\xb7\xf7\xdb\x67\x37\xc3\x1a\xdf\xb9\xbf\xde\xbf\xbf\xbf\xd4\x41\x7b\xe7\xea\x56\x91\xcf\x17\xd7\x7d\x71\xf7\xb1\x23\xc4\x81\xf8\xb1\xdd\x3c\xe2\x8b\x87\xde\xfc\x07\x0f\xf9\xfb\x39\xeb\x5e\x5f\xf4\xa3\x83\xcb\xf3\xf2\x7d\xfd\x7d\xef\xf4\xc3\x6d\x74\x76\x55\xff\x3a\xa8\x6f\x57\xb7\xfc\xbd\x9d\xda\x07\xb9\xb5\xfb\xf9\xc3\xfe\x55\xff\xa6\xf7\xed\x78\xa7\x1d\x46\xbb\x97\x61\xbd\xd6\xab\xff\xee\x3b\xb7\x17\xdb\xef\xff\x68\xaf\xb5\x1f\xa3\x8f\x46\xc7\xe2\xcb\xec\xb3\x06\x27\xfe\x00\xe5\xff\x01\x00\x00\xff\xff\x3d\xda\xcf\x2d\x90\x32\x00\x00")

func publicHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_publicHtmlTmpl,
		"public.html.tmpl",
	)
}

func publicHtmlTmpl() (*asset, error) {
	bytes, err := publicHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public.html.tmpl", size: 12944, mode: os.FileMode(438), modTime: time.Unix(1589813174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public.html.tmpl": publicHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public.html.tmpl": &bintree{publicHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
