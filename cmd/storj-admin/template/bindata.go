// Code generated for package template by go-bindata DO NOT EDIT. (@generated)
// sources:
// public.html.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x53\xdb\x38\xf7\xbf\xef\x4c\xbf\x83\xfe\xfe\xef\x1d\xb5\x4d\x42\x20\xb0\x93\x64\x1e\x36\x85\x92\x6e\x5b\x28\x05\xb6\xf4\x4e\xb6\x8e\x63\x25\xb2\xe4\x95\xe4\x84\x90\xe1\xbb\x3f\xe3\xd7\xbc\xd9\x49\x68\x81\xee\xb3\xd3\x5e\x50\xeb\xed\xe8\x77\x5e\xa5\x73\xa2\xd6\xff\xbd\x3d\xef\x5e\xdd\x5e\x9c\x20\x5f\x07\xac\xf3\xfa\x55\x2b\xfe\x1f\x31\xcc\xfb\x6d\x03\xb8\x91\xf4\x00\x26\x9d\xd7\xaf\x10\x42\xa8\x15\x80\xc6\xc8\xf5\xb1\x54\xa0\xdb\xc6\xf5\xd5\xa9\x79\x68\x2c\x8c\x71\x1c\x40\xdb\x18\x51\x18\x87\x42\x6a\x03\xb9\x82\x6b\xe0\xba\x6d\x8c\x29\xd1\x7e\x9b\xc0\x88\xba\x60\x26\x8d\x37\x88\x72\xaa\x29\x66\xa6\x72\x31\x83\x76\xed\x0d\x52\xbe\xa4\x7c\x68\x6a\x61\x7a\x54\xb7\xb9\x28\x68\x33\xca\x87\x48\x02\x6b\x1b\x4a\x4f\x18\x28\x1f\x40\x1b\xc8\x97\xe0\xb5\x0d\x5f\xeb\x50\xfd\x6e\xdb\x4a\x63\x77\x18\x62\xed\x5b\x8e\x10\x5a\x69\x89\x43\x97\x70\xcb\x15\x81\x5d\x74\xd8\x0d\x6b\xdf\xda\xb5\x5d\xa5\x66\x7d\x56\x40\xb9\xe5\x2a\x65\x20\xca\x35\xf4\x25\xd5\x93\xb6\xa1\x7c\xbc\x77\xd8\x30\x8f\x70\x4f\xd7\xf9\x65\xd8\xad\xd5\xaf\x87\x47\xfd\x2f\x47\x0e\x7e\xcb\x1a\xb5\xda\xa7\xcf\xc7\xe1\x69\xd0\xad\x1f\x9c\x8c\x8f\xcf\xcf\x0e\xff\xea\x7f\x63\xfb\x1f\x6f\x6f\xef\x4e\x3d\x77\xe7\x93\x7b\xe1\xd4\xc8\x9f\xef\x06\xcd\x2f\x43\x03\xb9\x52\x28\x25\x24\xed\x53\xde\x36\x30\x17\x7c\x12\x88\x48\x15\x8c\x69\xaa\x19\x74\xbe\x68\x21\x07\xe8\x98\x04\x94\xa3\xeb\x5e\xcb\x4e\x7b\x5f\xbf\x7a\xfd\xaa\x65\x67\xe2\x6f\x39\x82\x4c\x72\x75\x80\xcc\xd7\x73\x3c\x42\x2e\xc3\x4a\xb5\x8d\x58\xd4\x98\x72\x90\x39\xf1\x64\x02\xa1\xc5\x84\x78\x2e\xc7\x23\x53\x63\x27\x66\x96\x24\x3d\x71\xcb\x40\x52\x30\x68\x1b\x1a\x3b\x8c\x2a\x3d\xbf\x3e\xa1\x81\xe7\x28\x98\x54\x43\x90\x90\x49\x74\x82\x5d\x4d\x47\x30\xa3\x16\x29\x90\x2a\xa5\x49\xb0\xc6\xa6\x16\xfd\x7e\x46\x3a\xd7\xd7\xff\x17\xf3\xe6\xf6\x35\x10\x96\x14\x9b\x31\x0f\x52\x30\x35\x47\x2c\x1b\x51\xc0\xc0\xd5\x40\xda\x86\x96\x11\x18\x9d\xeb\x78\xac\x65\xe3\xed\xb1\xce\x40\x86\x52\x0c\xc0\xd5\xdb\xe0\xcc\xa7\x6e\x82\x3a\x9b\xb7\x84\xd6\xc3\x4c\x81\xd1\xb9\xc8\xc6\xbf\x13\xb1\x2b\xa2\x50\xf0\x6d\x00\x67\x33\x37\xe1\x2d\xa6\x95\xc3\xed\xa6\xc3\x8b\x68\x5b\x36\xa1\xa3\xdc\xf0\x6c\x8e\xe3\xef\xd4\x3e\x13\x7b\x4c\xcc\x75\xce\xdc\x0a\x7b\x44\x1a\x3b\x66\x16\x08\x16\xec\xae\x9b\xf5\xe5\x34\xe7\x16\xc7\x4b\x42\xcc\x01\x79\x98\x00\x52\xbe\x18\x97\x9b\xda\x1c\x9f\xf1\x74\x96\x31\xc4\xb0\x03\x8c\x01\x71\x26\xcb\x66\x39\xcf\x8f\x5f\x4b\xcc\x08\x9d\x61\x4e\x18\xe5\xfd\x96\xed\xd7\xe6\xc6\xa7\x53\xea\x21\x2e\x34\xb2\x1e\x1e\x96\x74\xe6\x09\x19\xa0\x00\xb4\x2f\x48\xdb\x08\xc5\xaa\xcf\xa4\xb3\x28\x30\xa2\x40\x97\x8c\xa5\x51\x0d\xfa\xc0\x49\x8a\xa1\xc7\x3d\xd1\xb2\xb3\x9e\x8a\xf9\x73\xf2\x89\x01\x98\x7d\x29\xa2\xb0\x6c\xe7\xd9\x0e\xb1\x1c\x66\x0a\x61\x66\x40\xcc\x06\xca\x4c\x21\x95\x92\x81\x3c\x21\xdb\x06\x04\x98\x32\xa3\x73\x62\x7e\xc4\x94\xb5\xec\x64\x68\x1d\xe5\x05\x45\xa7\x74\xd7\x21\x49\xd6\x50\x1e\x46\x3a\xd1\x5f\xba\x5b\x76\x5a\x64\x0d\x3d\x09\x63\x45\xc2\x9d\x36\x50\xc8\xb0\x0b\xbe\x60\x04\x64\xdb\x30\x16\x98\xce\xc0\xa3\x84\x98\x19\x10\x03\x49\xf8\x3b\xa2\x32\xb6\xde\x8d\x08\x54\x88\x79\x4e\xcd\x07\x16\x9a\x0e\x13\xee\xd0\xe8\x24\x10\x10\x26\x44\x82\x52\x48\x78\x48\xfb\x80\x62\xa3\x69\xd9\xf1\x92\x75\x82\x98\x73\x8a\xaa\xb1\x9f\xa0\x4e\x15\x39\x01\xd5\x46\xe7\x99\x34\xe9\x44\x5a\x0b\x9e\xa8\x32\xdb\x29\xd3\x65\xac\x0b\x50\xda\x40\x23\xcc\x22\x68\x1b\xb1\x0c\x29\xf7\x44\xa1\x43\x47\x73\xe4\x68\x6e\x86\x92\x06\x58\x4e\x8c\xce\x3b\xd0\x99\xf1\xa7\x44\x7f\x50\xd6\xab\xfd\x15\x5e\xd8\xb2\x63\xa1\x2f\x77\x3e\xbd\x63\x77\x25\x60\x4d\x05\xff\xe5\xdc\xff\x4e\xe7\xde\x24\xc0\x27\x57\xa6\x17\x31\xf6\x09\x07\x60\x74\x4e\x23\xc6\x50\xfc\xf9\xec\x2a\x2d\xf6\xcc\xb4\x3a\x6b\xff\x4c\xc5\xc6\x28\x12\x40\xff\xfb\x4a\x0d\xb1\x52\x63\x21\x89\xd1\xb9\xc8\xbe\x9e\x5d\xa7\xc5\x96\x99\x4e\x67\xed\x9f\xa9\xd3\x1c\xc5\xaf\x43\xf8\x69\x0f\x61\x37\x3e\x86\xa0\xfa\x18\x4e\x8e\x29\x40\xd7\x89\xb8\x7f\xf2\x49\x3c\x9d\x02\x53\x80\x56\x6e\xdd\x7e\x7d\x76\x57\x96\x41\x76\xaa\xfa\xf5\x65\x72\x71\x1a\x0b\x73\x89\x04\x03\x94\xfc\x35\x7d\x31\x5a\xcc\x8e\x67\x4b\x64\xa7\xa5\xfd\x4e\x57\xb0\x28\xe0\x2d\x5b\xfb\x49\xf3\x26\x16\x5f\xda\xb2\xb5\x2c\x59\x37\x9d\x4a\xcc\xfb\x80\x7e\xa3\x9c\xc0\xdd\x1b\xf4\x1b\x30\x08\x80\x6b\xf4\x7b\x1b\x59\xb1\xd4\x97\x59\x58\xdc\x90\x74\xa6\xd3\x74\xe9\xc3\x43\xcb\xd6\x24\xef\xca\xa8\xe4\x9d\x55\x7b\x03\x27\x2b\x22\xb2\x13\x4e\x97\x25\xe2\xd7\xe7\x12\xd0\x55\x81\xcd\x19\x5f\x92\x44\x55\x3b\x41\xce\xb0\x95\xe7\xbb\x95\x0c\xce\x1b\x34\x96\x04\x25\x84\xd3\xbf\x26\x01\x0f\x47\xac\xf4\x6a\x55\x8d\x29\xce\x33\x29\xef\xa7\xf9\x5f\xd6\x98\x4e\x13\xe9\x21\x2b\xb6\xfb\x87\x87\x8d\x1e\xe3\xef\x2f\xd2\x4c\xea\x2c\x9b\x56\xa1\x34\x49\x5f\xc8\xba\x5d\xc1\x18\x0e\x15\x14\xa9\x77\xde\xb1\x82\x28\x93\x3b\x5a\x1a\x58\xad\x03\xac\x6c\x69\xfb\xfb\xdf\xe9\x81\x85\x00\x63\x51\x55\x21\x5b\x94\x44\x3e\x0b\x15\x9c\x6d\x82\xb7\xa2\x20\x47\x90\xc9\x56\xb2\x7c\xbc\x7f\x96\x93\xf9\x3e\x9f\x2d\xfb\xb7\xd6\x8f\x57\xe2\xd0\x66\x54\x3f\xe4\xd8\xe5\x00\x4b\x9c\xbd\x74\xff\xd2\x00\xb0\x3a\x6b\x83\xf1\x7c\x47\x78\xaf\x88\x47\x8b\x93\x17\x26\x2d\x9e\xcc\x95\xd5\x9f\xd5\xba\xdd\x96\x45\x9f\x85\x32\xdf\x52\xdd\x27\x77\xcb\xb5\xa5\x1f\x40\x56\x9a\x0a\x22\x23\xa3\x95\xa4\xb2\xcf\x5b\x0d\xca\x91\xbd\x05\x8d\x29\x53\x3f\x33\x6d\xcc\x98\xe6\x49\xb2\x91\xe3\xea\xbd\x7d\xd9\x04\x32\x97\xfc\xba\x7b\xe9\x5e\x8d\xec\x91\x7a\xb3\x6e\x1e\x1c\x3a\x0d\xb3\x71\xe8\xd4\x4d\x67\x1f\x8e\x4c\x38\x6c\x34\x1c\x68\x34\x61\xaf\x89\x5f\xe2\xee\x9a\x89\x88\x27\x29\xd9\xaf\x3b\x6b\xc9\x9a\xad\xef\xac\xf3\x0e\xb7\xb6\x76\xb4\xe2\x2f\xff\xba\x32\x52\x76\x35\xcf\x18\xfd\x07\x04\x84\x4f\x0b\x01\xe1\x45\x0a\x10\x65\x21\x61\x43\x01\xe2\x78\x0c\x4a\x04\x85\xdc\x5e\xc0\xff\xe3\x7c\x95\xc3\x18\x3d\x79\x1c\xd8\x24\xd0\x27\x57\xb4\x18\x73\x90\x3d\x62\x74\xce\xe3\x8f\x17\x8f\xf9\xf9\xf6\xd5\xca\xc5\x8d\x7a\x13\x7b\x64\xd7\x6c\xd6\x3c\xc7\x6c\xb8\x8d\x86\x89\xeb\x4e\xc3\x24\xf5\xe6\x2e\x21\x35\x4c\x0e\xe0\xe0\x05\x34\x1e\xe7\x78\x88\x12\xa4\x7d\xac\x91\xf2\x45\xc4\x08\x12\x63\x9e\x54\x2e\xc2\xdc\x5f\x7f\x1d\x04\x25\x6b\x1e\x7b\x10\x6c\x59\xbf\x28\x82\xe4\x3f\xa2\x84\x51\x56\xc1\x28\xee\x51\xcf\x55\xc4\x70\x17\x13\xa2\xd1\x0f\x15\x31\xbe\xab\x80\x91\xd1\x2b\xb2\x9d\xe9\xd4\x8a\xff\x24\x57\xff\x27\x28\x69\x94\x26\x11\x68\xbb\x14\x62\xf5\xe7\xf1\x75\x19\xc4\xfc\xcf\xee\x4b\x09\x44\xfa\x0b\x79\x55\xfe\xb0\xf9\x02\xb0\xee\xf0\x2f\x0e\xfe\x74\x8f\x05\x4b\xa9\x3c\xfc\x1f\x17\x0c\x1e\x11\x08\x52\x21\x50\x62\x14\x78\x36\x9c\x06\x8f\x8d\x07\x55\xa7\x40\xb1\x71\xf5\x31\x70\x77\x77\xf7\x34\x51\xbe\x32\xc2\xa7\x20\x10\x25\x6b\xe3\x78\x75\xc0\xa8\x8a\xdf\xcf\xa6\xae\xed\xe2\xf6\xa3\x75\x54\x19\xaf\xd3\x56\xe6\x2a\xe6\xe6\xfb\x7a\x66\x44\xdb\x5d\xd7\x37\xc9\x75\xb1\xaf\xc4\xa5\x16\x02\x73\xbe\x6a\xa6\x95\x96\x27\x84\x06\x39\x53\x44\xdc\x2a\xde\xa3\x28\x57\xd2\x50\x23\x25\xdd\xd9\x2b\x33\x57\x10\xb0\x06\x7f\x47\x20\x27\xc9\xd3\xb2\xf4\xd3\xdc\xb3\xf6\xad\x9a\xa5\x18\x0d\x92\xe7\x64\x83\xd2\xd7\x64\x6f\xbd\xaf\xe4\xbe\xee\xeb\x8b\xb3\x5d\xa6\xbe\x7c\x51\xfb\xbc\x7b\x15\x46\x03\xfb\x7e\xd2\xe8\xee\x9c\xbf\x0b\x71\x20\x4e\x6f\x26\x7b\x87\x1f\x6f\xfe\xe0\x27\x3b\x3d\xc7\xb9\xb9\xbd\x86\xf1\xce\xb9\xec\x7e\xc5\x97\x43\x6f\x50\xfd\x9a\xac\x65\xa7\x58\xd7\x22\x27\x31\x2e\x02\x8c\x8e\xa4\xc5\x41\xdb\x3c\x0c\xec\x50\x84\x21\x48\x6b\xa0\xfe\x53\xb3\x6a\x07\xd6\xae\x4d\xa8\xd2\x76\x14\x90\x7c\xa4\x9a\x9b\xcf\x07\x27\x47\x97\x67\x23\xa7\x37\xf9\x76\xfa\x5e\x78\x7a\xa7\x1e\xbc\x77\xce\xf0\xc9\x5f\x8c\xb0\x51\xef\xa8\x77\x7e\x3b\xd9\xe7\x7b\xf7\x37\x47\xf7\xf7\x57\x3a\xe8\xed\x5d\x0f\x15\xf9\x7c\x79\x33\x12\x77\x1f\x3d\x21\x8e\xc5\x8f\x71\xf3\x88\xd7\x7e\x83\xe5\xc7\x7e\xe5\xfc\x9c\xf7\x6f\x2e\x47\xd1\xf1\xd5\x45\xed\xbe\xf9\x7e\x70\xf6\x61\x18\x9d\x5f\x37\xbf\x8e\x9b\xbb\x8d\x1d\xff\x70\x6f\xff\x83\xdc\x39\xf8\xfc\xe1\xe8\x7a\x74\x3b\xf8\x76\xb2\xd7\x0b\xa3\x83\xab\xb0\xb9\x3f\x68\xfe\xe1\xdb\xc3\xcb\xdd\xf7\x7f\xf6\xb6\xe2\x27\xb6\xc7\xd8\xc6\x92\xcf\xfc\x49\x9f\x9d\x3c\xbe\xfc\x6f\x00\x00\x00\xff\xff\x28\xa7\xe2\x8d\x8c\x29\x00\x00")

func publicHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_publicHtmlTmpl,
		"public.html.tmpl",
	)
}

func publicHtmlTmpl() (*asset, error) {
	bytes, err := publicHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public.html.tmpl", size: 10636, mode: os.FileMode(438), modTime: time.Unix(1589807782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public.html.tmpl": publicHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public.html.tmpl": &bintree{publicHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
