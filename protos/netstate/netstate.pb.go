// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netstate.proto

/*
Package netstate is a generated protocol buffer package.

It is generated from these files:
	netstate.proto

It has these top-level messages:
	FilePath
	ListRequest
	PutResponse
	GetResponse
	ListResponse
	DeleteResponse
*/
package netstate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FilePath is a request message for Put, Get, and Delete rpc calls
type FilePath struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// smallValue is a value too small to be broken up and stored
	// in different places
	SmallValue string `protobuf:"bytes,2,opt,name=smallValue" json:"smallValue,omitempty"`
}

func (m *FilePath) Reset()                    { *m = FilePath{} }
func (m *FilePath) String() string            { return proto.CompactTextString(m) }
func (*FilePath) ProtoMessage()               {}
func (*FilePath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FilePath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FilePath) GetSmallValue() string {
	if m != nil {
		return m.SmallValue
	}
	return ""
}

// ListRequest is a request message for the List rpc call
type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// PutResponse is a response message for the Put rpc call
type PutResponse struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation" json:"confirmation,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutResponse) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

// GetResponse is a response message for the Get rpc call
type GetResponse struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// ListResponse is a response message for the List rpc call
type ListResponse struct {
	Filepaths []string `protobuf:"bytes,1,rep,name=filepaths" json:"filepaths,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListResponse) GetFilepaths() []string {
	if m != nil {
		return m.Filepaths
	}
	return nil
}

// DeleteResponse is a response message for the Delete rpc call
type DeleteResponse struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation" json:"confirmation,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteResponse) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func init() {
	proto.RegisterType((*FilePath)(nil), "netstate.FilePath")
	proto.RegisterType((*ListRequest)(nil), "netstate.ListRequest")
	proto.RegisterType((*PutResponse)(nil), "netstate.PutResponse")
	proto.RegisterType((*GetResponse)(nil), "netstate.GetResponse")
	proto.RegisterType((*ListResponse)(nil), "netstate.ListResponse")
	proto.RegisterType((*DeleteResponse)(nil), "netstate.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetState service

type NetStateClient interface {
	// Put formats and hands off a file path to be saved to boltdb
	Put(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*PutResponse, error)
	// Get formats and hands off a file path to get from boltdb
	Get(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*GetResponse, error)
	// List calls the bolt client's List function and returns all file paths
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Delete formats and hands off a file path to delete from boltdb
	Delete(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type netStateClient struct {
	cc *grpc.ClientConn
}

func NewNetStateClient(cc *grpc.ClientConn) NetStateClient {
	return &netStateClient{cc}
}

func (c *netStateClient) Put(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/netstate.NetState/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netStateClient) Get(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/netstate.NetState/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netStateClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/netstate.NetState/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netStateClient) Delete(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/netstate.NetState/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetState service

type NetStateServer interface {
	// Put formats and hands off a file path to be saved to boltdb
	Put(context.Context, *FilePath) (*PutResponse, error)
	// Get formats and hands off a file path to get from boltdb
	Get(context.Context, *FilePath) (*GetResponse, error)
	// List calls the bolt client's List function and returns all file paths
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Delete formats and hands off a file path to delete from boltdb
	Delete(context.Context, *FilePath) (*DeleteResponse, error)
}

func RegisterNetStateServer(s *grpc.Server, srv NetStateServer) {
	s.RegisterService(&_NetState_serviceDesc, srv)
}

func _NetState_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetStateServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstate.NetState/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetStateServer).Put(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetState_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetStateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstate.NetState/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetStateServer).Get(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetState_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetStateServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstate.NetState/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetStateServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetState_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetStateServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstate.NetState/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetStateServer).Delete(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netstate.NetState",
	HandlerType: (*NetStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _NetState_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NetState_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NetState_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NetState_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netstate.proto",
}

func init() { proto.RegisterFile("netstate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xc9, 0x9b, 0xd2, 0x37, 0x99, 0xd4, 0x1e, 0x06, 0x94, 0xa5, 0x88, 0x94, 0xbd, 0xd8,
	0x83, 0x94, 0xfa, 0xf7, 0xe8, 0x49, 0xec, 0x45, 0x24, 0x44, 0xf0, 0xbe, 0x96, 0x29, 0x5d, 0xd8,
	0xee, 0xc6, 0xee, 0xe4, 0xe3, 0xfa, 0x5d, 0x24, 0x69, 0x62, 0xb6, 0x22, 0x88, 0xb7, 0xcc, 0x6f,
	0xe6, 0xc9, 0xcc, 0xf3, 0x2c, 0x8c, 0x2d, 0xb1, 0x67, 0xc5, 0x34, 0x2f, 0x77, 0x8e, 0x1d, 0x26,
	0x5d, 0x2d, 0xef, 0x21, 0x79, 0xd4, 0x86, 0x72, 0xc5, 0x1b, 0x44, 0x18, 0x94, 0x8a, 0x37, 0x22,
	0x9a, 0x46, 0xb3, 0xb4, 0x68, 0xbe, 0xf1, 0x0c, 0xc0, 0x6f, 0x95, 0x31, 0xaf, 0xca, 0x54, 0x24,
	0xfe, 0x35, 0x9d, 0x80, 0xc8, 0x23, 0xc8, 0x9e, 0xb4, 0xe7, 0x82, 0xde, 0x2b, 0xf2, 0x2c, 0x2f,
	0x21, 0xcb, 0x2b, 0x2e, 0xc8, 0x97, 0xce, 0x7a, 0x42, 0x09, 0xa3, 0x95, 0xb3, 0x6b, 0xbd, 0xdb,
	0x2a, 0xd6, 0xce, 0xb6, 0x7f, 0x3e, 0x60, 0xf2, 0x1c, 0xb2, 0x25, 0xf5, 0x12, 0x01, 0xff, 0x57,
	0xce, 0x32, 0x59, 0x6e, 0xa7, 0xbb, 0x52, 0x5e, 0xc0, 0x68, 0xbf, 0xaa, 0x9d, 0x3c, 0x85, 0x74,
	0xad, 0x0d, 0xd5, 0x67, 0x7a, 0x11, 0x4d, 0xe3, 0x59, 0x5a, 0xf4, 0x40, 0xde, 0xc0, 0xf8, 0x81,
	0x0c, 0x31, 0xfd, 0xe5, 0x98, 0xab, 0x8f, 0x08, 0x92, 0x67, 0xe2, 0x97, 0x3a, 0x1b, 0x5c, 0x40,
	0x9c, 0x57, 0x8c, 0x38, 0xff, 0x4a, 0xaf, 0x8b, 0x6a, 0x72, 0xdc, 0xb3, 0xd0, 0xef, 0x02, 0xe2,
	0x25, 0xfd, 0xaa, 0x08, 0xed, 0xde, 0xc2, 0xa0, 0x36, 0x85, 0x41, 0x3b, 0xc8, 0x73, 0x72, 0xf2,
	0x1d, 0xb7, 0xb2, 0x3b, 0x18, 0xee, 0xdd, 0xfd, 0xb8, 0x4b, 0xf4, 0xec, 0x30, 0x83, 0xb7, 0x61,
	0xf3, 0xfe, 0xd7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xf3, 0x94, 0xbc, 0x11, 0x02, 0x00,
	0x00,
}
