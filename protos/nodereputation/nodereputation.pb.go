// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodereputation.proto

package nodereputation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryStatus int32

const (
	QueryStatus_NODE_FOUND     QueryStatus = 0
	QueryStatus_NODE_NOT_FOUND QueryStatus = 1
)

var QueryStatus_name = map[int32]string{
	0: "NODE_FOUND",
	1: "NODE_NOT_FOUND",
}
var QueryStatus_value = map[string]int32{
	"NODE_FOUND":     0,
	"NODE_NOT_FOUND": 1,
}

func (x QueryStatus) String() string {
	return proto.EnumName(QueryStatus_name, int32(x))
}
func (QueryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{0}
}

type ConstraintStatus int32

const (
	ConstraintStatus_LIMIT_MEET     ConstraintStatus = 0
	ConstraintStatus_LIMIT_NOT_MEET ConstraintStatus = 1
)

var ConstraintStatus_name = map[int32]string{
	0: "LIMIT_MEET",
	1: "LIMIT_NOT_MEET",
}
var ConstraintStatus_value = map[string]int32{
	"LIMIT_MEET":     0,
	"LIMIT_NOT_MEET": 1,
}

func (x ConstraintStatus) String() string {
	return proto.EnumName(ConstraintStatus_name, int32(x))
}
func (ConstraintStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{1}
}

type UpdateStatus int32

const (
	UpdateStatus_UPDATE_SUCCESS UpdateStatus = 0
	UpdateStatus_UPDATE_FAILED  UpdateStatus = 1
)

var UpdateStatus_name = map[int32]string{
	0: "UPDATE_SUCCESS",
	1: "UPDATE_FAILED",
}
var UpdateStatus_value = map[string]int32{
	"UPDATE_SUCCESS": 0,
	"UPDATE_FAILED":  1,
}

func (x UpdateStatus) String() string {
	return proto.EnumName(UpdateStatus_name, int32(x))
}
func (UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{2}
}

type Feature int32

const (
	Feature_UPTIME                Feature = 0
	Feature_AUDIT                 Feature = 1
	Feature_LATENCY               Feature = 2
	Feature_AMOUNT_OF_DATA_STORED Feature = 3
	Feature_FALSE_CLAIMS          Feature = 4
	Feature_SHARDS_MODIFIED       Feature = 5
)

var Feature_name = map[int32]string{
	0: "UPTIME",
	1: "AUDIT",
	2: "LATENCY",
	3: "AMOUNT_OF_DATA_STORED",
	4: "FALSE_CLAIMS",
	5: "SHARDS_MODIFIED",
}
var Feature_value = map[string]int32{
	"UPTIME":                0,
	"AUDIT":                 1,
	"LATENCY":               2,
	"AMOUNT_OF_DATA_STORED": 3,
	"FALSE_CLAIMS":          4,
	"SHARDS_MODIFIED":       5,
}

func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}
func (Feature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{3}
}

type UpdateRepValue int32

const (
	UpdateRepValue_NEGATIVE_ONE               UpdateRepValue = 0
	UpdateRepValue_NEGATIVE_POINT_FIVE        UpdateRepValue = 1
	UpdateRepValue_NEGATIVE_POINT_TWENTY_FIVE UpdateRepValue = 2
	UpdateRepValue_ZERO                       UpdateRepValue = 3
	UpdateRepValue_POINT_TWENTY_FIVE          UpdateRepValue = 4
	UpdateRepValue_POINT_FIVE                 UpdateRepValue = 5
	UpdateRepValue_ONE                        UpdateRepValue = 6
)

var UpdateRepValue_name = map[int32]string{
	0: "NEGATIVE_ONE",
	1: "NEGATIVE_POINT_FIVE",
	2: "NEGATIVE_POINT_TWENTY_FIVE",
	3: "ZERO",
	4: "POINT_TWENTY_FIVE",
	5: "POINT_FIVE",
	6: "ONE",
}
var UpdateRepValue_value = map[string]int32{
	"NEGATIVE_ONE":               0,
	"NEGATIVE_POINT_FIVE":        1,
	"NEGATIVE_POINT_TWENTY_FIVE": 2,
	"ZERO":              3,
	"POINT_TWENTY_FIVE": 4,
	"POINT_FIVE":        5,
	"ONE":               6,
}

func (x UpdateRepValue) String() string {
	return proto.EnumName(UpdateRepValue_name, int32(x))
}
func (UpdateRepValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{4}
}

type RepParameter int32

const (
	RepParameter_GOOD_RECALL        RepParameter = 0
	RepParameter_BAD_RECALL         RepParameter = 1
	RepParameter_WEIGHT_DENOMINATOR RepParameter = 2
)

var RepParameter_name = map[int32]string{
	0: "GOOD_RECALL",
	1: "BAD_RECALL",
	2: "WEIGHT_DENOMINATOR",
}
var RepParameter_value = map[string]int32{
	"GOOD_RECALL":        0,
	"BAD_RECALL":         1,
	"WEIGHT_DENOMINATOR": 2,
}

func (x RepParameter) String() string {
	return proto.EnumName(RepParameter_name, int32(x))
}
func (RepParameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{5}
}

type RepState int32

const (
	RepState_FEATURE_COUNTER           RepState = 0
	RepState_FEATURE_GOOD_COUNTER      RepState = 1
	RepState_CUMULATIVE_SUM_REPUTATION RepState = 2
	RepState_CURRENT_REPUTATION        RepState = 3
)

var RepState_name = map[int32]string{
	0: "FEATURE_COUNTER",
	1: "FEATURE_GOOD_COUNTER",
	2: "CUMULATIVE_SUM_REPUTATION",
	3: "CURRENT_REPUTATION",
}
var RepState_value = map[string]int32{
	"FEATURE_COUNTER":           0,
	"FEATURE_GOOD_COUNTER":      1,
	"CUMULATIVE_SUM_REPUTATION": 2,
	"CURRENT_REPUTATION":        3,
}

func (x RepState) String() string {
	return proto.EnumName(RepState_name, int32(x))
}
func (RepState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{6}
}

// GetRequest is a list of node ids
type GetRequest struct {
	Nodes                []string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// GetResponse is a list of (node id, status, scores)
type GetResponse struct {
	Records              []*NodeReputationQueryStatus `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (dst *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(dst, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetRecords() []*NodeReputationQueryStatus {
	if m != nil {
		return m.Records
	}
	return nil
}

// MatchRequest is a request with a limit of node ids to return, ranked order of features, and node ids not to select
type MatchRequest struct {
	Limit                int64     `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	FeatureOrdering      []Feature `protobuf:"varint,2,rep,packed,name=featureOrdering,enum=nodereputation.Feature" json:"featureOrdering,omitempty"`
	Excluding            []string  `protobuf:"bytes,3,rep,name=excluding" json:"excluding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MatchRequest) Reset()         { *m = MatchRequest{} }
func (m *MatchRequest) String() string { return proto.CompactTextString(m) }
func (*MatchRequest) ProtoMessage()    {}
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{2}
}
func (m *MatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchRequest.Unmarshal(m, b)
}
func (m *MatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchRequest.Marshal(b, m, deterministic)
}
func (dst *MatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRequest.Merge(dst, src)
}
func (m *MatchRequest) XXX_Size() int {
	return xxx_messageInfo_MatchRequest.Size(m)
}
func (m *MatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRequest proto.InternalMessageInfo

func (m *MatchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MatchRequest) GetFeatureOrdering() []Feature {
	if m != nil {
		return m.FeatureOrdering
	}
	return nil
}

func (m *MatchRequest) GetExcluding() []string {
	if m != nil {
		return m.Excluding
	}
	return nil
}

// MatchRepsonse tells if the limit was meet and node ids that have the "best" features
type MatchResponse struct {
	Status               ConstraintStatus `protobuf:"varint,1,opt,name=status,enum=nodereputation.ConstraintStatus" json:"status,omitempty"`
	Nodes                []string         `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MatchResponse) Reset()         { *m = MatchResponse{} }
func (m *MatchResponse) String() string { return proto.CompactTextString(m) }
func (*MatchResponse) ProtoMessage()    {}
func (*MatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{3}
}
func (m *MatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchResponse.Unmarshal(m, b)
}
func (m *MatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchResponse.Marshal(b, m, deterministic)
}
func (dst *MatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResponse.Merge(dst, src)
}
func (m *MatchResponse) XXX_Size() int {
	return xxx_messageInfo_MatchResponse.Size(m)
}
func (m *MatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResponse proto.InternalMessageInfo

func (m *MatchResponse) GetStatus() ConstraintStatus {
	if m != nil {
		return m.Status
	}
	return ConstraintStatus_LIMIT_MEET
}

func (m *MatchResponse) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// UpdateRequest is a list of node and features
type UpdateRequest struct {
	Update               []*NodeReputationUpdate `protobuf:"bytes,1,rep,name=update" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{4}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(dst, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetUpdate() []*NodeReputationUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

// UpdateResponse list of successful/failed updates for node feature pairs
type UpdateResponse struct {
	Update               []*NodeReputationUpdateStatus `protobuf:"bytes,1,rep,name=update" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{5}
}
func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(dst, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetUpdate() []*NodeReputationUpdateStatus {
	if m != nil {
		return m.Update
	}
	return nil
}

// NodeReputationQueryStatus tells if a node id was found (status), if so the scores for all the features
type NodeReputationQueryStatus struct {
	NodeId               string               `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Status               QueryStatus          `protobuf:"varint,2,opt,name=status,enum=nodereputation.QueryStatus" json:"status,omitempty"`
	Scores               []*FeatureReputation `protobuf:"bytes,3,rep,name=scores" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodeReputationQueryStatus) Reset()         { *m = NodeReputationQueryStatus{} }
func (m *NodeReputationQueryStatus) String() string { return proto.CompactTextString(m) }
func (*NodeReputationQueryStatus) ProtoMessage()    {}
func (*NodeReputationQueryStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{6}
}
func (m *NodeReputationQueryStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationQueryStatus.Unmarshal(m, b)
}
func (m *NodeReputationQueryStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationQueryStatus.Marshal(b, m, deterministic)
}
func (dst *NodeReputationQueryStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationQueryStatus.Merge(dst, src)
}
func (m *NodeReputationQueryStatus) XXX_Size() int {
	return xxx_messageInfo_NodeReputationQueryStatus.Size(m)
}
func (m *NodeReputationQueryStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationQueryStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationQueryStatus proto.InternalMessageInfo

func (m *NodeReputationQueryStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeReputationQueryStatus) GetStatus() QueryStatus {
	if m != nil {
		return m.Status
	}
	return QueryStatus_NODE_FOUND
}

func (m *NodeReputationQueryStatus) GetScores() []*FeatureReputation {
	if m != nil {
		return m.Scores
	}
	return nil
}

// NodeReputationUpdate request a feature update with a value for a given node
type NodeReputationUpdate struct {
	NodeId               string         `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Feature              Feature        `protobuf:"varint,2,opt,name=feature,enum=nodereputation.Feature" json:"feature,omitempty"`
	Value                UpdateRepValue `protobuf:"varint,3,opt,name=value,enum=nodereputation.UpdateRepValue" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeReputationUpdate) Reset()         { *m = NodeReputationUpdate{} }
func (m *NodeReputationUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeReputationUpdate) ProtoMessage()    {}
func (*NodeReputationUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{7}
}
func (m *NodeReputationUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationUpdate.Unmarshal(m, b)
}
func (m *NodeReputationUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationUpdate.Marshal(b, m, deterministic)
}
func (dst *NodeReputationUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationUpdate.Merge(dst, src)
}
func (m *NodeReputationUpdate) XXX_Size() int {
	return xxx_messageInfo_NodeReputationUpdate.Size(m)
}
func (m *NodeReputationUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationUpdate proto.InternalMessageInfo

func (m *NodeReputationUpdate) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeReputationUpdate) GetFeature() Feature {
	if m != nil {
		return m.Feature
	}
	return Feature_UPTIME
}

func (m *NodeReputationUpdate) GetValue() UpdateRepValue {
	if m != nil {
		return m.Value
	}
	return UpdateRepValue_NEGATIVE_ONE
}

// NodeReputationUpdataStatus tells if a value was set for a node's feature
type NodeReputationUpdateStatus struct {
	NodeId               string       `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Feature              Feature      `protobuf:"varint,2,opt,name=feature,enum=nodereputation.Feature" json:"feature,omitempty"`
	Status               UpdateStatus `protobuf:"varint,3,opt,name=status,enum=nodereputation.UpdateStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NodeReputationUpdateStatus) Reset()         { *m = NodeReputationUpdateStatus{} }
func (m *NodeReputationUpdateStatus) String() string { return proto.CompactTextString(m) }
func (*NodeReputationUpdateStatus) ProtoMessage()    {}
func (*NodeReputationUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{8}
}
func (m *NodeReputationUpdateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationUpdateStatus.Unmarshal(m, b)
}
func (m *NodeReputationUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationUpdateStatus.Marshal(b, m, deterministic)
}
func (dst *NodeReputationUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationUpdateStatus.Merge(dst, src)
}
func (m *NodeReputationUpdateStatus) XXX_Size() int {
	return xxx_messageInfo_NodeReputationUpdateStatus.Size(m)
}
func (m *NodeReputationUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationUpdateStatus proto.InternalMessageInfo

func (m *NodeReputationUpdateStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeReputationUpdateStatus) GetFeature() Feature {
	if m != nil {
		return m.Feature
	}
	return Feature_UPTIME
}

func (m *NodeReputationUpdateStatus) GetStatus() UpdateStatus {
	if m != nil {
		return m.Status
	}
	return UpdateStatus_UPDATE_SUCCESS
}

// FeatureReputation shows the many (features) to one (node) ratio scores
type FeatureReputation struct {
	MeanReputation       float32  `protobuf:"fixed32,1,opt,name=mean_reputation,json=meanReputation" json:"mean_reputation,omitempty"`
	CurrentReputation    float32  `protobuf:"fixed32,2,opt,name=current_reputation,json=currentReputation" json:"current_reputation,omitempty"`
	Feature              Feature  `protobuf:"varint,3,opt,name=feature,enum=nodereputation.Feature" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureReputation) Reset()         { *m = FeatureReputation{} }
func (m *FeatureReputation) String() string { return proto.CompactTextString(m) }
func (*FeatureReputation) ProtoMessage()    {}
func (*FeatureReputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_32457f84dd23ba2b, []int{9}
}
func (m *FeatureReputation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureReputation.Unmarshal(m, b)
}
func (m *FeatureReputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureReputation.Marshal(b, m, deterministic)
}
func (dst *FeatureReputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureReputation.Merge(dst, src)
}
func (m *FeatureReputation) XXX_Size() int {
	return xxx_messageInfo_FeatureReputation.Size(m)
}
func (m *FeatureReputation) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureReputation.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureReputation proto.InternalMessageInfo

func (m *FeatureReputation) GetMeanReputation() float32 {
	if m != nil {
		return m.MeanReputation
	}
	return 0
}

func (m *FeatureReputation) GetCurrentReputation() float32 {
	if m != nil {
		return m.CurrentReputation
	}
	return 0
}

func (m *FeatureReputation) GetFeature() Feature {
	if m != nil {
		return m.Feature
	}
	return Feature_UPTIME
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "nodereputation.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "nodereputation.GetResponse")
	proto.RegisterType((*MatchRequest)(nil), "nodereputation.MatchRequest")
	proto.RegisterType((*MatchResponse)(nil), "nodereputation.MatchResponse")
	proto.RegisterType((*UpdateRequest)(nil), "nodereputation.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "nodereputation.UpdateResponse")
	proto.RegisterType((*NodeReputationQueryStatus)(nil), "nodereputation.NodeReputationQueryStatus")
	proto.RegisterType((*NodeReputationUpdate)(nil), "nodereputation.NodeReputationUpdate")
	proto.RegisterType((*NodeReputationUpdateStatus)(nil), "nodereputation.NodeReputationUpdateStatus")
	proto.RegisterType((*FeatureReputation)(nil), "nodereputation.FeatureReputation")
	proto.RegisterEnum("nodereputation.QueryStatus", QueryStatus_name, QueryStatus_value)
	proto.RegisterEnum("nodereputation.ConstraintStatus", ConstraintStatus_name, ConstraintStatus_value)
	proto.RegisterEnum("nodereputation.UpdateStatus", UpdateStatus_name, UpdateStatus_value)
	proto.RegisterEnum("nodereputation.Feature", Feature_name, Feature_value)
	proto.RegisterEnum("nodereputation.UpdateRepValue", UpdateRepValue_name, UpdateRepValue_value)
	proto.RegisterEnum("nodereputation.RepParameter", RepParameter_name, RepParameter_value)
	proto.RegisterEnum("nodereputation.RepState", RepState_name, RepState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeReputationClient is the client API for NodeReputation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeReputationClient interface {
	// Get the Reputation score for a given node id(s)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Match nodes to the given constraints
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	// Update the given node(s) with the provied values
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type nodeReputationClient struct {
	cc *grpc.ClientConn
}

func NewNodeReputationClient(cc *grpc.ClientConn) NodeReputationClient {
	return &nodeReputationClient{cc}
}

func (c *nodeReputationClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeReputation service

type NodeReputationServer interface {
	// Get the Reputation score for a given node id(s)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Match nodes to the given constraints
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
	// Update the given node(s) with the provied values
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
}

func RegisterNodeReputationServer(s *grpc.Server, srv NodeReputationServer) {
	s.RegisterService(&_NodeReputation_serviceDesc, srv)
}

func _NodeReputation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeReputation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodereputation.NodeReputation",
	HandlerType: (*NodeReputationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NodeReputation_Get_Handler,
		},
		{
			MethodName: "Match",
			Handler:    _NodeReputation_Match_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeReputation_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodereputation.proto",
}

func init() {
	proto.RegisterFile("nodereputation.proto", fileDescriptor_nodereputation_32457f84dd23ba2b)
}

var fileDescriptor_nodereputation_32457f84dd23ba2b = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xed, 0x26, 0xd9, 0x9e, 0xb4, 0xae, 0x3b, 0xdb, 0xa5, 0x69, 0x76, 0xbb, 0x2a, 0x11,
	0x12, 0x25, 0x12, 0x2b, 0x6d, 0x16, 0x10, 0x48, 0x08, 0xc9, 0x6b, 0x4f, 0xb2, 0x96, 0x62, 0x3b,
	0x8c, 0xc7, 0x5d, 0x2d, 0x37, 0x23, 0x93, 0x0c, 0x10, 0xa9, 0x8d, 0x83, 0x7f, 0x10, 0x3c, 0x00,
	0x8f, 0x80, 0xc4, 0x15, 0x57, 0xbc, 0x17, 0xaf, 0x82, 0xc6, 0x1e, 0x27, 0xae, 0xdb, 0xa0, 0xbd,
	0xe0, 0x72, 0xce, 0xf9, 0xbe, 0x73, 0xbe, 0xf3, 0xcd, 0x1f, 0x9c, 0xae, 0xe2, 0x05, 0x4f, 0xf8,
	0x3a, 0xcf, 0xa2, 0x6c, 0x19, 0xaf, 0x5e, 0xac, 0x93, 0x38, 0x8b, 0x91, 0x7e, 0x37, 0x3a, 0x18,
	0x00, 0x4c, 0x78, 0x46, 0xf8, 0xcf, 0x39, 0x4f, 0x33, 0x74, 0x0a, 0x2d, 0x91, 0x4f, 0x7b, 0xca,
	0xa5, 0x76, 0x75, 0x40, 0xca, 0xc5, 0x80, 0x40, 0xb7, 0xc0, 0xa4, 0xeb, 0x78, 0x95, 0x72, 0x64,
	0x41, 0x27, 0xe1, 0xf3, 0x38, 0x59, 0x94, 0xb0, 0xee, 0xe8, 0x93, 0x17, 0x8d, 0x56, 0x5e, 0xbc,
	0xe0, 0x64, 0xb3, 0xfc, 0x36, 0xe7, 0xc9, 0x6f, 0x41, 0x16, 0x65, 0x79, 0x4a, 0x2a, 0xe6, 0xe0,
	0x77, 0x05, 0x0e, 0xdd, 0x28, 0x9b, 0xff, 0x54, 0x6b, 0x7d, 0xb3, 0xbc, 0x5d, 0x66, 0x3d, 0xe5,
	0x52, 0xb9, 0xd2, 0x48, 0xb9, 0x40, 0x26, 0x1c, 0xff, 0xc0, 0xa3, 0x2c, 0x4f, 0xb8, 0x9f, 0x2c,
	0x78, 0xb2, 0x5c, 0xfd, 0xd8, 0x53, 0x2f, 0xb5, 0x2b, 0x7d, 0x74, 0xd6, 0xec, 0x39, 0x2e, 0x61,
	0xa4, 0x89, 0x47, 0xcf, 0xe0, 0x80, 0xff, 0x3a, 0xbf, 0xc9, 0x17, 0x82, 0xac, 0x15, 0x73, 0x6d,
	0x03, 0x03, 0x06, 0x47, 0x52, 0x86, 0x9c, 0xee, 0x4b, 0x68, 0xa7, 0x85, 0xd6, 0x42, 0x88, 0x3e,
	0xba, 0x6c, 0x36, 0xb2, 0xe2, 0x55, 0x9a, 0x25, 0xd1, 0x72, 0x95, 0xc9, 0x99, 0x24, 0x7e, 0x6b,
	0x9e, 0x5a, 0x37, 0xcf, 0x85, 0xa3, 0x70, 0xbd, 0x88, 0x32, 0x5e, 0x0d, 0xfa, 0x35, 0xb4, 0xf3,
	0x22, 0x20, 0xdd, 0xfb, 0xe8, 0xbf, 0xdd, 0x93, 0x64, 0xc9, 0x19, 0x50, 0xd0, 0xab, 0x72, 0x52,
	0xf0, 0xeb, 0x46, 0xbd, 0xe1, 0xfb, 0xd4, 0xab, 0xa4, 0xcb, 0xaa, 0x7f, 0x2b, 0x70, 0xbe, 0x73,
	0xd3, 0xd0, 0x19, 0x74, 0x44, 0x49, 0xb6, 0x5c, 0x14, 0x9e, 0x1c, 0x90, 0xb6, 0x58, 0x3a, 0x0b,
	0xf4, 0x6a, 0xe3, 0x95, 0x5a, 0x78, 0xf5, 0xb4, 0xd9, 0xba, 0xbe, 0xf5, 0x95, 0x4d, 0x5f, 0x41,
	0x3b, 0x9d, 0xc7, 0x09, 0x4f, 0x8b, 0xcd, 0xe8, 0x8e, 0x3e, 0xdc, 0xb5, 0x93, 0x9b, 0x08, 0x91,
	0x84, 0xc1, 0x9f, 0x0a, 0x9c, 0x3e, 0x34, 0xcd, 0x6e, 0x85, 0x2f, 0xa1, 0x23, 0xcf, 0x83, 0x94,
	0xb8, 0xf3, 0xdc, 0x54, 0x38, 0xf4, 0x19, 0xb4, 0x7e, 0x89, 0x6e, 0x72, 0xde, 0xd3, 0x0a, 0xc2,
	0xf3, 0x26, 0xa1, 0xb2, 0x7f, 0x7d, 0x2d, 0x50, 0xa4, 0x04, 0x0f, 0xfe, 0x52, 0xa0, 0xbf, 0xdb,
	0xe8, 0xff, 0x59, 0x60, 0xe5, 0x7a, 0xa9, 0xf0, 0xd9, 0xc3, 0x0a, 0xef, 0xda, 0x2e, 0x04, 0x9e,
	0xdc, 0x73, 0x16, 0x7d, 0x0c, 0xc7, 0xb7, 0x3c, 0x5a, 0xb1, 0x2d, 0xbb, 0xd0, 0xa7, 0x12, 0x5d,
	0x84, 0x6b, 0xc0, 0x4f, 0x01, 0xcd, 0xf3, 0x24, 0xe1, 0xab, 0xac, 0x8e, 0x55, 0x0b, 0xec, 0x89,
	0xcc, 0xd4, 0xe0, 0xb5, 0xb1, 0xb4, 0xf7, 0x1b, 0x6b, 0xf8, 0x12, 0xba, 0xf5, 0x43, 0xa7, 0x03,
	0x78, 0xbe, 0x8d, 0xd9, 0xd8, 0x0f, 0x3d, 0xdb, 0xd8, 0x43, 0x08, 0xf4, 0x62, 0xed, 0xf9, 0x54,
	0xc6, 0x94, 0xe1, 0x17, 0x60, 0x34, 0x6f, 0xa3, 0xe0, 0x4d, 0x1d, 0xd7, 0xa1, 0xcc, 0xc5, 0x98,
	0x96, 0xbc, 0x72, 0x2d, 0x88, 0x45, 0x4c, 0x19, 0x7e, 0x0e, 0x87, 0x77, 0x76, 0x07, 0x81, 0x1e,
	0xce, 0x6c, 0x93, 0x62, 0x16, 0x84, 0x96, 0x85, 0x83, 0xc0, 0xd8, 0x43, 0x27, 0x70, 0x24, 0x63,
	0x63, 0xd3, 0x99, 0x62, 0xd1, 0x2e, 0x86, 0x8e, 0x54, 0x8d, 0x00, 0xda, 0xe1, 0x8c, 0x3a, 0x2e,
	0x36, 0xf6, 0xd0, 0x01, 0xb4, 0xcc, 0xd0, 0x76, 0xa8, 0xa1, 0xa0, 0x2e, 0x74, 0xa6, 0x26, 0xc5,
	0x9e, 0xf5, 0xce, 0x50, 0xd1, 0x39, 0x3c, 0x31, 0x5d, 0x3f, 0xf4, 0x28, 0xf3, 0xc7, 0xcc, 0x36,
	0xa9, 0xc9, 0x02, 0xea, 0x13, 0x6c, 0x1b, 0x1a, 0x32, 0xe0, 0x70, 0x6c, 0x4e, 0x03, 0xcc, 0xac,
	0xa9, 0xe9, 0xb8, 0x81, 0xb1, 0x8f, 0x1e, 0xc3, 0x71, 0xf0, 0xc6, 0x24, 0x76, 0xc0, 0x5c, 0xdf,
	0x76, 0xc6, 0x0e, 0xb6, 0x8d, 0xd6, 0xf0, 0x0f, 0x65, 0x7b, 0xdb, 0xcb, 0xe3, 0x26, 0x98, 0x1e,
	0x9e, 0x98, 0xd4, 0xb9, 0xc6, 0xcc, 0xf7, 0x44, 0xfb, 0x33, 0x78, 0xbc, 0x89, 0xcc, 0x7c, 0xc7,
	0xa3, 0x6c, 0xec, 0x5c, 0x63, 0x43, 0x41, 0xcf, 0xa1, 0xdf, 0x48, 0xd0, 0xb7, 0xd8, 0xa3, 0xef,
	0xca, 0xbc, 0x8a, 0x1e, 0xc1, 0xfe, 0x77, 0x98, 0xf8, 0x86, 0x86, 0x9e, 0xc0, 0xc9, 0x7d, 0xc0,
	0xbe, 0xb0, 0xb2, 0x56, 0xb0, 0x85, 0x3a, 0xa0, 0x89, 0x96, 0xed, 0xe1, 0x04, 0x0e, 0x09, 0x5f,
	0xcf, 0xa2, 0x24, 0xba, 0xe5, 0x19, 0x4f, 0xd0, 0x31, 0x74, 0x27, 0xbe, 0x6f, 0x33, 0x82, 0x2d,
	0x73, 0x3a, 0x35, 0xf6, 0x04, 0xf3, 0xb5, 0xb9, 0x59, 0x2b, 0xe8, 0x03, 0x40, 0x6f, 0xb1, 0x33,
	0x79, 0x43, 0x99, 0x8d, 0x3d, 0xdf, 0x75, 0x3c, 0x93, 0xfa, 0xc4, 0x50, 0x87, 0x6b, 0x78, 0x44,
	0xf8, 0x5a, 0xec, 0x02, 0x17, 0x0e, 0x8c, 0xb1, 0x49, 0x43, 0x82, 0x99, 0x25, 0x5c, 0xc3, 0xc4,
	0xd8, 0x43, 0x3d, 0x38, 0xad, 0x82, 0x45, 0x87, 0x2a, 0xa3, 0xa0, 0x0b, 0x38, 0xb7, 0x42, 0x37,
	0x9c, 0x96, 0xf3, 0x05, 0xa1, 0xcb, 0x08, 0x9e, 0x85, 0xd4, 0xa4, 0x8e, 0xef, 0x19, 0xaa, 0xe8,
	0x68, 0x85, 0x84, 0x60, 0x8f, 0xd6, 0xe3, 0xda, 0xe8, 0x1f, 0x05, 0xf4, 0xbb, 0xf7, 0x14, 0x7d,
	0x03, 0xda, 0x84, 0x67, 0xa8, 0xdf, 0x3c, 0xa1, 0xdb, 0x7f, 0xb1, 0xff, 0xf4, 0xc1, 0x9c, 0x7c,
	0x80, 0x6d, 0x68, 0x15, 0x5f, 0x08, 0xba, 0x77, 0x11, 0xeb, 0x1f, 0x5c, 0xff, 0x62, 0x47, 0x56,
	0x56, 0x99, 0x40, 0x5b, 0x3e, 0x66, 0x17, 0xbb, 0x5e, 0x9c, 0xb2, 0xce, 0xce, 0x07, 0xa9, 0x2c,
	0xf4, 0x7d, 0xbb, 0xf8, 0xe8, 0x5f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xe6, 0x19, 0x73,
	0x00, 0x08, 0x00, 0x00,
}
