// Code generated by go-bindata. DO NOT EDIT.

package consoleserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _web_operator_dist_build_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x82\x30\x14\x06\xe0\x9d\x53\xfc\x1b\x90\x10\xaa\x6e\xc6\xb1\x61\x20\x21\x2e\x3d\x41\xc5\x07\xd4\xd4\xfe\xcd\xf3\x2d\xdc\xde\xcf\x39\x78\xd6\x53\xd3\x7e\x18\x3a\xdf\xe3\x76\xb9\xde\x11\x8c\xfa\xc1\x12\x5f\xbf\x01\x73\x59\xc7\xc6\x39\x04\x11\x2c\xb3\x9f\x9e\x61\xc2\x46\xc5\xca\x7a\xa6\xb2\x23\x95\x8d\xfa\x8d\x96\x58\xc6\xa6\x89\x59\xd4\xba\xf6\x90\x9c\x39\xa0\xf0\x2d\x60\x15\x8d\x46\x6d\xfb\xc7\x3f\x00\x00\xff\xff\xd7\xce\x33\x83\x6e\x00\x00\x00")

func web_operator_dist_build_js() ([]byte, error) {
	return bindata_read(
		_web_operator_dist_build_js,
		"web/operator/dist/build.js",
	)
}

var _web_operator_dist_public_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcf\xbd\x4e\xc4\x30\x0c\xc0\xf1\x3d\x4f\xe1\xcb\x0c\x58\xb7\x31\xb8\x59\xf8\x10\xdb\x31\x94\x81\xd1\x4d\xac\x26\x28\x6d\xaa\xd8\x0c\xbc\x3d\x2a\x61\xb2\xe4\xff\x4f\xb2\x4c\x97\xe7\xdb\xd3\xfc\xf9\xfe\x02\xd9\xb6\x1a\x1c\x9d\x03\x2a\xef\xeb\xe4\x65\xf7\xe7\x42\x38\x05\x07\x00\x40\x9b\x18\x43\xcc\xdc\x55\x6c\xf2\x1f\xf3\xeb\xfd\xa3\xff\x4f\x56\xac\x4a\xb8\x1d\xd2\xd9\x5a\x87\xc4\x9a\x97\xc6\x3d\x11\x8e\x32\x94\xc6\x5e\x0e\x03\xed\x71\xf2\xa8\xc6\x56\x22\xa6\xa2\x86\xcb\x77\xa9\xe9\xe1\x4b\x7d\x20\x1c\x28\x38\xc2\x71\x9a\x96\x96\x7e\x82\x03\xca\xd7\xf0\x26\xb5\xb6\x3b\x50\x6b\x9d\x57\xd9\x5b\x92\x0b\x61\xbe\x9e\x78\x28\xc2\xbf\x3f\x7e\x03\x00\x00\xff\xff\xe1\x01\xd7\xab\xd7\x00\x00\x00")

func web_operator_dist_public_index_html() ([]byte, error) {
	return bindata_read(
		_web_operator_dist_public_index_html,
		"web/operator/dist/public/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"web/operator/dist/build.js": web_operator_dist_build_js,
	"web/operator/dist/public/index.html": web_operator_dist_public_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"web": &_bintree_t{nil, map[string]*_bintree_t{
		"operator": &_bintree_t{nil, map[string]*_bintree_t{
			"dist": &_bintree_t{nil, map[string]*_bintree_t{
				"build.js": &_bintree_t{web_operator_dist_build_js, map[string]*_bintree_t{
				}},
				"public": &_bintree_t{nil, map[string]*_bintree_t{
					"index.html": &_bintree_t{web_operator_dist_public_index_html, map[string]*_bintree_t{
					}},
				}},
			}},
		}},
	}},
}}
