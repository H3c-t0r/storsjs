// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: (devel)
// source: planneddowntime.proto

package internalpb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"

	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_planneddowntime_proto struct{}

func (drpcEncoding_File_planneddowntime_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_planneddowntime_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_planneddowntime_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_planneddowntime_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCNodePlannedDowntimeClient interface {
	DRPCConn() drpc.Conn

	Add(ctx context.Context, in *AddRequest) (*AddResponse, error)
	GetScheduled(ctx context.Context, in *GetScheduledRequest) (*GetScheduledResponse, error)
	GetCompleted(ctx context.Context, in *GetCompletedRequest) (*GetCompletedResponse, error)
	Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error)
}

type drpcNodePlannedDowntimeClient struct {
	cc drpc.Conn
}

func NewDRPCNodePlannedDowntimeClient(cc drpc.Conn) DRPCNodePlannedDowntimeClient {
	return &drpcNodePlannedDowntimeClient{cc}
}

func (c *drpcNodePlannedDowntimeClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNodePlannedDowntimeClient) Add(ctx context.Context, in *AddRequest) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/storagenode.planneddowntime.NodePlannedDowntime/Add", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNodePlannedDowntimeClient) GetScheduled(ctx context.Context, in *GetScheduledRequest) (*GetScheduledResponse, error) {
	out := new(GetScheduledResponse)
	err := c.cc.Invoke(ctx, "/storagenode.planneddowntime.NodePlannedDowntime/GetScheduled", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNodePlannedDowntimeClient) GetCompleted(ctx context.Context, in *GetCompletedRequest) (*GetCompletedResponse, error) {
	out := new(GetCompletedResponse)
	err := c.cc.Invoke(ctx, "/storagenode.planneddowntime.NodePlannedDowntime/GetCompleted", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNodePlannedDowntimeClient) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/storagenode.planneddowntime.NodePlannedDowntime/Delete", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNodePlannedDowntimeServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	GetScheduled(context.Context, *GetScheduledRequest) (*GetScheduledResponse, error)
	GetCompleted(context.Context, *GetCompletedRequest) (*GetCompletedResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

type DRPCNodePlannedDowntimeUnimplementedServer struct{}

func (s *DRPCNodePlannedDowntimeUnimplementedServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCNodePlannedDowntimeUnimplementedServer) GetScheduled(context.Context, *GetScheduledRequest) (*GetScheduledResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCNodePlannedDowntimeUnimplementedServer) GetCompleted(context.Context, *GetCompletedRequest) (*GetCompletedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCNodePlannedDowntimeUnimplementedServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCNodePlannedDowntimeDescription struct{}

func (DRPCNodePlannedDowntimeDescription) NumMethods() int { return 4 }

func (DRPCNodePlannedDowntimeDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/storagenode.planneddowntime.NodePlannedDowntime/Add", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodePlannedDowntimeServer).
					Add(
						ctx,
						in1.(*AddRequest),
					)
			}, DRPCNodePlannedDowntimeServer.Add, true
	case 1:
		return "/storagenode.planneddowntime.NodePlannedDowntime/GetScheduled", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodePlannedDowntimeServer).
					GetScheduled(
						ctx,
						in1.(*GetScheduledRequest),
					)
			}, DRPCNodePlannedDowntimeServer.GetScheduled, true
	case 2:
		return "/storagenode.planneddowntime.NodePlannedDowntime/GetCompleted", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodePlannedDowntimeServer).
					GetCompleted(
						ctx,
						in1.(*GetCompletedRequest),
					)
			}, DRPCNodePlannedDowntimeServer.GetCompleted, true
	case 3:
		return "/storagenode.planneddowntime.NodePlannedDowntime/Delete", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodePlannedDowntimeServer).
					Delete(
						ctx,
						in1.(*DeleteRequest),
					)
			}, DRPCNodePlannedDowntimeServer.Delete, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterNodePlannedDowntime(mux drpc.Mux, impl DRPCNodePlannedDowntimeServer) error {
	return mux.Register(impl, DRPCNodePlannedDowntimeDescription{})
}

type DRPCNodePlannedDowntime_AddStream interface {
	drpc.Stream
	SendAndClose(*AddResponse) error
}

type drpcNodePlannedDowntime_AddStream struct {
	drpc.Stream
}

func (x *drpcNodePlannedDowntime_AddStream) SendAndClose(m *AddResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNodePlannedDowntime_GetScheduledStream interface {
	drpc.Stream
	SendAndClose(*GetScheduledResponse) error
}

type drpcNodePlannedDowntime_GetScheduledStream struct {
	drpc.Stream
}

func (x *drpcNodePlannedDowntime_GetScheduledStream) SendAndClose(m *GetScheduledResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNodePlannedDowntime_GetCompletedStream interface {
	drpc.Stream
	SendAndClose(*GetCompletedResponse) error
}

type drpcNodePlannedDowntime_GetCompletedStream struct {
	drpc.Stream
}

func (x *drpcNodePlannedDowntime_GetCompletedStream) SendAndClose(m *GetCompletedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNodePlannedDowntime_DeleteStream interface {
	drpc.Stream
	SendAndClose(*DeleteResponse) error
}

type drpcNodePlannedDowntime_DeleteStream struct {
	drpc.Stream
}

func (x *drpcNodePlannedDowntime_DeleteStream) SendAndClose(m *DeleteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
