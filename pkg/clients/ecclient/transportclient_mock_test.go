// Code generated by MockGen. DO NOT EDIT.
// Source: storj.io/storj/pkg/clients/ecclient (interfaces: TransportClient)

// Package ecclient is a generated GoMock package.
package ecclient

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	overlay "storj.io/storj/protos/overlay"
)

// MockTransportClient is a mock of TransportClient interface
type MockTransportClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransportClientMockRecorder
}

// MockTransportClientMockRecorder is the mock recorder for MockTransportClient
type MockTransportClientMockRecorder struct {
	mock *MockTransportClient
}

// NewMockTransportClient creates a new mock instance
func NewMockTransportClient(ctrl *gomock.Controller) *MockTransportClient {
	mock := &MockTransportClient{ctrl: ctrl}
	mock.recorder = &MockTransportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportClient) EXPECT() *MockTransportClientMockRecorder {
	return m.recorder
}

// DialNode mocks base method
func (m *MockTransportClient) DialNode(arg0 context.Context, arg1 overlay.Node) (*grpc.ClientConn, error) {
	ret := m.ctrl.Call(m, "DialNode", arg0, arg1)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialNode indicates an expected call of DialNode
func (mr *MockTransportClientMockRecorder) DialNode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialNode", reflect.TypeOf((*MockTransportClient)(nil).DialNode), arg0, arg1)
}
