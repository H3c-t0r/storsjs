// Code generated by MockGen. DO NOT EDIT.
// Source: storj.io/storj/examples/piecestore/rpc/protobuf (interfaces: RouteGuideClient,RouteGuide_RetrieveClient)

package ranger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"

	protobuf "storj.io/storj/examples/piecestore/rpc/protobuf"
)

// MockRouteGuideClient is a mock of RouteGuideClient interface
type MockRouteGuideClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuideClientMockRecorder
}

// MockRouteGuideClientMockRecorder is the mock recorder for MockRouteGuideClient
type MockRouteGuideClientMockRecorder struct {
	mock *MockRouteGuideClient
}

// NewMockRouteGuideClient creates a new mock instance
func NewMockRouteGuideClient(ctrl *gomock.Controller) *MockRouteGuideClient {
	mock := &MockRouteGuideClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuideClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuideClient) EXPECT() *MockRouteGuideClientMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockRouteGuideClient) Delete(arg0 context.Context, arg1 *protobuf.ShardDelete, arg2 ...grpc.CallOption) (*protobuf.ShardDeleteSummary, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*protobuf.ShardDeleteSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRouteGuideClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteGuideClient)(nil).Delete), varargs...)
}

// Retrieve mocks base method
func (m *MockRouteGuideClient) Retrieve(arg0 context.Context, arg1 *protobuf.ShardRetrieval, arg2 ...grpc.CallOption) (protobuf.RouteGuide_RetrieveClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(protobuf.RouteGuide_RetrieveClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockRouteGuideClientMockRecorder) Retrieve(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRouteGuideClient)(nil).Retrieve), varargs...)
}

// Shard mocks base method
func (m *MockRouteGuideClient) Shard(arg0 context.Context, arg1 *protobuf.ShardHash, arg2 ...grpc.CallOption) (*protobuf.ShardSummary, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shard", varargs...)
	ret0, _ := ret[0].(*protobuf.ShardSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shard indicates an expected call of Shard
func (mr *MockRouteGuideClientMockRecorder) Shard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shard", reflect.TypeOf((*MockRouteGuideClient)(nil).Shard), varargs...)
}

// Store mocks base method
func (m *MockRouteGuideClient) Store(arg0 context.Context, arg1 ...grpc.CallOption) (protobuf.RouteGuide_StoreClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(protobuf.RouteGuide_StoreClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockRouteGuideClientMockRecorder) Store(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRouteGuideClient)(nil).Store), varargs...)
}

// MockRouteGuide_RetrieveClient is a mock of RouteGuide_RetrieveClient interface
type MockRouteGuide_RetrieveClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_RetrieveClientMockRecorder
}

// MockRouteGuide_RetrieveClientMockRecorder is the mock recorder for MockRouteGuide_RetrieveClient
type MockRouteGuide_RetrieveClientMockRecorder struct {
	mock *MockRouteGuide_RetrieveClient
}

// NewMockRouteGuide_RetrieveClient creates a new mock instance
func NewMockRouteGuide_RetrieveClient(ctrl *gomock.Controller) *MockRouteGuide_RetrieveClient {
	mock := &MockRouteGuide_RetrieveClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_RetrieveClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_RetrieveClient) EXPECT() *MockRouteGuide_RetrieveClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockRouteGuide_RetrieveClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockRouteGuide_RetrieveClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockRouteGuide_RetrieveClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_RetrieveClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).Context))
}

// Header mocks base method
func (m *MockRouteGuide_RetrieveClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockRouteGuide_RetrieveClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).Header))
}

// Recv mocks base method
func (m *MockRouteGuide_RetrieveClient) Recv() (*protobuf.ShardRetrievalStream, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protobuf.ShardRetrievalStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRouteGuide_RetrieveClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_RetrieveClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_RetrieveClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_RetrieveClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_RetrieveClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockRouteGuide_RetrieveClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockRouteGuide_RetrieveClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouteGuide_RetrieveClient)(nil).Trailer))
}
