// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notifications.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
	drpc "storj.io/drpc"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Notification_Scope int32

const (
	Notification_CUSTOM           Notification_Scope = 0
	Notification_AUDIT            Notification_Scope = 1
	Notification_UPTIME           Notification_Scope = 2
	Notification_REPAIR           Notification_Scope = 3
	Notification_DISQUALIFICATION Notification_Scope = 4
	Notification_GRACEFUL_EXIT    Notification_Scope = 5
	Notification_VETTING          Notification_Scope = 6
)

var Notification_Scope_name = map[int32]string{
	0: "CUSTOM",
	1: "AUDIT",
	2: "UPTIME",
	3: "REPAIR",
	4: "DISQUALIFICATION",
	5: "GRACEFUL_EXIT",
	6: "VETTING",
}

var Notification_Scope_value = map[string]int32{
	"CUSTOM":           0,
	"AUDIT":            1,
	"UPTIME":           2,
	"REPAIR":           3,
	"DISQUALIFICATION": 4,
	"GRACEFUL_EXIT":    5,
	"VETTING":          6,
}

func (x Notification_Scope) String() string {
	return proto.EnumName(Notification_Scope_name, int32(x))
}

func (Notification_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{0, 0}
}

type Notification_Level int32

const (
	Notification_INFO  Notification_Level = 0
	Notification_WARN  Notification_Level = 1
	Notification_ERROR Notification_Level = 2
)

var Notification_Level_name = map[int32]string{
	0: "INFO",
	1: "WARN",
	2: "ERROR",
}

var Notification_Level_value = map[string]int32{
	"INFO":  0,
	"WARN":  1,
	"ERROR": 2,
}

func (x Notification_Level) String() string {
	return proto.EnumName(Notification_Level_name, int32(x))
}

func (Notification_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{0, 1}
}

type Notification struct {
	Scope                Notification_Scope `protobuf:"varint,1,opt,name=scope,proto3,enum=notifications.Notification_Scope" json:"scope,omitempty"`
	Level                Notification_Level `protobuf:"varint,2,opt,name=level,proto3,enum=notifications.Notification_Level" json:"level,omitempty"`
	Tags                 []string           `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Message              string             `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp            time.Time          `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{0}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetScope() Notification_Scope {
	if m != nil {
		return m.Scope
	}
	return Notification_CUSTOM
}

func (m *Notification) GetLevel() Notification_Level {
	if m != nil {
		return m.Level
	}
	return Notification_INFO
}

func (m *Notification) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type ReportRequest struct {
	AuditTotalCount       int64      `protobuf:"varint,1,opt,name=audit_total_count,json=auditTotalCount,proto3" json:"audit_total_count,omitempty"`
	AuditSuccessCount     int64      `protobuf:"varint,2,opt,name=audit_success_count,json=auditSuccessCount,proto3" json:"audit_success_count,omitempty"`
	AuditReputationAlpha  float64    `protobuf:"fixed64,3,opt,name=audit_reputation_alpha,json=auditReputationAlpha,proto3" json:"audit_reputation_alpha,omitempty"`
	AuditReputationBeta   float64    `protobuf:"fixed64,4,opt,name=audit_reputation_beta,json=auditReputationBeta,proto3" json:"audit_reputation_beta,omitempty"`
	AuditReputationScore  float64    `protobuf:"fixed64,5,opt,name=audit_reputation_score,json=auditReputationScore,proto3" json:"audit_reputation_score,omitempty"`
	UptimeTotalCount      int64      `protobuf:"varint,6,opt,name=uptime_total_count,json=uptimeTotalCount,proto3" json:"uptime_total_count,omitempty"`
	UptimeSuccessCount    int64      `protobuf:"varint,7,opt,name=uptime_success_count,json=uptimeSuccessCount,proto3" json:"uptime_success_count,omitempty"`
	UptimeReputationAlpha float64    `protobuf:"fixed64,8,opt,name=uptime_reputation_alpha,json=uptimeReputationAlpha,proto3" json:"uptime_reputation_alpha,omitempty"`
	UptimeReputationBeta  float64    `protobuf:"fixed64,9,opt,name=uptime_reputation_beta,json=uptimeReputationBeta,proto3" json:"uptime_reputation_beta,omitempty"`
	UptimeReputationScore float64    `protobuf:"fixed64,10,opt,name=uptime_reputation_score,json=uptimeReputationScore,proto3" json:"uptime_reputation_score,omitempty"`
	LastContactSuccess    time.Time  `protobuf:"bytes,11,opt,name=last_contact_success,json=lastContactSuccess,proto3,stdtime" json:"last_contact_success"`
	LastContactFailure    time.Time  `protobuf:"bytes,12,opt,name=last_contact_failure,json=lastContactFailure,proto3,stdtime" json:"last_contact_failure"`
	ExitLoopCompletedAt   *time.Time `protobuf:"bytes,13,opt,name=exit_loop_completed_at,json=exitLoopCompletedAt,proto3,stdtime" json:"exit_loop_completed_at,omitempty"`
	ExitInitiatedAt       *time.Time `protobuf:"bytes,14,opt,name=exit_initiated_at,json=exitInitiatedAt,proto3,stdtime" json:"exit_initiated_at,omitempty"`
	ExitFinishedAt        *time.Time `protobuf:"bytes,15,opt,name=exit_finished_at,json=exitFinishedAt,proto3,stdtime" json:"exit_finished_at,omitempty"`
	ExitSuccess           bool       `protobuf:"varint,16,opt,name=exit_success,json=exitSuccess,proto3" json:"exit_success,omitempty"`
	Vetted                bool       `protobuf:"varint,17,opt,name=vetted,proto3" json:"vetted,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-"`
	XXX_unrecognized      []byte     `json:"-"`
	XXX_sizecache         int32      `json:"-"`
}

func (m *ReportRequest) Reset()         { *m = ReportRequest{} }
func (m *ReportRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()    {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{1}
}
func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRequest.Unmarshal(m, b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
}
func (m *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(m, src)
}
func (m *ReportRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRequest.Size(m)
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

func (m *ReportRequest) GetAuditTotalCount() int64 {
	if m != nil {
		return m.AuditTotalCount
	}
	return 0
}

func (m *ReportRequest) GetAuditSuccessCount() int64 {
	if m != nil {
		return m.AuditSuccessCount
	}
	return 0
}

func (m *ReportRequest) GetAuditReputationAlpha() float64 {
	if m != nil {
		return m.AuditReputationAlpha
	}
	return 0
}

func (m *ReportRequest) GetAuditReputationBeta() float64 {
	if m != nil {
		return m.AuditReputationBeta
	}
	return 0
}

func (m *ReportRequest) GetAuditReputationScore() float64 {
	if m != nil {
		return m.AuditReputationScore
	}
	return 0
}

func (m *ReportRequest) GetUptimeTotalCount() int64 {
	if m != nil {
		return m.UptimeTotalCount
	}
	return 0
}

func (m *ReportRequest) GetUptimeSuccessCount() int64 {
	if m != nil {
		return m.UptimeSuccessCount
	}
	return 0
}

func (m *ReportRequest) GetUptimeReputationAlpha() float64 {
	if m != nil {
		return m.UptimeReputationAlpha
	}
	return 0
}

func (m *ReportRequest) GetUptimeReputationBeta() float64 {
	if m != nil {
		return m.UptimeReputationBeta
	}
	return 0
}

func (m *ReportRequest) GetUptimeReputationScore() float64 {
	if m != nil {
		return m.UptimeReputationScore
	}
	return 0
}

func (m *ReportRequest) GetLastContactSuccess() time.Time {
	if m != nil {
		return m.LastContactSuccess
	}
	return time.Time{}
}

func (m *ReportRequest) GetLastContactFailure() time.Time {
	if m != nil {
		return m.LastContactFailure
	}
	return time.Time{}
}

func (m *ReportRequest) GetExitLoopCompletedAt() *time.Time {
	if m != nil {
		return m.ExitLoopCompletedAt
	}
	return nil
}

func (m *ReportRequest) GetExitInitiatedAt() *time.Time {
	if m != nil {
		return m.ExitInitiatedAt
	}
	return nil
}

func (m *ReportRequest) GetExitFinishedAt() *time.Time {
	if m != nil {
		return m.ExitFinishedAt
	}
	return nil
}

func (m *ReportRequest) GetExitSuccess() bool {
	if m != nil {
		return m.ExitSuccess
	}
	return false
}

func (m *ReportRequest) GetVetted() bool {
	if m != nil {
		return m.Vetted
	}
	return false
}

type NotifyRequest struct {
	NodeId               NodeID        `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,customtype=NodeID" json:"node_id"`
	Notification         *Notification `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotifyRequest) Reset()         { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()    {}
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{2}
}
func (m *NotifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyRequest.Unmarshal(m, b)
}
func (m *NotifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyRequest.Marshal(b, m, deterministic)
}
func (m *NotifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRequest.Merge(m, src)
}
func (m *NotifyRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyRequest.Size(m)
}
func (m *NotifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRequest proto.InternalMessageInfo

func (m *NotifyRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type NotifyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyResponse) Reset()         { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()    {}
func (*NotifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{3}
}
func (m *NotifyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyResponse.Unmarshal(m, b)
}
func (m *NotifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyResponse.Marshal(b, m, deterministic)
}
func (m *NotifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyResponse.Merge(m, src)
}
func (m *NotifyResponse) XXX_Size() int {
	return xxx_messageInfo_NotifyResponse.Size(m)
}
func (m *NotifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyResponse proto.InternalMessageInfo

type ReportResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResponse) Reset()         { *m = ReportResponse{} }
func (m *ReportResponse) String() string { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()    {}
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{4}
}
func (m *ReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportResponse.Unmarshal(m, b)
}
func (m *ReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportResponse.Marshal(b, m, deterministic)
}
func (m *ReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResponse.Merge(m, src)
}
func (m *ReportResponse) XXX_Size() int {
	return xxx_messageInfo_ReportResponse.Size(m)
}
func (m *ReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResponse proto.InternalMessageInfo

type BroadcastResponse struct {
	SuccessCount         int32    `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	Failed               []NodeID `protobuf:"bytes,2,rep,name=failed,proto3,customtype=NodeID" json:"failed"`
	Offline              []NodeID `protobuf:"bytes,3,rep,name=offline,proto3,customtype=NodeID" json:"offline"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastResponse) Reset()         { *m = BroadcastResponse{} }
func (m *BroadcastResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastResponse) ProtoMessage()    {}
func (*BroadcastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc3de4cce73c76f, []int{5}
}
func (m *BroadcastResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastResponse.Unmarshal(m, b)
}
func (m *BroadcastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastResponse.Marshal(b, m, deterministic)
}
func (m *BroadcastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastResponse.Merge(m, src)
}
func (m *BroadcastResponse) XXX_Size() int {
	return xxx_messageInfo_BroadcastResponse.Size(m)
}
func (m *BroadcastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastResponse proto.InternalMessageInfo

func (m *BroadcastResponse) GetSuccessCount() int32 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("notifications.Notification_Scope", Notification_Scope_name, Notification_Scope_value)
	proto.RegisterEnum("notifications.Notification_Level", Notification_Level_name, Notification_Level_value)
	proto.RegisterType((*Notification)(nil), "notifications.Notification")
	proto.RegisterType((*ReportRequest)(nil), "notifications.ReportRequest")
	proto.RegisterType((*NotifyRequest)(nil), "notifications.NotifyRequest")
	proto.RegisterType((*NotifyResponse)(nil), "notifications.NotifyResponse")
	proto.RegisterType((*ReportResponse)(nil), "notifications.ReportResponse")
	proto.RegisterType((*BroadcastResponse)(nil), "notifications.BroadcastResponse")
}

func init() { proto.RegisterFile("notifications.proto", fileDescriptor_fbc3de4cce73c76f) }

var fileDescriptor_fbc3de4cce73c76f = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdb, 0x6e, 0xe3, 0x44,
	0x18, 0xae, 0x73, 0x70, 0x9a, 0x3f, 0x87, 0x3a, 0xd3, 0x6c, 0xb1, 0x02, 0xa8, 0xd9, 0x20, 0x2d,
	0x11, 0x42, 0x59, 0x14, 0x56, 0x70, 0x89, 0x9c, 0x34, 0x59, 0x19, 0x75, 0xd3, 0x32, 0x71, 0x96,
	0xc3, 0x8d, 0xe5, 0xda, 0x93, 0xac, 0x25, 0xd7, 0x63, 0xe2, 0x49, 0xc5, 0xbe, 0x01, 0xe2, 0x8a,
	0x67, 0x80, 0x97, 0xe1, 0x19, 0xb8, 0x58, 0x9e, 0x83, 0x3b, 0x34, 0x33, 0x76, 0x88, 0xe3, 0xd0,
	0xa5, 0x7b, 0x67, 0xcf, 0x77, 0xf8, 0xe7, 0xfb, 0x7f, 0xcf, 0x18, 0x4e, 0x43, 0xca, 0xfc, 0xa5,
	0xef, 0x3a, 0xcc, 0xa7, 0x61, 0x3c, 0x88, 0xd6, 0x94, 0x51, 0xd4, 0xc8, 0x2c, 0x76, 0x60, 0x45,
	0x57, 0x54, 0x42, 0x9d, 0xf3, 0x15, 0xa5, 0xab, 0x80, 0x3c, 0x15, 0x6f, 0x37, 0x9b, 0xe5, 0x53,
	0xe6, 0xdf, 0x92, 0x98, 0x39, 0xb7, 0x91, 0x24, 0xf4, 0x7e, 0x2e, 0x42, 0x7d, 0xb6, 0x23, 0x47,
	0x5f, 0x42, 0x39, 0x76, 0x69, 0x44, 0x74, 0xa5, 0xab, 0xf4, 0x9b, 0xc3, 0xc7, 0x83, 0x6c, 0xc5,
	0x5d, 0xee, 0x60, 0xce, 0x89, 0x58, 0xf2, 0xb9, 0x30, 0x20, 0x77, 0x24, 0xd0, 0x0b, 0x6f, 0x17,
	0x5e, 0x72, 0x22, 0x96, 0x7c, 0x84, 0xa0, 0xc4, 0x9c, 0x55, 0xac, 0x17, 0xbb, 0xc5, 0x7e, 0x15,
	0x8b, 0x67, 0xa4, 0x43, 0xe5, 0x96, 0xc4, 0xb1, 0xb3, 0x22, 0x7a, 0xa9, 0xab, 0xf4, 0xab, 0x38,
	0x7d, 0x45, 0x23, 0xa8, 0x6e, 0x33, 0xe8, 0xe5, 0xae, 0xd2, 0xaf, 0x0d, 0x3b, 0x03, 0x99, 0x72,
	0x90, 0xa6, 0x1c, 0x58, 0x29, 0x63, 0x74, 0xfc, 0xc7, 0x9b, 0xf3, 0xa3, 0x5f, 0xff, 0x3a, 0x57,
	0xf0, 0xbf, 0xb2, 0x5e, 0x00, 0x65, 0xb1, 0x75, 0x04, 0xa0, 0x8e, 0x17, 0x73, 0xeb, 0xea, 0x85,
	0x76, 0x84, 0xaa, 0x50, 0x36, 0x16, 0x17, 0xa6, 0xa5, 0x29, 0x7c, 0x79, 0x71, 0x6d, 0x99, 0x2f,
	0x26, 0x5a, 0x81, 0x3f, 0xe3, 0xc9, 0xb5, 0x61, 0x62, 0xad, 0x88, 0xda, 0xa0, 0x5d, 0x98, 0xf3,
	0x6f, 0x16, 0xc6, 0xa5, 0x39, 0x35, 0xc7, 0x86, 0x65, 0x5e, 0xcd, 0xb4, 0x12, 0x6a, 0x41, 0xe3,
	0x39, 0x36, 0xc6, 0x93, 0xe9, 0xe2, 0xd2, 0x9e, 0x7c, 0x67, 0x5a, 0x5a, 0x19, 0xd5, 0xa0, 0xf2,
	0x72, 0x62, 0x59, 0xe6, 0xec, 0xb9, 0xa6, 0xf6, 0x9e, 0x40, 0x59, 0xe4, 0x45, 0xc7, 0x50, 0x32,
	0x67, 0xd3, 0x2b, 0xed, 0x88, 0x3f, 0x7d, 0x6b, 0xe0, 0x99, 0xa6, 0xf0, 0xaa, 0x13, 0x8c, 0xaf,
	0xb0, 0x56, 0xe8, 0xfd, 0x5d, 0x81, 0x06, 0x26, 0x11, 0x5d, 0x33, 0x4c, 0x7e, 0xdc, 0x90, 0x98,
	0xa1, 0x4f, 0xa0, 0xe5, 0x6c, 0x3c, 0x9f, 0xd9, 0x8c, 0x32, 0x27, 0xb0, 0x5d, 0xba, 0x09, 0x99,
	0x98, 0x4b, 0x11, 0x9f, 0x08, 0xc0, 0xe2, 0xeb, 0x63, 0xbe, 0x8c, 0x06, 0x70, 0x2a, 0xb9, 0xf1,
	0xc6, 0x75, 0x49, 0x1c, 0x27, 0xec, 0x82, 0x60, 0x4b, 0x9b, 0xb9, 0x44, 0x24, 0xff, 0x19, 0x9c,
	0x49, 0xfe, 0x9a, 0x44, 0x1b, 0x26, 0xc6, 0x62, 0x3b, 0x41, 0xf4, 0xca, 0xd1, 0x8b, 0x5d, 0xa5,
	0xaf, 0xe0, 0xb6, 0x40, 0xf1, 0x16, 0x34, 0x38, 0x86, 0x86, 0xf0, 0x28, 0xa7, 0xba, 0x21, 0xcc,
	0x11, 0x53, 0x52, 0xf0, 0xe9, 0x9e, 0x68, 0x44, 0x98, 0x73, 0xb0, 0x52, 0xec, 0xd2, 0x35, 0x11,
	0xe3, 0xcb, 0x57, 0x9a, 0x73, 0x0c, 0x7d, 0x0a, 0x68, 0x13, 0xf1, 0x91, 0x65, 0xc2, 0xab, 0x22,
	0x8e, 0x26, 0x91, 0x9d, 0xf4, 0x9f, 0x41, 0x3b, 0x61, 0x67, 0xe3, 0x57, 0x04, 0x3f, 0x71, 0xca,
	0xe4, 0xff, 0x02, 0xde, 0x4b, 0x14, 0xb9, 0x06, 0x1c, 0x8b, 0x6d, 0x3d, 0x92, 0xf0, 0x7e, 0x07,
	0x9e, 0xc1, 0x59, 0x5e, 0x27, 0x5a, 0x50, 0x95, 0x69, 0xf6, 0x65, 0xa2, 0x07, 0x07, 0xab, 0xc9,
	0x26, 0xc0, 0xe1, 0x6a, 0xb2, 0x0b, 0x2f, 0xa1, 0x1d, 0x38, 0x31, 0xb3, 0x5d, 0x1a, 0x32, 0xc7,
	0xdd, 0x0e, 0x57, 0xaf, 0x3d, 0xe0, 0xc3, 0x47, 0xdc, 0x61, 0x2c, 0x0d, 0x92, 0x16, 0xe4, 0x7c,
	0x97, 0x8e, 0x1f, 0x6c, 0xd6, 0x44, 0xaf, 0xbf, 0xa3, 0xef, 0x54, 0xea, 0xd1, 0xf7, 0x70, 0x46,
	0x7e, 0xf2, 0x99, 0x1d, 0x50, 0x1a, 0xd9, 0x2e, 0xbd, 0x8d, 0x02, 0xc2, 0x88, 0x67, 0x3b, 0x4c,
	0x6f, 0xfc, 0x2f, 0x67, 0x45, 0x38, 0x9f, 0x72, 0x8f, 0x4b, 0x4a, 0xa3, 0x71, 0xea, 0x60, 0x30,
	0x74, 0x0d, 0x2d, 0x61, 0xed, 0x87, 0x3e, 0xf3, 0x9d, 0xc4, 0xb5, 0xf9, 0x00, 0xd7, 0x13, 0x2e,
	0x37, 0x53, 0xb5, 0xc1, 0xd0, 0x0c, 0x34, 0xe1, 0xb8, 0xf4, 0x43, 0x3f, 0x7e, 0x25, 0x0d, 0x4f,
	0x1e, 0x60, 0xd8, 0xe4, 0xea, 0x69, 0x22, 0x36, 0x18, 0x7a, 0x0c, 0x75, 0xe1, 0x97, 0x0e, 0x49,
	0xeb, 0x2a, 0xfd, 0x63, 0x5c, 0xe3, 0x6b, 0x69, 0xdf, 0xcf, 0x40, 0xbd, 0x23, 0x8c, 0x11, 0x4f,
	0x6f, 0x09, 0x30, 0x79, 0xeb, 0xbd, 0x86, 0x86, 0xb8, 0x20, 0x5f, 0xa7, 0x47, 0xff, 0x63, 0xa8,
	0x84, 0xd4, 0x23, 0xb6, 0xef, 0x89, 0x03, 0x5f, 0x1f, 0x35, 0x79, 0xdf, 0xff, 0x7c, 0x73, 0xae,
	0xce, 0xa8, 0x47, 0xcc, 0x0b, 0xac, 0x72, 0xd8, 0xf4, 0xd0, 0x57, 0x50, 0xdf, 0xbd, 0x68, 0xc5,
	0x81, 0xaf, 0x0d, 0xdf, 0xbf, 0xe7, 0xf6, 0xc5, 0x19, 0x41, 0x4f, 0x83, 0x66, 0x5a, 0x3a, 0x8e,
	0x68, 0x18, 0x13, 0xbe, 0x92, 0xde, 0x43, 0xc9, 0xca, 0x2f, 0x0a, 0xb4, 0x46, 0x6b, 0xea, 0x78,
	0xae, 0x13, 0x6f, 0x57, 0xd1, 0x47, 0xd0, 0xc8, 0x9e, 0x36, 0xbe, 0xd3, 0x32, 0xae, 0xc7, 0xbb,
	0xe7, 0xec, 0x09, 0xa8, 0xfc, 0xe3, 0x22, 0x9e, 0x5e, 0xe8, 0x16, 0x0f, 0xe5, 0x90, 0x28, 0xea,
	0x43, 0x85, 0x2e, 0x97, 0x81, 0x1f, 0x12, 0xf1, 0x23, 0xc8, 0x13, 0x53, 0x78, 0xf8, 0x9b, 0x92,
	0x34, 0x2b, 0x4d, 0x87, 0x26, 0xa0, 0xca, 0x08, 0xe8, 0x83, 0x43, 0xb9, 0xd3, 0xa6, 0x76, 0x3e,
	0xfc, 0x0f, 0x34, 0xc9, 0xf3, 0x35, 0x54, 0xb7, 0x21, 0xd1, 0x7d, 0x1d, 0xec, 0x74, 0xf7, 0xc0,
	0x5c, 0x6f, 0x86, 0xbf, 0x2b, 0xd0, 0xce, 0x34, 0x9d, 0xb8, 0xc4, 0xbf, 0x23, 0x6b, 0x74, 0xb1,
	0xdd, 0xeb, 0xbd, 0x15, 0xde, 0xb2, 0xd5, 0x09, 0xa8, 0x72, 0x44, 0xb9, 0xc4, 0x99, 0x3f, 0x48,
	0xce, 0x26, 0x3b, 0xd7, 0x51, 0xe9, 0x87, 0x42, 0x74, 0x73, 0xa3, 0x8a, 0xaf, 0xfc, 0xf3, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x86, 0xc4, 0xe6, 0xe2, 0x5d, 0x08, 0x00, 0x00,
}

type DRPCNotificationsClient interface {
	DRPCConn() drpc.Conn

	Notify(ctx context.Context, in *NotifyRequest) (*NotifyResponse, error)
	Broadcast(ctx context.Context, in *Notification) (*BroadcastResponse, error)
}

type drpcNotificationsClient struct {
	cc drpc.Conn
}

func NewDRPCNotificationsClient(cc drpc.Conn) DRPCNotificationsClient {
	return &drpcNotificationsClient{cc}
}

func (c *drpcNotificationsClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNotificationsClient) Notify(ctx context.Context, in *NotifyRequest) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/notifications.Notifications/Notify", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNotificationsClient) Broadcast(ctx context.Context, in *Notification) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, "/notifications.Notifications/Broadcast", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNotificationsServer interface {
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	Broadcast(context.Context, *Notification) (*BroadcastResponse, error)
}

type DRPCNotificationsDescription struct{}

func (DRPCNotificationsDescription) NumMethods() int { return 2 }

func (DRPCNotificationsDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/notifications.Notifications/Notify",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationsServer).
					Notify(
						ctx,
						in1.(*NotifyRequest),
					)
			}, DRPCNotificationsServer.Notify, true
	case 1:
		return "/notifications.Notifications/Broadcast",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationsServer).
					Broadcast(
						ctx,
						in1.(*Notification),
					)
			}, DRPCNotificationsServer.Broadcast, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterNotifications(srv drpc.Server, impl DRPCNotificationsServer) {
	srv.Register(impl, DRPCNotificationsDescription{})
}

type DRPCNotifications_NotifyStream interface {
	drpc.Stream
	SendAndClose(*NotifyResponse) error
}

type drpcNotificationsNotifyStream struct {
	drpc.Stream
}

func (x *drpcNotificationsNotifyStream) SendAndClose(m *NotifyResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNotifications_BroadcastStream interface {
	drpc.Stream
	SendAndClose(*BroadcastResponse) error
}

type drpcNotificationsBroadcastStream struct {
	drpc.Stream
}

func (x *drpcNotificationsBroadcastStream) SendAndClose(m *BroadcastResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNotificationReceiverClient interface {
	DRPCConn() drpc.Conn

	Notify(ctx context.Context, in *Notification) (*NotifyResponse, error)
	Report(ctx context.Context, in *ReportRequest) (*ReportResponse, error)
}

type drpcNotificationReceiverClient struct {
	cc drpc.Conn
}

func NewDRPCNotificationReceiverClient(cc drpc.Conn) DRPCNotificationReceiverClient {
	return &drpcNotificationReceiverClient{cc}
}

func (c *drpcNotificationReceiverClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNotificationReceiverClient) Notify(ctx context.Context, in *Notification) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationReceiver/Notify", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNotificationReceiverClient) Report(ctx context.Context, in *ReportRequest) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationReceiver/Report", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNotificationReceiverServer interface {
	Notify(context.Context, *Notification) (*NotifyResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

type DRPCNotificationReceiverDescription struct{}

func (DRPCNotificationReceiverDescription) NumMethods() int { return 2 }

func (DRPCNotificationReceiverDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/notifications.NotificationReceiver/Notify",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationReceiverServer).
					Notify(
						ctx,
						in1.(*Notification),
					)
			}, DRPCNotificationReceiverServer.Notify, true
	case 1:
		return "/notifications.NotificationReceiver/Report",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationReceiverServer).
					Report(
						ctx,
						in1.(*ReportRequest),
					)
			}, DRPCNotificationReceiverServer.Report, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterNotificationReceiver(srv drpc.Server, impl DRPCNotificationReceiverServer) {
	srv.Register(impl, DRPCNotificationReceiverDescription{})
}

type DRPCNotificationReceiver_NotifyStream interface {
	drpc.Stream
	SendAndClose(*NotifyResponse) error
}

type drpcNotificationReceiverNotifyStream struct {
	drpc.Stream
}

func (x *drpcNotificationReceiverNotifyStream) SendAndClose(m *NotifyResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNotificationReceiver_ReportStream interface {
	drpc.Stream
	SendAndClose(*ReportResponse) error
}

type drpcNotificationReceiverReportStream struct {
	drpc.Stream
}

func (x *drpcNotificationReceiverReportStream) SendAndClose(m *ReportResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationsClient is the client API for Notifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationsClient interface {
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	Broadcast(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type notificationsClient struct {
	cc *grpc.ClientConn
}

func NewNotificationsClient(cc *grpc.ClientConn) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/notifications.Notifications/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) Broadcast(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, "/notifications.Notifications/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServer is the server API for Notifications service.
type NotificationsServer interface {
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	Broadcast(context.Context, *Notification) (*BroadcastResponse, error)
}

func RegisterNotificationsServer(s *grpc.Server, srv NotificationsServer) {
	s.RegisterService(&_Notifications_serviceDesc, srv)
}

func _Notifications_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.Notifications/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.Notifications/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).Broadcast(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Notifications_Notify_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Notifications_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications.proto",
}

// NotificationReceiverClient is the client API for NotificationReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationReceiverClient interface {
	Notify(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotifyResponse, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type notificationReceiverClient struct {
	cc *grpc.ClientConn
}

func NewNotificationReceiverClient(cc *grpc.ClientConn) NotificationReceiverClient {
	return &notificationReceiverClient{cc}
}

func (c *notificationReceiverClient) Notify(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationReceiver/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReceiverClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/notifications.NotificationReceiver/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationReceiverServer is the server API for NotificationReceiver service.
type NotificationReceiverServer interface {
	Notify(context.Context, *Notification) (*NotifyResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

func RegisterNotificationReceiverServer(s *grpc.Server, srv NotificationReceiverServer) {
	s.RegisterService(&_NotificationReceiver_serviceDesc, srv)
}

func _NotificationReceiver_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReceiverServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationReceiver/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReceiverServer).Notify(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReceiver_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReceiverServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.NotificationReceiver/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReceiverServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.NotificationReceiver",
	HandlerType: (*NotificationReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NotificationReceiver_Notify_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _NotificationReceiver_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications.proto",
}
