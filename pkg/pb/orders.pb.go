// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orders.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PieceAction is an enumeration of all possible executed actions on storage node
type PieceAction int32

const (
	PieceAction_INVALID    PieceAction = 0
	PieceAction_PUT        PieceAction = 1
	PieceAction_GET        PieceAction = 2
	PieceAction_GET_AUDIT  PieceAction = 3
	PieceAction_GET_REPAIR PieceAction = 4
	PieceAction_PUT_REPAIR PieceAction = 5
	PieceAction_DELETE     PieceAction = 6
)

var PieceAction_name = map[int32]string{
	0: "INVALID",
	1: "PUT",
	2: "GET",
	3: "GET_AUDIT",
	4: "GET_REPAIR",
	5: "PUT_REPAIR",
	6: "DELETE",
}

var PieceAction_value = map[string]int32{
	"INVALID":    0,
	"PUT":        1,
	"GET":        2,
	"GET_AUDIT":  3,
	"GET_REPAIR": 4,
	"PUT_REPAIR": 5,
	"DELETE":     6,
}

func (x PieceAction) String() string {
	return proto.EnumName(PieceAction_name, int32(x))
}

func (PieceAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{0}
}

type SettlementResponse_Status int32

const (
	SettlementResponse_INVALID  SettlementResponse_Status = 0
	SettlementResponse_ACCEPTED SettlementResponse_Status = 1
	SettlementResponse_REJECTED SettlementResponse_Status = 2
)

var SettlementResponse_Status_name = map[int32]string{
	0: "INVALID",
	1: "ACCEPTED",
	2: "REJECTED",
}

var SettlementResponse_Status_value = map[string]int32{
	"INVALID":  0,
	"ACCEPTED": 1,
	"REJECTED": 2,
}

func (x SettlementResponse_Status) String() string {
	return proto.EnumName(SettlementResponse_Status_name, int32(x))
}

func (SettlementResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{7, 0}
}

// OrderLimit is provided by satellite to execute specific action on storage node within some limits
type OrderLimit struct {
	// unique serial to avoid replay attacks
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// satellite who issued this order limit allowing orderer to do the specified action
	SatelliteId NodeID `protobuf:"bytes,2,opt,name=satellite_id,json=satelliteId,proto3,customtype=NodeID" json:"satellite_id"`
	// uplink who requested or whom behalf the order limit to do an action
	DeprecatedUplinkId *NodeID `protobuf:"bytes,3,opt,name=deprecated_uplink_id,json=deprecatedUplinkId,proto3,customtype=NodeID" json:"deprecated_uplink_id,omitempty"`
	// public key that will be used to sign orders and piece hash
	UplinkPublicKey PiecePublicKey `protobuf:"bytes,13,opt,name=uplink_public_key,json=uplinkPublicKey,proto3,customtype=PiecePublicKey" json:"uplink_public_key"`
	// storage node who can re claimthe order limit specified by serial
	StorageNodeId NodeID `protobuf:"bytes,4,opt,name=storage_node_id,json=storageNodeId,proto3,customtype=NodeID" json:"storage_node_id"`
	// piece which is allowed to be touched
	PieceId PieceID `protobuf:"bytes,5,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// limit in bytes how much can be changed
	Limit              int64       `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Action             PieceAction `protobuf:"varint,7,opt,name=action,proto3,enum=orders.PieceAction" json:"action,omitempty"`
	PieceExpiration    time.Time   `protobuf:"bytes,8,opt,name=piece_expiration,json=pieceExpiration,proto3,stdtime" json:"piece_expiration"`
	OrderExpiration    time.Time   `protobuf:"bytes,9,opt,name=order_expiration,json=orderExpiration,proto3,stdtime" json:"order_expiration"`
	OrderCreation      time.Time   `protobuf:"bytes,12,opt,name=order_creation,json=orderCreation,proto3,stdtime" json:"order_creation"`
	SatelliteSignature []byte      `protobuf:"bytes,10,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	// satellites aren't necessarily discoverable in kademlia. this allows
	// a storage node to find a satellite and handshake with it to get its key.
	SatelliteAddress     *NodeAddress `protobuf:"bytes,11,opt,name=satellite_address,json=satelliteAddress,proto3" json:"satellite_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OrderLimit) Reset()         { *m = OrderLimit{} }
func (m *OrderLimit) String() string { return proto.CompactTextString(m) }
func (*OrderLimit) ProtoMessage()    {}
func (*OrderLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{0}
}
func (m *OrderLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLimit.Unmarshal(m, b)
}
func (m *OrderLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLimit.Marshal(b, m, deterministic)
}
func (m *OrderLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimit.Merge(m, src)
}
func (m *OrderLimit) XXX_Size() int {
	return xxx_messageInfo_OrderLimit.Size(m)
}
func (m *OrderLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimit.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimit proto.InternalMessageInfo

func (m *OrderLimit) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrderLimit) GetAction() PieceAction {
	if m != nil {
		return m.Action
	}
	return PieceAction_INVALID
}

func (m *OrderLimit) GetPieceExpiration() time.Time {
	if m != nil {
		return m.PieceExpiration
	}
	return time.Time{}
}

func (m *OrderLimit) GetOrderExpiration() time.Time {
	if m != nil {
		return m.OrderExpiration
	}
	return time.Time{}
}

func (m *OrderLimit) GetOrderCreation() time.Time {
	if m != nil {
		return m.OrderCreation
	}
	return time.Time{}
}

func (m *OrderLimit) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func (m *OrderLimit) GetSatelliteAddress() *NodeAddress {
	if m != nil {
		return m.SatelliteAddress
	}
	return nil
}

// OrderLimitSigning provides OrderLimit signing serialization
type OrderLimitSigning struct {
	// unique serial to avoid replay attacks
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// satellite who issued this order limit allowing orderer to do the specified action
	SatelliteId NodeID `protobuf:"bytes,2,opt,name=satellite_id,json=satelliteId,proto3,customtype=NodeID" json:"satellite_id"`
	// uplink who requested or whom behalf the order limit to do an action
	DeprecatedUplinkId *NodeID `protobuf:"bytes,3,opt,name=deprecated_uplink_id,json=deprecatedUplinkId,proto3,customtype=NodeID" json:"deprecated_uplink_id,omitempty"`
	// public key that will be used to sign orders and piece hash
	UplinkPublicKey *PiecePublicKey `protobuf:"bytes,13,opt,name=uplink_public_key,json=uplinkPublicKey,proto3,customtype=PiecePublicKey" json:"uplink_public_key,omitempty"`
	// storage node who can re claimthe order limit specified by serial
	StorageNodeId NodeID `protobuf:"bytes,4,opt,name=storage_node_id,json=storageNodeId,proto3,customtype=NodeID" json:"storage_node_id"`
	// piece which is allowed to be touched
	PieceId PieceID `protobuf:"bytes,5,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// limit in bytes how much can be changed
	Limit              int64       `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Action             PieceAction `protobuf:"varint,7,opt,name=action,proto3,enum=orders.PieceAction" json:"action,omitempty"`
	PieceExpiration    *time.Time  `protobuf:"bytes,8,opt,name=piece_expiration,json=pieceExpiration,proto3,stdtime" json:"piece_expiration,omitempty"`
	OrderExpiration    *time.Time  `protobuf:"bytes,9,opt,name=order_expiration,json=orderExpiration,proto3,stdtime" json:"order_expiration,omitempty"`
	OrderCreation      *time.Time  `protobuf:"bytes,12,opt,name=order_creation,json=orderCreation,proto3,stdtime" json:"order_creation,omitempty"`
	SatelliteSignature []byte      `protobuf:"bytes,10,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	// satellites aren't necessarily discoverable in kademlia. this allows
	// a storage node to find a satellite and handshake with it to get its key.
	SatelliteAddress     *NodeAddress `protobuf:"bytes,11,opt,name=satellite_address,json=satelliteAddress,proto3" json:"satellite_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OrderLimitSigning) Reset()         { *m = OrderLimitSigning{} }
func (m *OrderLimitSigning) String() string { return proto.CompactTextString(m) }
func (*OrderLimitSigning) ProtoMessage()    {}
func (*OrderLimitSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{1}
}
func (m *OrderLimitSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLimitSigning.Unmarshal(m, b)
}
func (m *OrderLimitSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLimitSigning.Marshal(b, m, deterministic)
}
func (m *OrderLimitSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimitSigning.Merge(m, src)
}
func (m *OrderLimitSigning) XXX_Size() int {
	return xxx_messageInfo_OrderLimitSigning.Size(m)
}
func (m *OrderLimitSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimitSigning.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimitSigning proto.InternalMessageInfo

func (m *OrderLimitSigning) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrderLimitSigning) GetAction() PieceAction {
	if m != nil {
		return m.Action
	}
	return PieceAction_INVALID
}

func (m *OrderLimitSigning) GetPieceExpiration() *time.Time {
	if m != nil {
		return m.PieceExpiration
	}
	return nil
}

func (m *OrderLimitSigning) GetOrderExpiration() *time.Time {
	if m != nil {
		return m.OrderExpiration
	}
	return nil
}

func (m *OrderLimitSigning) GetOrderCreation() *time.Time {
	if m != nil {
		return m.OrderCreation
	}
	return nil
}

func (m *OrderLimitSigning) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func (m *OrderLimitSigning) GetSatelliteAddress() *NodeAddress {
	if m != nil {
		return m.SatelliteAddress
	}
	return nil
}

// Order is a one step of fullfilling Amount number of bytes from an OrderLimit with SerialNumber
type Order struct {
	// serial of the order limit that was signed
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// amount to be signed for
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// signature
	UplinkSignature      []byte   `protobuf:"bytes,3,opt,name=uplink_signature,json=uplinkSignature,proto3" json:"uplink_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{2}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetUplinkSignature() []byte {
	if m != nil {
		return m.UplinkSignature
	}
	return nil
}

// OrderSigning provides Order signing format
type OrderSigning struct {
	// serial of the order limit that was signed
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// amount to be signed for
	Amount               int64    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderSigning) Reset()         { *m = OrderSigning{} }
func (m *OrderSigning) String() string { return proto.CompactTextString(m) }
func (*OrderSigning) ProtoMessage()    {}
func (*OrderSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{3}
}
func (m *OrderSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderSigning.Unmarshal(m, b)
}
func (m *OrderSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderSigning.Marshal(b, m, deterministic)
}
func (m *OrderSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSigning.Merge(m, src)
}
func (m *OrderSigning) XXX_Size() int {
	return xxx_messageInfo_OrderSigning.Size(m)
}
func (m *OrderSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSigning.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSigning proto.InternalMessageInfo

func (m *OrderSigning) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type PieceHash struct {
	// piece id
	PieceId PieceID `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// hash of the piece that was/is uploaded
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// size of uploaded piece
	PieceSize int64 `protobuf:"varint,4,opt,name=piece_size,json=pieceSize,proto3" json:"piece_size,omitempty"`
	// timestamp when upload occurred
	Timestamp time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// signature either satellite or storage node
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceHash) Reset()         { *m = PieceHash{} }
func (m *PieceHash) String() string { return proto.CompactTextString(m) }
func (*PieceHash) ProtoMessage()    {}
func (*PieceHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{4}
}
func (m *PieceHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceHash.Unmarshal(m, b)
}
func (m *PieceHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceHash.Marshal(b, m, deterministic)
}
func (m *PieceHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceHash.Merge(m, src)
}
func (m *PieceHash) XXX_Size() int {
	return xxx_messageInfo_PieceHash.Size(m)
}
func (m *PieceHash) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceHash.DiscardUnknown(m)
}

var xxx_messageInfo_PieceHash proto.InternalMessageInfo

func (m *PieceHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHash) GetPieceSize() int64 {
	if m != nil {
		return m.PieceSize
	}
	return 0
}

func (m *PieceHash) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *PieceHash) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// PieceHashSigning provides piece hash signing format.
type PieceHashSigning struct {
	// piece id
	PieceId PieceID `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// hash of the piece that was/is uploaded
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// size of uploaded piece
	PieceSize int64 `protobuf:"varint,4,opt,name=piece_size,json=pieceSize,proto3" json:"piece_size,omitempty"`
	// timestamp when upload occurred
	Timestamp            *time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PieceHashSigning) Reset()         { *m = PieceHashSigning{} }
func (m *PieceHashSigning) String() string { return proto.CompactTextString(m) }
func (*PieceHashSigning) ProtoMessage()    {}
func (*PieceHashSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{5}
}
func (m *PieceHashSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceHashSigning.Unmarshal(m, b)
}
func (m *PieceHashSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceHashSigning.Marshal(b, m, deterministic)
}
func (m *PieceHashSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceHashSigning.Merge(m, src)
}
func (m *PieceHashSigning) XXX_Size() int {
	return xxx_messageInfo_PieceHashSigning.Size(m)
}
func (m *PieceHashSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceHashSigning.DiscardUnknown(m)
}

var xxx_messageInfo_PieceHashSigning proto.InternalMessageInfo

func (m *PieceHashSigning) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHashSigning) GetPieceSize() int64 {
	if m != nil {
		return m.PieceSize
	}
	return 0
}

func (m *PieceHashSigning) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type SettlementRequest struct {
	Limit                *OrderLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Order                *Order      `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SettlementRequest) Reset()         { *m = SettlementRequest{} }
func (m *SettlementRequest) String() string { return proto.CompactTextString(m) }
func (*SettlementRequest) ProtoMessage()    {}
func (*SettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{6}
}
func (m *SettlementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementRequest.Unmarshal(m, b)
}
func (m *SettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementRequest.Marshal(b, m, deterministic)
}
func (m *SettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementRequest.Merge(m, src)
}
func (m *SettlementRequest) XXX_Size() int {
	return xxx_messageInfo_SettlementRequest.Size(m)
}
func (m *SettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementRequest proto.InternalMessageInfo

func (m *SettlementRequest) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *SettlementRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type SettlementResponse struct {
	SerialNumber         SerialNumber              `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	Status               SettlementResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=orders.SettlementResponse_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SettlementResponse) Reset()         { *m = SettlementResponse{} }
func (m *SettlementResponse) String() string { return proto.CompactTextString(m) }
func (*SettlementResponse) ProtoMessage()    {}
func (*SettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{7}
}
func (m *SettlementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementResponse.Unmarshal(m, b)
}
func (m *SettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementResponse.Marshal(b, m, deterministic)
}
func (m *SettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementResponse.Merge(m, src)
}
func (m *SettlementResponse) XXX_Size() int {
	return xxx_messageInfo_SettlementResponse.Size(m)
}
func (m *SettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementResponse proto.InternalMessageInfo

func (m *SettlementResponse) GetStatus() SettlementResponse_Status {
	if m != nil {
		return m.Status
	}
	return SettlementResponse_INVALID
}

func init() {
	proto.RegisterEnum("orders.PieceAction", PieceAction_name, PieceAction_value)
	proto.RegisterEnum("orders.SettlementResponse_Status", SettlementResponse_Status_name, SettlementResponse_Status_value)
	proto.RegisterType((*OrderLimit)(nil), "orders.OrderLimit")
	proto.RegisterType((*OrderLimitSigning)(nil), "orders.OrderLimitSigning")
	proto.RegisterType((*Order)(nil), "orders.Order")
	proto.RegisterType((*OrderSigning)(nil), "orders.OrderSigning")
	proto.RegisterType((*PieceHash)(nil), "orders.PieceHash")
	proto.RegisterType((*PieceHashSigning)(nil), "orders.PieceHashSigning")
	proto.RegisterType((*SettlementRequest)(nil), "orders.SettlementRequest")
	proto.RegisterType((*SettlementResponse)(nil), "orders.SettlementResponse")
}

func init() { proto.RegisterFile("orders.proto", fileDescriptor_e0f5d4cf0fc9e41b) }

var fileDescriptor_e0f5d4cf0fc9e41b = []byte{
	// 866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x4e, 0xc7, 0xe3, 0xb1, 0x5d, 0xfe, 0xc9, 0xb8, 0x37, 0x5a, 0x19, 0x0b, 0x94, 0x60, 0x2e,
	0x66, 0x91, 0x1c, 0xd6, 0x48, 0x48, 0x2b, 0xa1, 0x48, 0x76, 0x3c, 0x0a, 0xb3, 0x89, 0xb2, 0x56,
	0xdb, 0xe1, 0xc0, 0xc5, 0x1a, 0x7b, 0x9a, 0xc9, 0x68, 0xed, 0x99, 0x61, 0xba, 0x47, 0x62, 0xf7,
	0x8a, 0xb8, 0xf3, 0x36, 0x9c, 0xb8, 0x73, 0xe0, 0x09, 0x38, 0x2c, 0xef, 0xc1, 0x09, 0x75, 0xcd,
	0x9f, 0xb3, 0x24, 0x82, 0x24, 0x20, 0x01, 0xb7, 0xa9, 0xae, 0xfa, 0xaa, 0xba, 0xba, 0xbe, 0xaf,
	0x06, 0x1a, 0x41, 0xe4, 0xf0, 0x48, 0x0c, 0xc2, 0x28, 0x90, 0x01, 0xd5, 0x13, 0xab, 0x0b, 0x6e,
	0xe0, 0x06, 0xc9, 0x59, 0xf7, 0xc0, 0x0d, 0x02, 0x77, 0xcd, 0x8f, 0xd0, 0x5a, 0xc6, 0x5f, 0x1d,
	0x49, 0x6f, 0xc3, 0x85, 0xb4, 0x37, 0x61, 0x1a, 0x00, 0x7e, 0xe0, 0xf0, 0xe4, 0xbb, 0xf7, 0xad,
	0x0e, 0xf0, 0x42, 0xe5, 0x38, 0xf7, 0x36, 0x9e, 0xa4, 0xcf, 0xa0, 0x29, 0x78, 0xe4, 0xd9, 0xeb,
	0x85, 0x1f, 0x6f, 0x96, 0x3c, 0xea, 0x90, 0x43, 0xd2, 0x6f, 0x8c, 0xf7, 0x7f, 0x7a, 0x73, 0xb0,
	0xf3, 0xcb, 0x9b, 0x83, 0xc6, 0x0c, 0x9d, 0x17, 0xe8, 0x63, 0x0d, 0xb1, 0x65, 0xd1, 0xa7, 0xd0,
	0x10, 0xb6, 0xe4, 0xeb, 0xb5, 0x27, 0xf9, 0xc2, 0x73, 0x3a, 0xbb, 0x88, 0x6c, 0xa5, 0x48, 0xfd,
	0x22, 0x70, 0xb8, 0x35, 0x61, 0xf5, 0x3c, 0xc6, 0x72, 0xe8, 0x67, 0xb0, 0xef, 0xf0, 0x30, 0xe2,
	0x2b, 0x5b, 0x72, 0x67, 0x11, 0x87, 0x6b, 0xcf, 0x7f, 0xa9, 0xa0, 0x25, 0x84, 0xc2, 0x16, 0x8c,
	0x16, 0x71, 0x97, 0x18, 0x66, 0x39, 0x74, 0x0c, 0xed, 0x14, 0x12, 0xc6, 0xcb, 0xb5, 0xb7, 0x5a,
	0xbc, 0xe4, 0xaf, 0x3a, 0x4d, 0x84, 0x3e, 0x4e, 0xab, 0xb6, 0xa6, 0x1e, 0x5f, 0xf1, 0x29, 0xba,
	0xcf, 0xf8, 0x2b, 0xb6, 0x97, 0x00, 0xf2, 0x03, 0xfa, 0x29, 0xec, 0x09, 0x19, 0x44, 0xb6, 0xcb,
	0x17, 0xea, 0x51, 0x54, 0x71, 0xed, 0xc6, 0x7b, 0x37, 0xd3, 0x30, 0x34, 0x1d, 0xfa, 0x04, 0xaa,
	0xa1, 0x4a, 0xad, 0x00, 0x65, 0x04, 0xec, 0xa5, 0x80, 0x0a, 0x96, 0xb4, 0x26, 0xac, 0x82, 0x01,
	0x96, 0x43, 0xf7, 0xa1, 0xbc, 0x56, 0x8f, 0xdb, 0xd1, 0x0f, 0x49, 0xbf, 0xc4, 0x12, 0x83, 0x7e,
	0x04, 0xba, 0xbd, 0x92, 0x5e, 0xe0, 0x77, 0x2a, 0x87, 0xa4, 0xdf, 0x1a, 0x3e, 0x1a, 0xa4, 0x83,
	0x45, 0xfc, 0x08, 0x5d, 0x2c, 0x0d, 0xa1, 0x2f, 0xc0, 0x48, 0xca, 0xf1, 0x6f, 0x42, 0x2f, 0xb2,
	0x11, 0x56, 0x3d, 0x24, 0xfd, 0xfa, 0xb0, 0x3b, 0x48, 0xa6, 0x3d, 0xc8, 0xa6, 0x3d, 0x98, 0x67,
	0xd3, 0x1e, 0x57, 0xd5, 0x95, 0xbe, 0xff, 0xf5, 0x80, 0xb0, 0x3d, 0x44, 0x9b, 0x39, 0x58, 0x25,
	0xc4, 0x72, 0xdb, 0x09, 0x6b, 0x77, 0x49, 0x88, 0xe8, 0xad, 0x84, 0x67, 0xd0, 0x4a, 0x12, 0xae,
	0x22, 0x9e, 0xa4, 0x6b, 0xdc, 0x21, 0x5d, 0x13, 0xb1, 0x27, 0x29, 0x94, 0x1e, 0xc1, 0xa3, 0x82,
	0x4a, 0xc2, 0x73, 0x7d, 0x5b, 0xc6, 0x11, 0xef, 0x80, 0x7a, 0x68, 0x46, 0x73, 0xd7, 0x2c, 0xf3,
	0xd0, 0x63, 0x68, 0x17, 0x00, 0xdb, 0x71, 0x22, 0x2e, 0x44, 0xa7, 0x8e, 0x17, 0x68, 0x0f, 0x90,
	0xed, 0x6a, 0x6e, 0xa3, 0xc4, 0xc1, 0x8c, 0x3c, 0x36, 0x3d, 0xe9, 0xfd, 0x56, 0x86, 0x76, 0xa1,
	0x02, 0x95, 0xd7, 0xf3, 0xdd, 0xff, 0x94, 0x18, 0x8e, 0x6f, 0x17, 0x03, 0xfd, 0x1f, 0x09, 0xe1,
	0xec, 0x5e, 0x42, 0xd0, 0x6e, 0x16, 0xc1, 0xd9, 0xbd, 0x44, 0xa0, 0xdd, 0x2c, 0x80, 0xd3, 0x7b,
	0x08, 0x40, 0xfb, 0x57, 0x90, 0xff, 0x3b, 0x02, 0x65, 0x24, 0xff, 0x43, 0x08, 0xff, 0x18, 0x74,
	0x7b, 0x13, 0xc4, 0xbe, 0x44, 0xaa, 0x97, 0x58, 0x6a, 0xd1, 0x0f, 0xc1, 0x48, 0x79, 0x59, 0xb4,
	0x82, 0x8c, 0xce, 0x28, 0x98, 0xf7, 0xd1, 0x73, 0xa1, 0x81, 0xd7, 0xf8, 0x1b, 0xe4, 0x77, 0xcb,
	0x6d, 0x9e, 0x6b, 0xd5, 0x92, 0xa1, 0xf5, 0x7e, 0x26, 0x50, 0x43, 0x72, 0x7d, 0x6e, 0x8b, 0xab,
	0x6b, 0x0c, 0x26, 0x7f, 0xc2, 0x60, 0x0a, 0xda, 0x95, 0x2d, 0xae, 0x12, 0x39, 0x33, 0xfc, 0xa6,
	0xef, 0x01, 0x24, 0x78, 0xe1, 0xbd, 0xe6, 0x28, 0x9a, 0x12, 0xab, 0xe1, 0xc9, 0xcc, 0x7b, 0xcd,
	0xe9, 0x18, 0x6a, 0xf9, 0xff, 0x17, 0x15, 0xf2, 0x57, 0x77, 0x62, 0x01, 0xa3, 0xef, 0x42, 0xed,
	0xed, 0xd7, 0x2b, 0x0e, 0x7a, 0x3f, 0x10, 0x30, 0xf2, 0x76, 0xb2, 0xc7, 0xfb, 0x87, 0xbb, 0x3a,
	0xbe, 0x5b, 0x57, 0xda, 0x5b, 0x1d, 0xa5, 0x83, 0x58, 0x42, 0x7b, 0xc6, 0xa5, 0x5c, 0xf3, 0x0d,
	0xf7, 0x25, 0xe3, 0x5f, 0xc7, 0x5c, 0x48, 0xda, 0xcf, 0xb6, 0x04, 0xc1, 0xb4, 0x34, 0x5b, 0x07,
	0xc5, 0x7e, 0xce, 0x36, 0xc7, 0x07, 0x50, 0x46, 0x1f, 0x5e, 0xbc, 0x3e, 0x6c, 0x5e, 0x8b, 0x64,
	0x89, 0xaf, 0xf7, 0x23, 0x01, 0xba, 0x5d, 0x44, 0x84, 0x81, 0x2f, 0xf8, 0x43, 0xc8, 0xf5, 0x0c,
	0x74, 0x21, 0x6d, 0x19, 0x0b, 0xac, 0xdb, 0x1a, 0xbe, 0x9f, 0xd5, 0xfd, 0x63, 0x99, 0xc1, 0x0c,
	0x03, 0x59, 0x0a, 0xe8, 0x3d, 0x05, 0x3d, 0x39, 0xa1, 0x75, 0xa8, 0x58, 0x17, 0x5f, 0x8c, 0xce,
	0xad, 0x89, 0xb1, 0x43, 0x1b, 0x50, 0x1d, 0x9d, 0x9c, 0x98, 0xd3, 0xb9, 0x39, 0x31, 0x88, 0xb2,
	0x98, 0xf9, 0xdc, 0x3c, 0x51, 0xd6, 0xee, 0x13, 0x17, 0xea, 0x5b, 0x8b, 0xf0, 0x3a, 0xae, 0x02,
	0xa5, 0xe9, 0xe5, 0xdc, 0x20, 0xea, 0xe3, 0xd4, 0x9c, 0x1b, 0xbb, 0xb4, 0x09, 0xb5, 0x53, 0x73,
	0xbe, 0x18, 0x5d, 0x4e, 0xac, 0xb9, 0x51, 0xa2, 0x2d, 0x00, 0x65, 0x32, 0x73, 0x3a, 0xb2, 0x98,
	0xa1, 0x29, 0x7b, 0x7a, 0x99, 0xdb, 0x65, 0x0a, 0xa0, 0x4f, 0xcc, 0x73, 0x73, 0x6e, 0x1a, 0xfa,
	0x70, 0x06, 0x3a, 0x3e, 0x9c, 0xa0, 0x16, 0x40, 0xd1, 0x0a, 0x7d, 0xe7, 0xa6, 0xf6, 0x70, 0x54,
	0xdd, 0xee, 0xed, 0x9d, 0xf7, 0x76, 0xfa, 0xe4, 0x63, 0x32, 0xd6, 0xbe, 0xdc, 0x0d, 0x97, 0x4b,
	0x1d, 0x29, 0xf1, 0xc9, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x25, 0x47, 0x1b, 0xbc, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrdersClient interface {
	Settlement(ctx context.Context, opts ...grpc.CallOption) (Orders_SettlementClient, error)
}

type ordersClient struct {
	cc *grpc.ClientConn
}

func NewOrdersClient(cc *grpc.ClientConn) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) Settlement(ctx context.Context, opts ...grpc.CallOption) (Orders_SettlementClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orders_serviceDesc.Streams[0], "/orders.Orders/Settlement", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersSettlementClient{stream}
	return x, nil
}

type Orders_SettlementClient interface {
	Send(*SettlementRequest) error
	Recv() (*SettlementResponse, error)
	grpc.ClientStream
}

type ordersSettlementClient struct {
	grpc.ClientStream
}

func (x *ordersSettlementClient) Send(m *SettlementRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ordersSettlementClient) Recv() (*SettlementResponse, error) {
	m := new(SettlementResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdersServer is the server API for Orders service.
type OrdersServer interface {
	Settlement(Orders_SettlementServer) error
}

func RegisterOrdersServer(s *grpc.Server, srv OrdersServer) {
	s.RegisterService(&_Orders_serviceDesc, srv)
}

func _Orders_Settlement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrdersServer).Settlement(&ordersSettlementServer{stream})
}

type Orders_SettlementServer interface {
	Send(*SettlementResponse) error
	Recv() (*SettlementRequest, error)
	grpc.ServerStream
}

type ordersSettlementServer struct {
	grpc.ServerStream
}

func (x *ordersSettlementServer) Send(m *SettlementResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ordersSettlementServer) Recv() (*SettlementRequest, error) {
	m := new(SettlementRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Orders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Settlement",
			Handler:       _Orders_Settlement_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "orders.proto",
}
