// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: referralmanager.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
	drpc "storj.io/drpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetTokensRequest struct {
	UserId               []byte   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NodeId               NodeID   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3,customtype=NodeID" json:"node_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokensRequest) Reset()         { *m = GetTokensRequest{} }
func (m *GetTokensRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokensRequest) ProtoMessage()    {}
func (*GetTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d96ad24f1e021c, []int{0}
}
func (m *GetTokensRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokensRequest.Unmarshal(m, b)
}
func (m *GetTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokensRequest.Marshal(b, m, deterministic)
}
func (m *GetTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokensRequest.Merge(m, src)
}
func (m *GetTokensRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokensRequest.Size(m)
}
func (m *GetTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokensRequest proto.InternalMessageInfo

func (m *GetTokensRequest) GetUserId() []byte {
	if m != nil {
		return m.UserId
	}
	return nil
}

type GetTokensResponse struct {
	Tokens               []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokensResponse) Reset()         { *m = GetTokensResponse{} }
func (m *GetTokensResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokensResponse) ProtoMessage()    {}
func (*GetTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d96ad24f1e021c, []int{1}
}
func (m *GetTokensResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokensResponse.Unmarshal(m, b)
}
func (m *GetTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokensResponse.Marshal(b, m, deterministic)
}
func (m *GetTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokensResponse.Merge(m, src)
}
func (m *GetTokensResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokensResponse.Size(m)
}
func (m *GetTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokensResponse proto.InternalMessageInfo

func (m *GetTokensResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type Token struct {
	Token                []byte   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OwnerId              []byte   `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d96ad24f1e021c, []int{2}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Token) GetOwnerId() []byte {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type RedeemRequest struct {
	UserId               []byte   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                []byte   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	NodeId               []byte   `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedeemRequest) Reset()         { *m = RedeemRequest{} }
func (m *RedeemRequest) String() string { return proto.CompactTextString(m) }
func (*RedeemRequest) ProtoMessage()    {}
func (*RedeemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d96ad24f1e021c, []int{3}
}
func (m *RedeemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeemRequest.Unmarshal(m, b)
}
func (m *RedeemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeemRequest.Marshal(b, m, deterministic)
}
func (m *RedeemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemRequest.Merge(m, src)
}
func (m *RedeemRequest) XXX_Size() int {
	return xxx_messageInfo_RedeemRequest.Size(m)
}
func (m *RedeemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemRequest proto.InternalMessageInfo

func (m *RedeemRequest) GetUserId() []byte {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *RedeemRequest) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *RedeemRequest) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

type RedeemResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedeemResponse) Reset()         { *m = RedeemResponse{} }
func (m *RedeemResponse) String() string { return proto.CompactTextString(m) }
func (*RedeemResponse) ProtoMessage()    {}
func (*RedeemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d96ad24f1e021c, []int{4}
}
func (m *RedeemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeemResponse.Unmarshal(m, b)
}
func (m *RedeemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeemResponse.Marshal(b, m, deterministic)
}
func (m *RedeemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemResponse.Merge(m, src)
}
func (m *RedeemResponse) XXX_Size() int {
	return xxx_messageInfo_RedeemResponse.Size(m)
}
func (m *RedeemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetTokensRequest)(nil), "referralmanager.GetTokensRequest")
	proto.RegisterType((*GetTokensResponse)(nil), "referralmanager.GetTokensResponse")
	proto.RegisterType((*Token)(nil), "referralmanager.Token")
	proto.RegisterType((*RedeemRequest)(nil), "referralmanager.RedeemRequest")
	proto.RegisterType((*RedeemResponse)(nil), "referralmanager.RedeemResponse")
}

func init() { proto.RegisterFile("referralmanager.proto", fileDescriptor_45d96ad24f1e021c) }

var fileDescriptor_45d96ad24f1e021c = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x2d, 0x48, 0xd1, 0x11, 0x01, 0x37, 0x2a, 0xd8, 0x83, 0xc5, 0x5e, 0xe4, 0x04, 0x09,
	0x5e, 0x3c, 0xa3, 0x89, 0xe9, 0x41, 0x0f, 0x1b, 0x12, 0x13, 0x2f, 0xa6, 0x64, 0x87, 0x86, 0x48,
	0x3b, 0x75, 0x77, 0x89, 0xaf, 0xe5, 0x63, 0xf8, 0x0c, 0x1e, 0x78, 0x16, 0xd3, 0xdd, 0x82, 0x08,
	0x51, 0x8f, 0xff, 0xfc, 0xff, 0xfe, 0x9d, 0x6f, 0x0a, 0x27, 0x12, 0x27, 0x28, 0x65, 0x34, 0x4b,
	0xa2, 0x34, 0x8a, 0x51, 0xf6, 0x32, 0x49, 0x9a, 0x58, 0x63, 0x63, 0xec, 0x41, 0x4c, 0x31, 0x59,
	0xd3, 0xf3, 0x63, 0xa2, 0x78, 0x86, 0x7d, 0xa3, 0xc6, 0xf3, 0x49, 0x5f, 0x4f, 0x13, 0x54, 0x3a,
	0x4a, 0xb2, 0x22, 0x50, 0x4f, 0x50, 0x47, 0xd3, 0x74, 0xb2, 0x7c, 0x50, 0x23, 0x29, 0x50, 0x2a,
	0xab, 0x82, 0x11, 0x34, 0xef, 0x50, 0x8f, 0xe8, 0x05, 0x53, 0xc5, 0xf1, 0x75, 0x8e, 0x4a, 0xb3,
	0x16, 0x54, 0xe7, 0x0a, 0xe5, 0xf3, 0x54, 0xb4, 0x9d, 0x8e, 0xd3, 0xad, 0x71, 0x37, 0x97, 0xa1,
	0x60, 0x97, 0x50, 0x4d, 0x49, 0x60, 0x6e, 0x94, 0x72, 0x63, 0x58, 0xff, 0x58, 0xf8, 0x3b, 0x9f,
	0x0b, 0xdf, 0x7d, 0x20, 0x81, 0xe1, 0x2d, 0x77, 0x73, 0x3b, 0x14, 0xc1, 0x0d, 0x1c, 0xad, 0xb5,
	0xaa, 0x8c, 0x52, 0x85, 0xac, 0x07, 0xae, 0x36, 0x93, 0xb6, 0xd3, 0x29, 0x77, 0x0f, 0x06, 0xa7,
	0xbd, 0x4d, 0x5c, 0xf3, 0x80, 0x17, 0xa9, 0xe0, 0x1a, 0x2a, 0x66, 0xc0, 0x8e, 0xa1, 0x62, 0x46,
	0xc5, 0x36, 0x56, 0xb0, 0x33, 0xd8, 0xa3, 0xb7, 0xd4, 0xae, 0x69, 0xb6, 0xe1, 0x55, 0xa3, 0x43,
	0x11, 0x3c, 0xc2, 0x21, 0x47, 0x81, 0x98, 0xfc, 0x4b, 0xb4, 0xaa, 0x2e, 0xad, 0x57, 0xb7, 0xbe,
	0x39, 0xcb, 0x36, 0x5e, 0x70, 0x35, 0xa1, 0xbe, 0x2c, 0xb6, 0x50, 0x83, 0x77, 0x07, 0x1a, 0xbc,
	0xc0, 0xb8, 0xb7, 0x18, 0x8c, 0xc3, 0xfe, 0x8a, 0x9e, 0x5d, 0x6c, 0x51, 0x6e, 0xde, 0xdb, 0x0b,
	0xfe, 0x8a, 0x14, 0xc7, 0x0b, 0xc1, 0xb5, 0x5f, 0x66, 0xe7, 0x5b, 0xe9, 0x1f, 0xac, 0x9e, 0xff,
	0xab, 0x6f, 0xab, 0x86, 0xbb, 0x4f, 0xa5, 0x6c, 0x3c, 0x76, 0xcd, 0xff, 0xbf, 0xfa, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xbe, 0x74, 0xf4, 0xfb, 0x74, 0x02, 0x00, 0x00,
}

type DRPCReferralManagerClient interface {
	DRPCConn() drpc.Conn

	// GetTokens retrieves a list of unredeemed tokens for a user
	GetTokens(ctx context.Context, in *GetTokensRequest) (*GetTokensResponse, error)
	// Redeem marks a token as redeemed
	Redeem(ctx context.Context, in *RedeemRequest) (*RedeemResponse, error)
}

type drpcReferralManagerClient struct {
	cc drpc.Conn
}

func NewDRPCReferralManagerClient(cc drpc.Conn) DRPCReferralManagerClient {
	return &drpcReferralManagerClient{cc}
}

func (c *drpcReferralManagerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcReferralManagerClient) GetTokens(ctx context.Context, in *GetTokensRequest) (*GetTokensResponse, error) {
	out := new(GetTokensResponse)
	err := c.cc.Invoke(ctx, "/referralmanager.ReferralManager/GetTokens", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcReferralManagerClient) Redeem(ctx context.Context, in *RedeemRequest) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/referralmanager.ReferralManager/Redeem", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCReferralManagerServer interface {
	// GetTokens retrieves a list of unredeemed tokens for a user
	GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error)
	// Redeem marks a token as redeemed
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
}

type DRPCReferralManagerDescription struct{}

func (DRPCReferralManagerDescription) NumMethods() int { return 2 }

func (DRPCReferralManagerDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/referralmanager.ReferralManager/GetTokens",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCReferralManagerServer).
					GetTokens(
						ctx,
						in1.(*GetTokensRequest),
					)
			}, DRPCReferralManagerServer.GetTokens, true
	case 1:
		return "/referralmanager.ReferralManager/Redeem",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCReferralManagerServer).
					Redeem(
						ctx,
						in1.(*RedeemRequest),
					)
			}, DRPCReferralManagerServer.Redeem, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterReferralManager(srv drpc.Server, impl DRPCReferralManagerServer) {
	srv.Register(impl, DRPCReferralManagerDescription{})
}

type DRPCReferralManager_GetTokensStream interface {
	drpc.Stream
	SendAndClose(*GetTokensResponse) error
}

type drpcReferralManagerGetTokensStream struct {
	drpc.Stream
}

func (x *drpcReferralManagerGetTokensStream) SendAndClose(m *GetTokensResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCReferralManager_RedeemStream interface {
	drpc.Stream
	SendAndClose(*RedeemResponse) error
}

type drpcReferralManagerRedeemStream struct {
	drpc.Stream
}

func (x *drpcReferralManagerRedeemStream) SendAndClose(m *RedeemResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReferralManagerClient is the client API for ReferralManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReferralManagerClient interface {
	// GetTokens retrieves a list of unredeemed tokens for a user
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error)
	// Redeem marks a token as redeemed
	Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error)
}

type referralManagerClient struct {
	cc *grpc.ClientConn
}

func NewReferralManagerClient(cc *grpc.ClientConn) ReferralManagerClient {
	return &referralManagerClient{cc}
}

func (c *referralManagerClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error) {
	out := new(GetTokensResponse)
	err := c.cc.Invoke(ctx, "/referralmanager.ReferralManager/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralManagerClient) Redeem(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*RedeemResponse, error) {
	out := new(RedeemResponse)
	err := c.cc.Invoke(ctx, "/referralmanager.ReferralManager/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralManagerServer is the server API for ReferralManager service.
type ReferralManagerServer interface {
	// GetTokens retrieves a list of unredeemed tokens for a user
	GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error)
	// Redeem marks a token as redeemed
	Redeem(context.Context, *RedeemRequest) (*RedeemResponse, error)
}

func RegisterReferralManagerServer(s *grpc.Server, srv ReferralManagerServer) {
	s.RegisterService(&_ReferralManager_serviceDesc, srv)
}

func _ReferralManager_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralManagerServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/referralmanager.ReferralManager/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralManagerServer).GetTokens(ctx, req.(*GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralManager_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralManagerServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/referralmanager.ReferralManager/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralManagerServer).Redeem(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReferralManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "referralmanager.ReferralManager",
	HandlerType: (*ReferralManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokens",
			Handler:    _ReferralManager_GetTokens_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _ReferralManager_Redeem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "referralmanager.proto",
}
