// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: piecestore2.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
	drpc "storj.io/drpc"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PieceHeader_FormatVersion int32

const (
	PieceHeader_FORMAT_V0 PieceHeader_FormatVersion = 0
	PieceHeader_FORMAT_V1 PieceHeader_FormatVersion = 1
)

var PieceHeader_FormatVersion_name = map[int32]string{
	0: "FORMAT_V0",
	1: "FORMAT_V1",
}

var PieceHeader_FormatVersion_value = map[string]int32{
	"FORMAT_V0": 0,
	"FORMAT_V1": 1,
}

func (x PieceHeader_FormatVersion) String() string {
	return proto.EnumName(PieceHeader_FormatVersion_name, int32(x))
}

func (PieceHeader_FormatVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{14, 0}
}

// Expected order of messages from uplink:
//   OrderLimit ->
//   repeated
//      Order ->
//      Chunk ->
//   PieceHash signed by uplink ->
//      <- PieceHash signed by storage node
//
type PieceUploadRequest struct {
	// first message to show that we are allowed to upload
	Limit *OrderLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// order for uploading
	Order *Order                    `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Chunk *PieceUploadRequest_Chunk `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// final message
	Done                 *PieceHash `protobuf:"bytes,4,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PieceUploadRequest) Reset()         { *m = PieceUploadRequest{} }
func (m *PieceUploadRequest) String() string { return proto.CompactTextString(m) }
func (*PieceUploadRequest) ProtoMessage()    {}
func (*PieceUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{0}
}
func (m *PieceUploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceUploadRequest.Unmarshal(m, b)
}
func (m *PieceUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceUploadRequest.Marshal(b, m, deterministic)
}
func (m *PieceUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceUploadRequest.Merge(m, src)
}
func (m *PieceUploadRequest) XXX_Size() int {
	return xxx_messageInfo_PieceUploadRequest.Size(m)
}
func (m *PieceUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PieceUploadRequest proto.InternalMessageInfo

func (m *PieceUploadRequest) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *PieceUploadRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PieceUploadRequest) GetChunk() *PieceUploadRequest_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *PieceUploadRequest) GetDone() *PieceHash {
	if m != nil {
		return m.Done
	}
	return nil
}

// data message
type PieceUploadRequest_Chunk struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceUploadRequest_Chunk) Reset()         { *m = PieceUploadRequest_Chunk{} }
func (m *PieceUploadRequest_Chunk) String() string { return proto.CompactTextString(m) }
func (*PieceUploadRequest_Chunk) ProtoMessage()    {}
func (*PieceUploadRequest_Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{0, 0}
}
func (m *PieceUploadRequest_Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceUploadRequest_Chunk.Unmarshal(m, b)
}
func (m *PieceUploadRequest_Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceUploadRequest_Chunk.Marshal(b, m, deterministic)
}
func (m *PieceUploadRequest_Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceUploadRequest_Chunk.Merge(m, src)
}
func (m *PieceUploadRequest_Chunk) XXX_Size() int {
	return xxx_messageInfo_PieceUploadRequest_Chunk.Size(m)
}
func (m *PieceUploadRequest_Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceUploadRequest_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_PieceUploadRequest_Chunk proto.InternalMessageInfo

func (m *PieceUploadRequest_Chunk) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PieceUploadRequest_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PieceUploadResponse struct {
	Done                 *PieceHash `protobuf:"bytes,1,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PieceUploadResponse) Reset()         { *m = PieceUploadResponse{} }
func (m *PieceUploadResponse) String() string { return proto.CompactTextString(m) }
func (*PieceUploadResponse) ProtoMessage()    {}
func (*PieceUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{1}
}
func (m *PieceUploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceUploadResponse.Unmarshal(m, b)
}
func (m *PieceUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceUploadResponse.Marshal(b, m, deterministic)
}
func (m *PieceUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceUploadResponse.Merge(m, src)
}
func (m *PieceUploadResponse) XXX_Size() int {
	return xxx_messageInfo_PieceUploadResponse.Size(m)
}
func (m *PieceUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PieceUploadResponse proto.InternalMessageInfo

func (m *PieceUploadResponse) GetDone() *PieceHash {
	if m != nil {
		return m.Done
	}
	return nil
}

// Expected order of messages from uplink:
//   {OrderLimit, Chunk} ->
//   go repeated
//      Order -> (async)
//   go repeated
//      <- PieceDownloadResponse.Chunk
type PieceDownloadRequest struct {
	// first message to show that we are allowed to upload
	Limit *OrderLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// order for downloading
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// request for the chunk
	Chunk                *PieceDownloadRequest_Chunk `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PieceDownloadRequest) Reset()         { *m = PieceDownloadRequest{} }
func (m *PieceDownloadRequest) String() string { return proto.CompactTextString(m) }
func (*PieceDownloadRequest) ProtoMessage()    {}
func (*PieceDownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{2}
}
func (m *PieceDownloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDownloadRequest.Unmarshal(m, b)
}
func (m *PieceDownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDownloadRequest.Marshal(b, m, deterministic)
}
func (m *PieceDownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDownloadRequest.Merge(m, src)
}
func (m *PieceDownloadRequest) XXX_Size() int {
	return xxx_messageInfo_PieceDownloadRequest.Size(m)
}
func (m *PieceDownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDownloadRequest proto.InternalMessageInfo

func (m *PieceDownloadRequest) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *PieceDownloadRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PieceDownloadRequest) GetChunk() *PieceDownloadRequest_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// Chunk that we wish to download
type PieceDownloadRequest_Chunk struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	ChunkSize            int64    `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceDownloadRequest_Chunk) Reset()         { *m = PieceDownloadRequest_Chunk{} }
func (m *PieceDownloadRequest_Chunk) String() string { return proto.CompactTextString(m) }
func (*PieceDownloadRequest_Chunk) ProtoMessage()    {}
func (*PieceDownloadRequest_Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{2, 0}
}
func (m *PieceDownloadRequest_Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDownloadRequest_Chunk.Unmarshal(m, b)
}
func (m *PieceDownloadRequest_Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDownloadRequest_Chunk.Marshal(b, m, deterministic)
}
func (m *PieceDownloadRequest_Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDownloadRequest_Chunk.Merge(m, src)
}
func (m *PieceDownloadRequest_Chunk) XXX_Size() int {
	return xxx_messageInfo_PieceDownloadRequest_Chunk.Size(m)
}
func (m *PieceDownloadRequest_Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDownloadRequest_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDownloadRequest_Chunk proto.InternalMessageInfo

func (m *PieceDownloadRequest_Chunk) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PieceDownloadRequest_Chunk) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

type PieceDownloadResponse struct {
	Chunk                *PieceDownloadResponse_Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Hash                 *PieceHash                   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Limit                *OrderLimit                  `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PieceDownloadResponse) Reset()         { *m = PieceDownloadResponse{} }
func (m *PieceDownloadResponse) String() string { return proto.CompactTextString(m) }
func (*PieceDownloadResponse) ProtoMessage()    {}
func (*PieceDownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{3}
}
func (m *PieceDownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDownloadResponse.Unmarshal(m, b)
}
func (m *PieceDownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDownloadResponse.Marshal(b, m, deterministic)
}
func (m *PieceDownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDownloadResponse.Merge(m, src)
}
func (m *PieceDownloadResponse) XXX_Size() int {
	return xxx_messageInfo_PieceDownloadResponse.Size(m)
}
func (m *PieceDownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDownloadResponse proto.InternalMessageInfo

func (m *PieceDownloadResponse) GetChunk() *PieceDownloadResponse_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *PieceDownloadResponse) GetHash() *PieceHash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceDownloadResponse) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

// Chunk response for download request
type PieceDownloadResponse_Chunk struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceDownloadResponse_Chunk) Reset()         { *m = PieceDownloadResponse_Chunk{} }
func (m *PieceDownloadResponse_Chunk) String() string { return proto.CompactTextString(m) }
func (*PieceDownloadResponse_Chunk) ProtoMessage()    {}
func (*PieceDownloadResponse_Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{3, 0}
}
func (m *PieceDownloadResponse_Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDownloadResponse_Chunk.Unmarshal(m, b)
}
func (m *PieceDownloadResponse_Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDownloadResponse_Chunk.Marshal(b, m, deterministic)
}
func (m *PieceDownloadResponse_Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDownloadResponse_Chunk.Merge(m, src)
}
func (m *PieceDownloadResponse_Chunk) XXX_Size() int {
	return xxx_messageInfo_PieceDownloadResponse_Chunk.Size(m)
}
func (m *PieceDownloadResponse_Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDownloadResponse_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDownloadResponse_Chunk proto.InternalMessageInfo

func (m *PieceDownloadResponse_Chunk) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PieceDownloadResponse_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PieceDeleteRequest struct {
	Limit                *OrderLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PieceDeleteRequest) Reset()         { *m = PieceDeleteRequest{} }
func (m *PieceDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*PieceDeleteRequest) ProtoMessage()    {}
func (*PieceDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{4}
}
func (m *PieceDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDeleteRequest.Unmarshal(m, b)
}
func (m *PieceDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDeleteRequest.Marshal(b, m, deterministic)
}
func (m *PieceDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDeleteRequest.Merge(m, src)
}
func (m *PieceDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_PieceDeleteRequest.Size(m)
}
func (m *PieceDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDeleteRequest proto.InternalMessageInfo

func (m *PieceDeleteRequest) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type PieceDeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceDeleteResponse) Reset()         { *m = PieceDeleteResponse{} }
func (m *PieceDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*PieceDeleteResponse) ProtoMessage()    {}
func (*PieceDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{5}
}
func (m *PieceDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDeleteResponse.Unmarshal(m, b)
}
func (m *PieceDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDeleteResponse.Marshal(b, m, deterministic)
}
func (m *PieceDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDeleteResponse.Merge(m, src)
}
func (m *PieceDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_PieceDeleteResponse.Size(m)
}
func (m *PieceDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDeleteResponse proto.InternalMessageInfo

type PieceDeletePieceRequest struct {
	PieceId              PieceID  `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceDeletePieceRequest) Reset()         { *m = PieceDeletePieceRequest{} }
func (m *PieceDeletePieceRequest) String() string { return proto.CompactTextString(m) }
func (*PieceDeletePieceRequest) ProtoMessage()    {}
func (*PieceDeletePieceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{6}
}
func (m *PieceDeletePieceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDeletePieceRequest.Unmarshal(m, b)
}
func (m *PieceDeletePieceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDeletePieceRequest.Marshal(b, m, deterministic)
}
func (m *PieceDeletePieceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDeletePieceRequest.Merge(m, src)
}
func (m *PieceDeletePieceRequest) XXX_Size() int {
	return xxx_messageInfo_PieceDeletePieceRequest.Size(m)
}
func (m *PieceDeletePieceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDeletePieceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDeletePieceRequest proto.InternalMessageInfo

type PieceDeletePieceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PieceDeletePieceResponse) Reset()         { *m = PieceDeletePieceResponse{} }
func (m *PieceDeletePieceResponse) String() string { return proto.CompactTextString(m) }
func (*PieceDeletePieceResponse) ProtoMessage()    {}
func (*PieceDeletePieceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{7}
}
func (m *PieceDeletePieceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceDeletePieceResponse.Unmarshal(m, b)
}
func (m *PieceDeletePieceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceDeletePieceResponse.Marshal(b, m, deterministic)
}
func (m *PieceDeletePieceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceDeletePieceResponse.Merge(m, src)
}
func (m *PieceDeletePieceResponse) XXX_Size() int {
	return xxx_messageInfo_PieceDeletePieceResponse.Size(m)
}
func (m *PieceDeletePieceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceDeletePieceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PieceDeletePieceResponse proto.InternalMessageInfo

type DeletePiecesRequest struct {
	PieceIds             []PieceID `protobuf:"bytes,1,rep,name=piece_ids,json=pieceIds,proto3,customtype=PieceID" json:"piece_ids"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeletePiecesRequest) Reset()         { *m = DeletePiecesRequest{} }
func (m *DeletePiecesRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePiecesRequest) ProtoMessage()    {}
func (*DeletePiecesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{8}
}
func (m *DeletePiecesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePiecesRequest.Unmarshal(m, b)
}
func (m *DeletePiecesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePiecesRequest.Marshal(b, m, deterministic)
}
func (m *DeletePiecesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePiecesRequest.Merge(m, src)
}
func (m *DeletePiecesRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePiecesRequest.Size(m)
}
func (m *DeletePiecesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePiecesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePiecesRequest proto.InternalMessageInfo

type DeletePiecesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePiecesResponse) Reset()         { *m = DeletePiecesResponse{} }
func (m *DeletePiecesResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePiecesResponse) ProtoMessage()    {}
func (*DeletePiecesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{9}
}
func (m *DeletePiecesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePiecesResponse.Unmarshal(m, b)
}
func (m *DeletePiecesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePiecesResponse.Marshal(b, m, deterministic)
}
func (m *DeletePiecesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePiecesResponse.Merge(m, src)
}
func (m *DeletePiecesResponse) XXX_Size() int {
	return xxx_messageInfo_DeletePiecesResponse.Size(m)
}
func (m *DeletePiecesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePiecesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePiecesResponse proto.InternalMessageInfo

type RetainRequest struct {
	CreationDate         time.Time `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date"`
	Filter               []byte    `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RetainRequest) Reset()         { *m = RetainRequest{} }
func (m *RetainRequest) String() string { return proto.CompactTextString(m) }
func (*RetainRequest) ProtoMessage()    {}
func (*RetainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{10}
}
func (m *RetainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetainRequest.Unmarshal(m, b)
}
func (m *RetainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetainRequest.Marshal(b, m, deterministic)
}
func (m *RetainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetainRequest.Merge(m, src)
}
func (m *RetainRequest) XXX_Size() int {
	return xxx_messageInfo_RetainRequest.Size(m)
}
func (m *RetainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetainRequest proto.InternalMessageInfo

func (m *RetainRequest) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *RetainRequest) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

type RetainResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetainResponse) Reset()         { *m = RetainResponse{} }
func (m *RetainResponse) String() string { return proto.CompactTextString(m) }
func (*RetainResponse) ProtoMessage()    {}
func (*RetainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{11}
}
func (m *RetainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetainResponse.Unmarshal(m, b)
}
func (m *RetainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetainResponse.Marshal(b, m, deterministic)
}
func (m *RetainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetainResponse.Merge(m, src)
}
func (m *RetainResponse) XXX_Size() int {
	return xxx_messageInfo_RetainResponse.Size(m)
}
func (m *RetainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetainResponse proto.InternalMessageInfo

type RestoreTrashRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreTrashRequest) Reset()         { *m = RestoreTrashRequest{} }
func (m *RestoreTrashRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreTrashRequest) ProtoMessage()    {}
func (*RestoreTrashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{12}
}
func (m *RestoreTrashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreTrashRequest.Unmarshal(m, b)
}
func (m *RestoreTrashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreTrashRequest.Marshal(b, m, deterministic)
}
func (m *RestoreTrashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreTrashRequest.Merge(m, src)
}
func (m *RestoreTrashRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreTrashRequest.Size(m)
}
func (m *RestoreTrashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreTrashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreTrashRequest proto.InternalMessageInfo

type RestoreTrashResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreTrashResponse) Reset()         { *m = RestoreTrashResponse{} }
func (m *RestoreTrashResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreTrashResponse) ProtoMessage()    {}
func (*RestoreTrashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{13}
}
func (m *RestoreTrashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreTrashResponse.Unmarshal(m, b)
}
func (m *RestoreTrashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreTrashResponse.Marshal(b, m, deterministic)
}
func (m *RestoreTrashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreTrashResponse.Merge(m, src)
}
func (m *RestoreTrashResponse) XXX_Size() int {
	return xxx_messageInfo_RestoreTrashResponse.Size(m)
}
func (m *RestoreTrashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreTrashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreTrashResponse proto.InternalMessageInfo

// PieceHeader is used in piece storage to keep track of piece attributes.
type PieceHeader struct {
	// the storage format version being used for this piece. The piece filename should agree with this.
	// The inclusion of this field is intended to aid repairability when filenames are damaged.
	FormatVersion PieceHeader_FormatVersion `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3,enum=piecestore.PieceHeader_FormatVersion" json:"format_version,omitempty"`
	// content hash of the piece
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// timestamp when upload occurred, as given by the "timestamp" field in the original orders.PieceHash
	CreationTime time.Time `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time"`
	// signature from uplink over the original orders.PieceHash (the corresponding PieceHashSigning
	// is reconstructable using the piece id from the piecestore, the piece size from the
	// filesystem (minus the piece header size), and these (hash, upload_time, signature) fields).
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// the OrderLimit authorizing storage of this piece, as signed by the satellite and sent by
	// the uplink
	OrderLimit           OrderLimit `protobuf:"bytes,5,opt,name=order_limit,json=orderLimit,proto3" json:"order_limit"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PieceHeader) Reset()         { *m = PieceHeader{} }
func (m *PieceHeader) String() string { return proto.CompactTextString(m) }
func (*PieceHeader) ProtoMessage()    {}
func (*PieceHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff32dd550c2439, []int{14}
}
func (m *PieceHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceHeader.Unmarshal(m, b)
}
func (m *PieceHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceHeader.Marshal(b, m, deterministic)
}
func (m *PieceHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceHeader.Merge(m, src)
}
func (m *PieceHeader) XXX_Size() int {
	return xxx_messageInfo_PieceHeader.Size(m)
}
func (m *PieceHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PieceHeader proto.InternalMessageInfo

func (m *PieceHeader) GetFormatVersion() PieceHeader_FormatVersion {
	if m != nil {
		return m.FormatVersion
	}
	return PieceHeader_FORMAT_V0
}

func (m *PieceHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHeader) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *PieceHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PieceHeader) GetOrderLimit() OrderLimit {
	if m != nil {
		return m.OrderLimit
	}
	return OrderLimit{}
}

func init() {
	proto.RegisterEnum("piecestore.PieceHeader_FormatVersion", PieceHeader_FormatVersion_name, PieceHeader_FormatVersion_value)
	proto.RegisterType((*PieceUploadRequest)(nil), "piecestore.PieceUploadRequest")
	proto.RegisterType((*PieceUploadRequest_Chunk)(nil), "piecestore.PieceUploadRequest.Chunk")
	proto.RegisterType((*PieceUploadResponse)(nil), "piecestore.PieceUploadResponse")
	proto.RegisterType((*PieceDownloadRequest)(nil), "piecestore.PieceDownloadRequest")
	proto.RegisterType((*PieceDownloadRequest_Chunk)(nil), "piecestore.PieceDownloadRequest.Chunk")
	proto.RegisterType((*PieceDownloadResponse)(nil), "piecestore.PieceDownloadResponse")
	proto.RegisterType((*PieceDownloadResponse_Chunk)(nil), "piecestore.PieceDownloadResponse.Chunk")
	proto.RegisterType((*PieceDeleteRequest)(nil), "piecestore.PieceDeleteRequest")
	proto.RegisterType((*PieceDeleteResponse)(nil), "piecestore.PieceDeleteResponse")
	proto.RegisterType((*PieceDeletePieceRequest)(nil), "piecestore.PieceDeletePieceRequest")
	proto.RegisterType((*PieceDeletePieceResponse)(nil), "piecestore.PieceDeletePieceResponse")
	proto.RegisterType((*DeletePiecesRequest)(nil), "piecestore.DeletePiecesRequest")
	proto.RegisterType((*DeletePiecesResponse)(nil), "piecestore.DeletePiecesResponse")
	proto.RegisterType((*RetainRequest)(nil), "piecestore.RetainRequest")
	proto.RegisterType((*RetainResponse)(nil), "piecestore.RetainResponse")
	proto.RegisterType((*RestoreTrashRequest)(nil), "piecestore.RestoreTrashRequest")
	proto.RegisterType((*RestoreTrashResponse)(nil), "piecestore.RestoreTrashResponse")
	proto.RegisterType((*PieceHeader)(nil), "piecestore.PieceHeader")
}

func init() { proto.RegisterFile("piecestore2.proto", fileDescriptor_23ff32dd550c2439) }

var fileDescriptor_23ff32dd550c2439 = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x73, 0x6a, 0x32, 0x71, 0xfa, 0xb7, 0xdb, 0xc3, 0x1f, 0x2c, 0x20, 0xc1, 0x6d, 0xa1,
	0x42, 0xe0, 0x96, 0xf4, 0x0a, 0x54, 0x8a, 0x48, 0x43, 0x45, 0xa5, 0x96, 0x96, 0xed, 0x41, 0x88,
	0x9b, 0xc8, 0x6d, 0x36, 0x89, 0x45, 0xe2, 0x0d, 0xb6, 0x03, 0x52, 0x9f, 0x80, 0x4b, 0x9e, 0x09,
	0x09, 0x89, 0x67, 0x40, 0xa8, 0x5c, 0xf0, 0x18, 0xdc, 0xa0, 0x3d, 0x38, 0xb1, 0x1b, 0x27, 0x51,
	0x91, 0xb8, 0x4a, 0x76, 0xf6, 0x9b, 0x6f, 0x3e, 0xcf, 0x7e, 0x33, 0x30, 0xdb, 0xb5, 0xc8, 0x39,
	0x71, 0x3d, 0xea, 0x90, 0xb2, 0xd1, 0x75, 0xa8, 0x47, 0x11, 0x0c, 0x42, 0x1a, 0x34, 0x69, 0x93,
	0x8a, 0xb8, 0x56, 0x6c, 0x52, 0xda, 0x6c, 0x93, 0x35, 0x7e, 0x3a, 0xeb, 0x35, 0xd6, 0x3c, 0xab,
	0x43, 0x5c, 0xcf, 0xec, 0x74, 0x25, 0x40, 0xa5, 0x4e, 0x9d, 0x38, 0xae, 0x38, 0xe9, 0xbf, 0x15,
	0x40, 0x87, 0x8c, 0xe9, 0xa4, 0xdb, 0xa6, 0x66, 0x1d, 0x93, 0xf7, 0x3d, 0xe2, 0x7a, 0x68, 0x15,
	0x52, 0x6d, 0xab, 0x63, 0x79, 0x05, 0xa5, 0xa4, 0xac, 0xe6, 0xca, 0xc8, 0x90, 0x49, 0x07, 0xec,
	0x67, 0x8f, 0xdd, 0x60, 0x01, 0x40, 0x4b, 0x90, 0xe2, 0x77, 0x85, 0x38, 0x47, 0xe6, 0x43, 0x48,
	0x2c, 0xee, 0xd0, 0x13, 0x48, 0x9d, 0xb7, 0x7a, 0xf6, 0xbb, 0x42, 0x82, 0x83, 0x96, 0x8d, 0x81,
	0x78, 0x63, 0xb8, 0xba, 0xb1, 0xcd, 0xb0, 0x58, 0xa4, 0xa0, 0x15, 0x48, 0xd6, 0xa9, 0x4d, 0x0a,
	0x49, 0x9e, 0x3a, 0xeb, 0xf3, 0xf3, 0xb4, 0x97, 0xa6, 0xdb, 0xc2, 0xfc, 0x5a, 0xdb, 0x80, 0x14,
	0x4f, 0x43, 0x8b, 0x90, 0xa6, 0x8d, 0x86, 0x4b, 0x84, 0xf6, 0x04, 0x96, 0x27, 0x84, 0x20, 0x59,
	0x37, 0x3d, 0x93, 0xeb, 0x54, 0x31, 0xff, 0xaf, 0x6f, 0xc2, 0x5c, 0xa8, 0xbc, 0xdb, 0xa5, 0xb6,
	0x4b, 0xfa, 0x25, 0x95, 0xb1, 0x25, 0xf5, 0x5f, 0x0a, 0xcc, 0xf3, 0x58, 0x95, 0x7e, 0xb4, 0xff,
	0x61, 0xf7, 0x36, 0xc3, 0xdd, 0xbb, 0x3b, 0xd4, 0xbd, 0x2b, 0xf5, 0x43, 0xfd, 0xd3, 0xb6, 0x26,
	0x35, 0xe6, 0x16, 0x00, 0x47, 0xd6, 0x5c, 0xeb, 0x82, 0x70, 0x21, 0x09, 0x9c, 0xe5, 0x91, 0x23,
	0xeb, 0x82, 0xe8, 0x3f, 0x14, 0x58, 0xb8, 0x52, 0x45, 0xb6, 0xe9, 0xa9, 0xaf, 0x4b, 0x7c, 0xe6,
	0xbd, 0x31, 0xba, 0x44, 0xc6, 0xd0, 0xc3, 0xb6, 0x4c, 0xb7, 0x25, 0x3f, 0x3d, 0xaa, 0xcb, 0xec,
	0x7a, 0xd0, 0xcc, 0xc4, 0x84, 0x66, 0xfe, 0x9d, 0x05, 0xb6, 0xa4, 0xff, 0xab, 0xa4, 0x4d, 0x3c,
	0x72, 0xed, 0x17, 0xd4, 0x17, 0xa4, 0x85, 0xfc, 0x7c, 0xf1, 0xa5, 0xfa, 0x0b, 0xf8, 0x3f, 0x10,
	0xe6, 0x7f, 0x7d, 0xee, 0xfb, 0x90, 0xe1, 0x8d, 0xaa, 0x59, 0x75, 0x4e, 0xaf, 0x56, 0xfe, 0xfb,
	0x76, 0x59, 0x8c, 0x7d, 0xbf, 0x2c, 0x4e, 0x71, 0xdc, 0x6e, 0x15, 0x4f, 0x71, 0xc0, 0x6e, 0x5d,
	0xd7, 0xa0, 0x30, 0x4c, 0x23, 0x4b, 0x6c, 0xc3, 0x5c, 0x20, 0xec, 0xfa, 0xf4, 0x0f, 0x20, 0xeb,
	0xd3, 0xbb, 0x05, 0xa5, 0x94, 0x88, 0xe2, 0xcf, 0x48, 0x7e, 0x57, 0x5f, 0x84, 0xf9, 0x30, 0x89,
	0x24, 0x77, 0x20, 0x8f, 0x89, 0x67, 0x5a, 0xb6, 0x4f, 0xbb, 0x0b, 0xf9, 0x73, 0x87, 0x98, 0x9e,
	0x45, 0xed, 0x5a, 0xdd, 0xf4, 0xfc, 0xe1, 0xd0, 0x0c, 0xb1, 0x6f, 0x0c, 0x7f, 0xdf, 0x18, 0xc7,
	0xfe, 0xbe, 0xa9, 0x64, 0x58, 0xd9, 0xcf, 0x3f, 0x8b, 0x0a, 0x56, 0xfd, 0xd4, 0xaa, 0xe9, 0x11,
	0xf6, 0x3c, 0x0d, 0xab, 0xed, 0x49, 0xd7, 0xab, 0x58, 0x9e, 0xf4, 0x19, 0x98, 0xf6, 0x6b, 0x4a,
	0x15, 0x0b, 0x30, 0x87, 0x85, 0xa1, 0x8e, 0x1d, 0xe6, 0x08, 0xa1, 0x85, 0x89, 0x0e, 0x87, 0x25,
	0xfc, 0x4b, 0x1c, 0x72, 0xc2, 0x3e, 0xc4, 0x64, 0x83, 0xb3, 0x07, 0xd3, 0x0d, 0xea, 0x74, 0x4c,
	0xaf, 0xf6, 0x81, 0x38, 0xae, 0x45, 0x6d, 0x2e, 0x7a, 0xba, 0xbc, 0x32, 0xe4, 0x54, 0x91, 0x60,
	0xec, 0x70, 0xf4, 0xa9, 0x00, 0xe3, 0x7c, 0x23, 0x78, 0x64, 0xee, 0xe9, 0xfb, 0x55, 0x95, 0xe6,
	0x0c, 0x76, 0x85, 0x2d, 0x5a, 0x69, 0xd2, 0x6b, 0x76, 0x85, 0x5d, 0xa2, 0x9b, 0x90, 0x75, 0xad,
	0xa6, 0x6d, 0x7a, 0x3d, 0x47, 0x2c, 0x3b, 0x15, 0x0f, 0x02, 0xe8, 0x31, 0xe4, 0xb8, 0x05, 0x6b,
	0xc2, 0x96, 0xa9, 0x51, 0xb6, 0xac, 0x24, 0x19, 0x3d, 0x06, 0xda, 0x8f, 0xe8, 0x0f, 0x21, 0x1f,
	0xfa, 0x2e, 0x94, 0x87, 0xec, 0xce, 0x01, 0xde, 0x7f, 0x7e, 0x5c, 0x3b, 0x5d, 0x9f, 0x89, 0x05,
	0x8f, 0x8f, 0x66, 0x94, 0xf2, 0xd7, 0x24, 0xc0, 0x61, 0xbf, 0x3d, 0x68, 0x1f, 0xd2, 0x62, 0x3b,
	0xa2, 0xdb, 0xe3, 0xb7, 0xb6, 0x56, 0x1c, 0x79, 0x2f, 0x9f, 0x27, 0xb6, 0xaa, 0xa0, 0x13, 0xc8,
	0xf8, 0x5b, 0x01, 0x95, 0x26, 0x2d, 0x32, 0xed, 0xce, 0xc4, 0x95, 0xc2, 0x48, 0xd7, 0x15, 0xf4,
	0x0a, 0xd2, 0xc2, 0xc6, 0x11, 0x2a, 0x43, 0x93, 0x1d, 0xa1, 0xf2, 0xca, 0xe4, 0x26, 0x3e, 0xc5,
	0x15, 0xf4, 0x06, 0x72, 0x81, 0xb1, 0x40, 0x4b, 0x23, 0x92, 0x82, 0x73, 0xad, 0x2d, 0x8f, 0x07,
	0xc9, 0xa5, 0xf9, 0x1a, 0xd4, 0xe0, 0xc0, 0xa1, 0x90, 0x9e, 0x88, 0x79, 0xd6, 0x4a, 0xa3, 0x01,
	0x92, 0xf2, 0x19, 0xa4, 0xc5, 0xdc, 0xa0, 0x1b, 0x41, 0x6c, 0x68, 0x7e, 0x35, 0x2d, 0xea, 0x4a,
	0x12, 0x1c, 0x81, 0x1a, 0x9c, 0xa7, 0xb0, 0xa6, 0x88, 0x01, 0x0c, 0x6b, 0x8a, 0x1c, 0xc5, 0x58,
	0x25, 0xf9, 0x36, 0xde, 0x3d, 0x3b, 0x4b, 0xf3, 0x09, 0xd8, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x13, 0x50, 0xc7, 0xe3, 0xc2, 0x08, 0x00, 0x00,
}

type DRPCPiecestoreClient interface {
	DRPCConn() drpc.Conn

	Upload(ctx context.Context) (DRPCPiecestore_UploadClient, error)
	Download(ctx context.Context) (DRPCPiecestore_DownloadClient, error)
	Delete(ctx context.Context, in *PieceDeleteRequest) (*PieceDeleteResponse, error)
	// DeletePiece deletes a piece from a satellite request
	DeletePiece(ctx context.Context, in *PieceDeletePieceRequest) (*PieceDeletePieceResponse, error)
	// DeletePieces deletes a set of pieces on satellite request
	DeletePieces(ctx context.Context, in *DeletePiecesRequest) (*DeletePiecesResponse, error)
	Retain(ctx context.Context, in *RetainRequest) (*RetainResponse, error)
	RestoreTrash(ctx context.Context, in *RestoreTrashRequest) (*RestoreTrashResponse, error)
}

type drpcPiecestoreClient struct {
	cc drpc.Conn
}

func NewDRPCPiecestoreClient(cc drpc.Conn) DRPCPiecestoreClient {
	return &drpcPiecestoreClient{cc}
}

func (c *drpcPiecestoreClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPiecestoreClient) Upload(ctx context.Context) (DRPCPiecestore_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, "/piecestore.Piecestore/Upload")
	if err != nil {
		return nil, err
	}
	x := &drpcPiecestoreUploadClient{stream}
	return x, nil
}

type DRPCPiecestore_UploadClient interface {
	drpc.Stream
	Send(*PieceUploadRequest) error
	CloseAndRecv() (*PieceUploadResponse, error)
}

type drpcPiecestoreUploadClient struct {
	drpc.Stream
}

func (x *drpcPiecestoreUploadClient) Send(m *PieceUploadRequest) error {
	return x.MsgSend(m)
}

func (x *drpcPiecestoreUploadClient) CloseAndRecv() (*PieceUploadResponse, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PieceUploadResponse)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcPiecestoreClient) Download(ctx context.Context) (DRPCPiecestore_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, "/piecestore.Piecestore/Download")
	if err != nil {
		return nil, err
	}
	x := &drpcPiecestoreDownloadClient{stream}
	return x, nil
}

type DRPCPiecestore_DownloadClient interface {
	drpc.Stream
	Send(*PieceDownloadRequest) error
	Recv() (*PieceDownloadResponse, error)
}

type drpcPiecestoreDownloadClient struct {
	drpc.Stream
}

func (x *drpcPiecestoreDownloadClient) Send(m *PieceDownloadRequest) error {
	return x.MsgSend(m)
}

func (x *drpcPiecestoreDownloadClient) Recv() (*PieceDownloadResponse, error) {
	m := new(PieceDownloadResponse)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcPiecestoreClient) Delete(ctx context.Context, in *PieceDeleteRequest) (*PieceDeleteResponse, error) {
	out := new(PieceDeleteResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/Delete", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPiecestoreClient) DeletePiece(ctx context.Context, in *PieceDeletePieceRequest) (*PieceDeletePieceResponse, error) {
	out := new(PieceDeletePieceResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/DeletePiece", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPiecestoreClient) DeletePieces(ctx context.Context, in *DeletePiecesRequest) (*DeletePiecesResponse, error) {
	out := new(DeletePiecesResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/DeletePieces", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPiecestoreClient) Retain(ctx context.Context, in *RetainRequest) (*RetainResponse, error) {
	out := new(RetainResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/Retain", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPiecestoreClient) RestoreTrash(ctx context.Context, in *RestoreTrashRequest) (*RestoreTrashResponse, error) {
	out := new(RestoreTrashResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/RestoreTrash", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPiecestoreServer interface {
	Upload(DRPCPiecestore_UploadStream) error
	Download(DRPCPiecestore_DownloadStream) error
	Delete(context.Context, *PieceDeleteRequest) (*PieceDeleteResponse, error)
	// DeletePiece deletes a piece from a satellite request
	DeletePiece(context.Context, *PieceDeletePieceRequest) (*PieceDeletePieceResponse, error)
	// DeletePieces deletes a set of pieces on satellite request
	DeletePieces(context.Context, *DeletePiecesRequest) (*DeletePiecesResponse, error)
	Retain(context.Context, *RetainRequest) (*RetainResponse, error)
	RestoreTrash(context.Context, *RestoreTrashRequest) (*RestoreTrashResponse, error)
}

type DRPCPiecestoreDescription struct{}

func (DRPCPiecestoreDescription) NumMethods() int { return 7 }

func (DRPCPiecestoreDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/piecestore.Piecestore/Upload",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCPiecestoreServer).
					Upload(
						&drpcPiecestoreUploadStream{in1.(drpc.Stream)},
					)
			}, DRPCPiecestoreServer.Upload, true
	case 1:
		return "/piecestore.Piecestore/Download",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCPiecestoreServer).
					Download(
						&drpcPiecestoreDownloadStream{in1.(drpc.Stream)},
					)
			}, DRPCPiecestoreServer.Download, true
	case 2:
		return "/piecestore.Piecestore/Delete",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPiecestoreServer).
					Delete(
						ctx,
						in1.(*PieceDeleteRequest),
					)
			}, DRPCPiecestoreServer.Delete, true
	case 3:
		return "/piecestore.Piecestore/DeletePiece",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPiecestoreServer).
					DeletePiece(
						ctx,
						in1.(*PieceDeletePieceRequest),
					)
			}, DRPCPiecestoreServer.DeletePiece, true
	case 4:
		return "/piecestore.Piecestore/DeletePieces",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPiecestoreServer).
					DeletePieces(
						ctx,
						in1.(*DeletePiecesRequest),
					)
			}, DRPCPiecestoreServer.DeletePieces, true
	case 5:
		return "/piecestore.Piecestore/Retain",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPiecestoreServer).
					Retain(
						ctx,
						in1.(*RetainRequest),
					)
			}, DRPCPiecestoreServer.Retain, true
	case 6:
		return "/piecestore.Piecestore/RestoreTrash",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPiecestoreServer).
					RestoreTrash(
						ctx,
						in1.(*RestoreTrashRequest),
					)
			}, DRPCPiecestoreServer.RestoreTrash, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterPiecestore(srv drpc.Server, impl DRPCPiecestoreServer) {
	srv.Register(impl, DRPCPiecestoreDescription{})
}

type DRPCPiecestore_UploadStream interface {
	drpc.Stream
	SendAndClose(*PieceUploadResponse) error
	Recv() (*PieceUploadRequest, error)
}

type drpcPiecestoreUploadStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreUploadStream) SendAndClose(m *PieceUploadResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcPiecestoreUploadStream) Recv() (*PieceUploadRequest, error) {
	m := new(PieceUploadRequest)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

type DRPCPiecestore_DownloadStream interface {
	drpc.Stream
	Send(*PieceDownloadResponse) error
	Recv() (*PieceDownloadRequest, error)
}

type drpcPiecestoreDownloadStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreDownloadStream) Send(m *PieceDownloadResponse) error {
	return x.MsgSend(m)
}

func (x *drpcPiecestoreDownloadStream) Recv() (*PieceDownloadRequest, error) {
	m := new(PieceDownloadRequest)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

type DRPCPiecestore_DeleteStream interface {
	drpc.Stream
	SendAndClose(*PieceDeleteResponse) error
}

type drpcPiecestoreDeleteStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreDeleteStream) SendAndClose(m *PieceDeleteResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPiecestore_DeletePieceStream interface {
	drpc.Stream
	SendAndClose(*PieceDeletePieceResponse) error
}

type drpcPiecestoreDeletePieceStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreDeletePieceStream) SendAndClose(m *PieceDeletePieceResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPiecestore_DeletePiecesStream interface {
	drpc.Stream
	SendAndClose(*DeletePiecesResponse) error
}

type drpcPiecestoreDeletePiecesStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreDeletePiecesStream) SendAndClose(m *DeletePiecesResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPiecestore_RetainStream interface {
	drpc.Stream
	SendAndClose(*RetainResponse) error
}

type drpcPiecestoreRetainStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreRetainStream) SendAndClose(m *RetainResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPiecestore_RestoreTrashStream interface {
	drpc.Stream
	SendAndClose(*RestoreTrashResponse) error
}

type drpcPiecestoreRestoreTrashStream struct {
	drpc.Stream
}

func (x *drpcPiecestoreRestoreTrashStream) SendAndClose(m *RestoreTrashResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PiecestoreClient is the client API for Piecestore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiecestoreClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Piecestore_UploadClient, error)
	Download(ctx context.Context, opts ...grpc.CallOption) (Piecestore_DownloadClient, error)
	Delete(ctx context.Context, in *PieceDeleteRequest, opts ...grpc.CallOption) (*PieceDeleteResponse, error)
	// DeletePiece deletes a piece from a satellite request
	DeletePiece(ctx context.Context, in *PieceDeletePieceRequest, opts ...grpc.CallOption) (*PieceDeletePieceResponse, error)
	// DeletePieces deletes a set of pieces on satellite request
	DeletePieces(ctx context.Context, in *DeletePiecesRequest, opts ...grpc.CallOption) (*DeletePiecesResponse, error)
	Retain(ctx context.Context, in *RetainRequest, opts ...grpc.CallOption) (*RetainResponse, error)
	RestoreTrash(ctx context.Context, in *RestoreTrashRequest, opts ...grpc.CallOption) (*RestoreTrashResponse, error)
}

type piecestoreClient struct {
	cc *grpc.ClientConn
}

func NewPiecestoreClient(cc *grpc.ClientConn) PiecestoreClient {
	return &piecestoreClient{cc}
}

func (c *piecestoreClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Piecestore_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Piecestore_serviceDesc.Streams[0], "/piecestore.Piecestore/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &piecestoreUploadClient{stream}
	return x, nil
}

type Piecestore_UploadClient interface {
	Send(*PieceUploadRequest) error
	CloseAndRecv() (*PieceUploadResponse, error)
	grpc.ClientStream
}

type piecestoreUploadClient struct {
	grpc.ClientStream
}

func (x *piecestoreUploadClient) Send(m *PieceUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *piecestoreUploadClient) CloseAndRecv() (*PieceUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PieceUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *piecestoreClient) Download(ctx context.Context, opts ...grpc.CallOption) (Piecestore_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Piecestore_serviceDesc.Streams[1], "/piecestore.Piecestore/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &piecestoreDownloadClient{stream}
	return x, nil
}

type Piecestore_DownloadClient interface {
	Send(*PieceDownloadRequest) error
	Recv() (*PieceDownloadResponse, error)
	grpc.ClientStream
}

type piecestoreDownloadClient struct {
	grpc.ClientStream
}

func (x *piecestoreDownloadClient) Send(m *PieceDownloadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *piecestoreDownloadClient) Recv() (*PieceDownloadResponse, error) {
	m := new(PieceDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *piecestoreClient) Delete(ctx context.Context, in *PieceDeleteRequest, opts ...grpc.CallOption) (*PieceDeleteResponse, error) {
	out := new(PieceDeleteResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piecestoreClient) DeletePiece(ctx context.Context, in *PieceDeletePieceRequest, opts ...grpc.CallOption) (*PieceDeletePieceResponse, error) {
	out := new(PieceDeletePieceResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/DeletePiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piecestoreClient) DeletePieces(ctx context.Context, in *DeletePiecesRequest, opts ...grpc.CallOption) (*DeletePiecesResponse, error) {
	out := new(DeletePiecesResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/DeletePieces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piecestoreClient) Retain(ctx context.Context, in *RetainRequest, opts ...grpc.CallOption) (*RetainResponse, error) {
	out := new(RetainResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/Retain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piecestoreClient) RestoreTrash(ctx context.Context, in *RestoreTrashRequest, opts ...grpc.CallOption) (*RestoreTrashResponse, error) {
	out := new(RestoreTrashResponse)
	err := c.cc.Invoke(ctx, "/piecestore.Piecestore/RestoreTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiecestoreServer is the server API for Piecestore service.
type PiecestoreServer interface {
	Upload(Piecestore_UploadServer) error
	Download(Piecestore_DownloadServer) error
	Delete(context.Context, *PieceDeleteRequest) (*PieceDeleteResponse, error)
	// DeletePiece deletes a piece from a satellite request
	DeletePiece(context.Context, *PieceDeletePieceRequest) (*PieceDeletePieceResponse, error)
	// DeletePieces deletes a set of pieces on satellite request
	DeletePieces(context.Context, *DeletePiecesRequest) (*DeletePiecesResponse, error)
	Retain(context.Context, *RetainRequest) (*RetainResponse, error)
	RestoreTrash(context.Context, *RestoreTrashRequest) (*RestoreTrashResponse, error)
}

func RegisterPiecestoreServer(s *grpc.Server, srv PiecestoreServer) {
	s.RegisterService(&_Piecestore_serviceDesc, srv)
}

func _Piecestore_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PiecestoreServer).Upload(&piecestoreUploadServer{stream})
}

type Piecestore_UploadServer interface {
	SendAndClose(*PieceUploadResponse) error
	Recv() (*PieceUploadRequest, error)
	grpc.ServerStream
}

type piecestoreUploadServer struct {
	grpc.ServerStream
}

func (x *piecestoreUploadServer) SendAndClose(m *PieceUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *piecestoreUploadServer) Recv() (*PieceUploadRequest, error) {
	m := new(PieceUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Piecestore_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PiecestoreServer).Download(&piecestoreDownloadServer{stream})
}

type Piecestore_DownloadServer interface {
	Send(*PieceDownloadResponse) error
	Recv() (*PieceDownloadRequest, error)
	grpc.ServerStream
}

type piecestoreDownloadServer struct {
	grpc.ServerStream
}

func (x *piecestoreDownloadServer) Send(m *PieceDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *piecestoreDownloadServer) Recv() (*PieceDownloadRequest, error) {
	m := new(PieceDownloadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Piecestore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PieceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiecestoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piecestore.Piecestore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiecestoreServer).Delete(ctx, req.(*PieceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piecestore_DeletePiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PieceDeletePieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiecestoreServer).DeletePiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piecestore.Piecestore/DeletePiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiecestoreServer).DeletePiece(ctx, req.(*PieceDeletePieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piecestore_DeletePieces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePiecesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiecestoreServer).DeletePieces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piecestore.Piecestore/DeletePieces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiecestoreServer).DeletePieces(ctx, req.(*DeletePiecesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piecestore_Retain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiecestoreServer).Retain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piecestore.Piecestore/Retain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiecestoreServer).Retain(ctx, req.(*RetainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piecestore_RestoreTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreTrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiecestoreServer).RestoreTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piecestore.Piecestore/RestoreTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiecestoreServer).RestoreTrash(ctx, req.(*RestoreTrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Piecestore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "piecestore.Piecestore",
	HandlerType: (*PiecestoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Piecestore_Delete_Handler,
		},
		{
			MethodName: "DeletePiece",
			Handler:    _Piecestore_DeletePiece_Handler,
		},
		{
			MethodName: "DeletePieces",
			Handler:    _Piecestore_DeletePieces_Handler,
		},
		{
			MethodName: "Retain",
			Handler:    _Piecestore_Retain_Handler,
		},
		{
			MethodName: "RestoreTrash",
			Handler:    _Piecestore_RestoreTrash_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Piecestore_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Piecestore_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "piecestore2.proto",
}
