// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: certificate.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SigningRequest struct {
	AuthToken            string   `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningRequest) Reset()         { *m = SigningRequest{} }
func (m *SigningRequest) String() string { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()    {}
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{0}
}
func (m *SigningRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningRequest.Unmarshal(m, b)
}
func (m *SigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningRequest.Marshal(b, m, deterministic)
}
func (m *SigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningRequest.Merge(m, src)
}
func (m *SigningRequest) XXX_Size() int {
	return xxx_messageInfo_SigningRequest.Size(m)
}
func (m *SigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigningRequest proto.InternalMessageInfo

func (m *SigningRequest) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *SigningRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SigningResponse struct {
	Chain                [][]byte `protobuf:"bytes,1,rep,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningResponse) Reset()         { *m = SigningResponse{} }
func (m *SigningResponse) String() string { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()    {}
func (*SigningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{1}
}
func (m *SigningResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningResponse.Unmarshal(m, b)
}
func (m *SigningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningResponse.Marshal(b, m, deterministic)
}
func (m *SigningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningResponse.Merge(m, src)
}
func (m *SigningResponse) XXX_Size() int {
	return xxx_messageInfo_SigningResponse.Size(m)
}
func (m *SigningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SigningResponse proto.InternalMessageInfo

func (m *SigningResponse) GetChain() [][]byte {
	if m != nil {
		return m.Chain
	}
	return nil
}

type AuthorizationRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationRequest) Reset()         { *m = AuthorizationRequest{} }
func (m *AuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorizationRequest) ProtoMessage()    {}
func (*AuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{2}
}
func (m *AuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationRequest.Unmarshal(m, b)
}
func (m *AuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationRequest.Marshal(b, m, deterministic)
}
func (m *AuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationRequest.Merge(m, src)
}
func (m *AuthorizationRequest) XXX_Size() int {
	return xxx_messageInfo_AuthorizationRequest.Size(m)
}
func (m *AuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationRequest proto.InternalMessageInfo

func (m *AuthorizationRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type AuthorizationResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationResponse) Reset()         { *m = AuthorizationResponse{} }
func (m *AuthorizationResponse) String() string { return proto.CompactTextString(m) }
func (*AuthorizationResponse) ProtoMessage()    {}
func (*AuthorizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{3}
}
func (m *AuthorizationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationResponse.Unmarshal(m, b)
}
func (m *AuthorizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationResponse.Marshal(b, m, deterministic)
}
func (m *AuthorizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationResponse.Merge(m, src)
}
func (m *AuthorizationResponse) XXX_Size() int {
	return xxx_messageInfo_AuthorizationResponse.Size(m)
}
func (m *AuthorizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationResponse proto.InternalMessageInfo

func (m *AuthorizationResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*SigningRequest)(nil), "node.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "node.SigningResponse")
	proto.RegisterType((*AuthorizationRequest)(nil), "node.AuthorizationRequest")
	proto.RegisterType((*AuthorizationResponse)(nil), "node.AuthorizationResponse")
}

func init() { proto.RegisterFile("certificate.proto", fileDescriptor_c0d34c34dd33be4b) }

var fileDescriptor_c0d34c34dd33be4b = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0x43, 0x8b, 0x18, 0x26, 0x4d, 0x8d, 0x1b, 0x1a, 0x1b, 0xd4, 0xa4, 0xe1, 0x22, 0x17,
	0x31, 0x69, 0x7f, 0x41, 0xe5, 0xe4, 0xc1, 0x0b, 0xf5, 0xe4, 0xa5, 0xd9, 0xc2, 0x08, 0x1b, 0xd3,
	0x1d, 0x64, 0x87, 0x8b, 0xbf, 0xde, 0xac, 0xab, 0x62, 0x9b, 0x1e, 0xdf, 0x9b, 0xcc, 0xf7, 0xe6,
	0x0d, 0x5c, 0x96, 0xd8, 0xb1, 0x7a, 0x53, 0xa5, 0x64, 0xcc, 0xda, 0x8e, 0x98, 0x84, 0xaf, 0xa9,
	0xc2, 0x18, 0x6a, 0xaa, 0xc9, 0x39, 0xc9, 0x33, 0x4c, 0x37, 0xaa, 0xd6, 0x4a, 0xd7, 0x05, 0x7e,
	0xf4, 0x68, 0x58, 0xdc, 0x02, 0xc8, 0x9e, 0x9b, 0x2d, 0xd3, 0x3b, 0xea, 0xb9, 0xb7, 0xf0, 0xd2,
	0xb0, 0x08, 0xad, 0xf3, 0x62, 0x0d, 0x71, 0x03, 0x21, 0xab, 0x3d, 0x1a, 0x96, 0xfb, 0x76, 0x3e,
	0x5a, 0x78, 0xe9, 0xb8, 0x18, 0x8c, 0xe4, 0x0e, 0x2e, 0xfe, 0x70, 0xa6, 0x25, 0x6d, 0x50, 0x44,
	0x70, 0x56, 0x36, 0x52, 0x59, 0xd4, 0x38, 0x9d, 0x14, 0x4e, 0x24, 0x0f, 0x10, 0xad, 0x7b, 0x6e,
	0xa8, 0x53, 0x9f, 0x92, 0x15, 0xe9, 0xdf, 0xf4, 0x2b, 0x38, 0xef, 0x0d, 0x76, 0x5b, 0x55, 0xfd,
	0x44, 0x07, 0x56, 0x3e, 0x55, 0xc9, 0x3d, 0xcc, 0x8e, 0x16, 0x06, 0xfe, 0xff, 0x53, 0x9d, 0x58,
	0xe6, 0x30, 0xc9, 0x87, 0xfa, 0x46, 0xac, 0xc0, 0xb7, 0x87, 0x89, 0x28, 0xb3, 0x2f, 0xc8, 0x0e,
	0x3b, 0xc7, 0xb3, 0x23, 0xd7, 0xa1, 0x97, 0x1b, 0x98, 0x1e, 0x64, 0x1a, 0xb1, 0x86, 0x20, 0xef,
	0x50, 0x32, 0x8a, 0xd8, 0xad, 0x9c, 0x2a, 0x11, 0x5f, 0x9f, 0x9c, 0x39, 0xe8, 0xa3, 0xff, 0x3a,
	0x6a, 0x77, 0xbb, 0xe0, 0xfb, 0xfd, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x4e, 0xf3,
	0x6d, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificatesClient is the client API for Certificates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificatesClient interface {
	Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
}

type certificatesClient struct {
	cc *grpc.ClientConn
}

func NewCertificatesClient(cc *grpc.ClientConn) CertificatesClient {
	return &certificatesClient{cc}
}

func (c *certificatesClient) Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := c.cc.Invoke(ctx, "/node.Certificates/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificatesServer is the server API for Certificates service.
type CertificatesServer interface {
	Sign(context.Context, *SigningRequest) (*SigningResponse, error)
}

func RegisterCertificatesServer(s *grpc.Server, srv CertificatesServer) {
	s.RegisterService(&_Certificates_serviceDesc, srv)
}

func _Certificates_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Certificates/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Sign(ctx, req.(*SigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Certificates",
	HandlerType: (*CertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Certificates_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}

// AuthorizationsClient is the client API for Authorizations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationsClient interface {
	Create(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
}

type authorizationsClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationsClient(cc *grpc.ClientConn) AuthorizationsClient {
	return &authorizationsClient{cc}
}

func (c *authorizationsClient) Create(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/node.Authorizations/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationsServer is the server API for Authorizations service.
type AuthorizationsServer interface {
	Create(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
}

func RegisterAuthorizationsServer(s *grpc.Server, srv AuthorizationsServer) {
	s.RegisterService(&_Authorizations_serviceDesc, srv)
}

func _Authorizations_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Authorizations/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationsServer).Create(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorizations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Authorizations",
	HandlerType: (*AuthorizationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Authorizations_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}
