pipeline {
    agent {
        docker {
            label 'main'
	        image 'mcr.microsoft.com/playwright:v1.35.0-jammy'
            alwaysPull true
            args '-u root:root --cap-add SYS_PTRACE --tmpfs "/tmp:exec,mode=777"'
        }
    }
    options {
        timeout(time: 4, unit: 'HOURS')
        skipDefaultCheckout(true)
    }
    environment {
        NPM_CONFIG_CACHE = '/npm/cache'
        GOTRACEBACK = 'all'
        COCKROACH_MEMPROF_INTERVAL=0
        PLAYWRIGHT_BROWSERS_PATH= '/ms-playwright'
    }
    stages {
        stage('Checkout') {
            steps {
                sh "chmod -R 777 ."
                sh 'bash -O extglob -c "rm -rf !(.git)"'
                checkout scm
                sh 'mkdir -p .build'

                // pre-check that we cannot do at a later stage reliably
		// sh 'check-large-files'
            }
        }

        stage('Build Web') {
            // The build code depends on the following assets being loaded.
            parallel {
                stage('web/satellite') {
                    steps {
                        sh './web/satellite/build.sh'
                    }
                }

                stage('wasm') {
                    steps {
			// sh './scripts/test-wasm.sh'
			sh 'echo "test"'
                    }
                }

                stage('web/storagenode') {
                    steps {
                        sh './web/storagenode/build.sh'
                    }
                }

                stage('web/multinode') {
                    steps {
                        sh './web/multinode/build.sh'
                    }
                }

                stage('satellite/admin/ui') {
                    steps {
                        sh './satellite/admin/ui/build.sh'
                    }
                }
            }
        }

        stage('Build') {
            parallel {
                stage('go') {
                    steps {
                        // sh 'go build -v ./...'
                        sh 'echo "test"'
                    }
                }
                stage('go -race') {
                    steps {
                        // sh 'go build -race ./...'

                        // install storj-sim
                        sh '''
                            go install -race -v storj.io/storj/cmd/satellite@latest \
                                storj.io/storagenode@latest \
                                storj.io/storj-sim@latest \
                                storj.io/versioncontrol@latest \
                                storj.io/uplink@latest \
                                storj.io/identity@latest \
                                storj.io/certificates@latest \
                                storj.io/multinode@latest
                        '''
                    }
                }
                stage('go -race gateway') {
                    steps {
                        // install gateway for storj-sim
                        sh 'go install -race -v storj.io/gateway@latest'
                    }
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir("testsuite/playwright-ui") {
			// sh 'npx playwright install --with-deps'
			sh 'npm install'
                }
            }
        }

        stage('Execute UI Tests') {
            environment {
                STORJ_SIM_POSTGRES = 'postgres://postgres@localhost/teststorj?sslmode=disable'
            }
            steps {
                sh 'service postgresql start'
                sh 'psql -U postgres -c \'create database teststorj;\''

                sh 'storj-sim network setup'

                sh '''
                    nohup authservice run \
                        --allowed-satellites $(storj-sim network env SATELLITE_0_URL) \
                        --auth-token my-test-auth-token \
                        --endpoint http://localhost:8002 \
                        --listen-addr :8000 \
                        --kv-backend badger:// > authservice.log 2>&1 &
                '''
                sh '''
                    nohup gateway-mt run \
                        --auth.token my-test-auth-token \
                        --auth.base-url http://localhost:8000 \
                        --domain-name localhost \
                        --server.address localhost:8002 \
                        --insecure-disable-tls gateway.log 2>&1 &
                '''

                dir("testsuite/playwright-ui") {
                    sh 'storj-sim network test --no-gateways -- npm run browser-debug'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'authservice.log, gateway.log, test-results/'
                }
            }
        }

        stage('Post') {
            parallel {
                stage('Lint') {
                    steps {
			//eck-clean-directory'
			sh 'echo "we dont need to lint this, the code is already linted in another jenkins job"'
                    }
                }
                stage('report') {
                    steps {
                        //execute the report
			//sh 'npm run posttest'
			sh 'echo "Test complete"'
                    }
                }
            }
        }
    }
}
