pipeline {
    agent {
        docker {
            label 'main'
            image 'storjqa/ci:latest'
            alwaysPull true
            args '-u root:root --cap-add SYS_PTRACE --tmpfs "/tmp:exec,mode=777"'
        }
    }
    options {
        timeout(time: 4, unit: 'HOURS')
        skipDefaultCheckout(false)
    }
    environment {
        NPM_CONFIG_CACHE = '/npm/cache'
        GOTRACEBACK = 'all'
        COCKROACH_MEMPROF_INTERVAL=0
        PLAYWRIGHT_BROWSERS_PATH=0
    }
    stages {
        stage('Checkout') {
            steps {
                // sh "chmod -R 777 ." // Del orphaned files
                // sh "chown -R 1001:1002 /npm/cache"
                // sh "npm install @playwright/test"
                // sh "npx playwright install"
                checkout scm
                sh 'mkdir -p .build'

                // pre-check that we cannot do at a later stage reliably
                sh 'check-large-files'
            }
        }

        stage('Build Web') {
            // The build code depends on the following assets being loaded.
            parallel {
                stage('web/satellite') {
                    steps {
                        sh './web/satellite/build.sh'
                    }
                }

                stage('wasm') {
                    steps {
                        sh './scripts/test-wasm.sh'
                    }
                }

                stage('web/storagenode') {
                    steps {
                        sh './web/storagenode/build.sh'
                    }
                }

                stage('web/multinode') {
                    steps {
                        sh './web/multinode/build.sh'
                    }
                }

                stage('satellite/admin/ui') {
                    steps {
                        sh './satellite/admin/ui/build.sh'
                    }
                }
            }
        }

        stage('Build') {
            parallel {
                stage('go') {
                    steps {
                        sh 'go build -v ./...'
                    }
                }
                stage('go -race') {
                    steps {
                        sh 'go build -race ./...'

                        // install storj-sim
                        sh 'go install -race -v storj.io/storj/cmd/satellite '+
                                'storj.io/storj/cmd/storagenode ' +
                                'storj.io/storj/cmd/storj-sim ' +
                                'storj.io/storj/cmd/versioncontrol ' +
                                'storj.io/storj/cmd/uplink ' +
                                'storj.io/storj/cmd/identity ' +
                                'storj.io/storj/cmd/certificates ' +
                                'storj.io/storj/cmd/multinode'
                    }
                }
                stage('go -race gateway') {
                    steps {
                        // install gateway for storj-sim
                        sh 'go install -race -v storj.io/gateway@latest'
                    }
                }
            }
        }

        stage('install playwright') {
            steps {
                dir("testsuite/playwright-ui") {
                    warnError('Script failed!') {
                        sh 'npm ci'
                        sh 'npm install -D @playwright/test@latest'
                        // sh 'npx playwright install'
                        // sh 'npx playwright install-deps'
                    }
                }
            }
        }

        stage('execute ui tests') {
            steps {
                dir("testsuite/playwright-ui/") {
                     warnError('Script failed!') {
                        sh 'npm run browser-debug'
                     }
                }
            }
        }
        stage('Post') {
            parallel {
                stage('Lint') {
                    steps {
                        sh 'check-clean-directory'
                    }
                }
                stage('report') {
                    steps {
                        //execute the report
                        sh 'npm run posttest'
                    }
                }
            }
        }
    }
}
