// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metainfo_sat.proto

package internalpb

import (
	fmt "fmt"
	math "math"
	time "time"

	proto "github.com/gogo/protobuf/proto"

	pb "storj.io/common/pb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamID struct {
	Bucket               []byte                   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	EncryptedObjectKey   []byte                   `protobuf:"bytes,2,opt,name=encrypted_object_key,json=encryptedObjectKey,proto3" json:"encrypted_object_key,omitempty"`
	Version              int64                    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	EncryptionParameters *pb.EncryptionParameters `protobuf:"bytes,12,opt,name=encryption_parameters,json=encryptionParameters,proto3" json:"encryption_parameters,omitempty"`
	CreationDate         time.Time                `protobuf:"bytes,5,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date"`
	ExpirationDate       time.Time                `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3,stdtime" json:"expiration_date"`
	MultipartObject      bool                     `protobuf:"varint,11,opt,name=multipart_object,json=multipartObject,proto3" json:"multipart_object,omitempty"`
	SatelliteSignature   []byte                   `protobuf:"bytes,9,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	StreamId             []byte                   `protobuf:"bytes,10,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Placement            int32                    `protobuf:"varint,13,opt,name=placement,proto3" json:"placement,omitempty"`
	Versioned            bool                     `protobuf:"varint,15,opt,name=versioned,proto3" json:"versioned,omitempty"`
	MultipartUpload      bool                     `protobuf:"varint,16,opt,name=multipart_upload,json=multipartUpload,proto3" json:"multipart_upload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StreamID) Reset()         { *m = StreamID{} }
func (m *StreamID) String() string { return proto.CompactTextString(m) }
func (*StreamID) ProtoMessage()    {}
func (*StreamID) Descriptor() ([]byte, []int) {
	return fileDescriptor_47c60bd892d94aaf, []int{0}
}
func (m *StreamID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamID.Unmarshal(m, b)
}
func (m *StreamID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamID.Marshal(b, m, deterministic)
}
func (m *StreamID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamID.Merge(m, src)
}
func (m *StreamID) XXX_Size() int {
	return xxx_messageInfo_StreamID.Size(m)
}
func (m *StreamID) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamID.DiscardUnknown(m)
}

var xxx_messageInfo_StreamID proto.InternalMessageInfo

func (m *StreamID) GetBucket() []byte {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *StreamID) GetEncryptedObjectKey() []byte {
	if m != nil {
		return m.EncryptedObjectKey
	}
	return nil
}

func (m *StreamID) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StreamID) GetEncryptionParameters() *pb.EncryptionParameters {
	if m != nil {
		return m.EncryptionParameters
	}
	return nil
}

func (m *StreamID) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *StreamID) GetExpirationDate() time.Time {
	if m != nil {
		return m.ExpirationDate
	}
	return time.Time{}
}

func (m *StreamID) GetMultipartObject() bool {
	if m != nil {
		return m.MultipartObject
	}
	return false
}

func (m *StreamID) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func (m *StreamID) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *StreamID) GetPlacement() int32 {
	if m != nil {
		return m.Placement
	}
	return 0
}

func (m *StreamID) GetVersioned() bool {
	if m != nil {
		return m.Versioned
	}
	return false
}

func (m *StreamID) GetMultipartUpload() bool {
	if m != nil {
		return m.MultipartUpload
	}
	return false
}

type SegmentID struct {
	StreamId             *StreamID                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	PartNumber           int32                     `protobuf:"varint,2,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	Index                int32                     `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	RootPieceId          PieceID                   `protobuf:"bytes,5,opt,name=root_piece_id,json=rootPieceId,proto3,customtype=PieceID" json:"root_piece_id"`
	OriginalOrderLimits  []*pb.AddressedOrderLimit `protobuf:"bytes,6,rep,name=original_order_limits,json=originalOrderLimits,proto3" json:"original_order_limits,omitempty"`
	CreationDate         time.Time                 `protobuf:"bytes,7,opt,name=creation_date,json=creationDate,proto3,stdtime" json:"creation_date"`
	SatelliteSignature   []byte                    `protobuf:"bytes,8,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SegmentID) Reset()         { *m = SegmentID{} }
func (m *SegmentID) String() string { return proto.CompactTextString(m) }
func (*SegmentID) ProtoMessage()    {}
func (*SegmentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_47c60bd892d94aaf, []int{1}
}
func (m *SegmentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentID.Unmarshal(m, b)
}
func (m *SegmentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentID.Marshal(b, m, deterministic)
}
func (m *SegmentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentID.Merge(m, src)
}
func (m *SegmentID) XXX_Size() int {
	return xxx_messageInfo_SegmentID.Size(m)
}
func (m *SegmentID) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentID.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentID proto.InternalMessageInfo

func (m *SegmentID) GetStreamId() *StreamID {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *SegmentID) GetPartNumber() int32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

func (m *SegmentID) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SegmentID) GetOriginalOrderLimits() []*pb.AddressedOrderLimit {
	if m != nil {
		return m.OriginalOrderLimits
	}
	return nil
}

func (m *SegmentID) GetCreationDate() time.Time {
	if m != nil {
		return m.CreationDate
	}
	return time.Time{}
}

func (m *SegmentID) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamID)(nil), "satellite.metainfo.StreamID")
	proto.RegisterType((*SegmentID)(nil), "satellite.metainfo.SegmentID")
}

func init() { proto.RegisterFile("metainfo_sat.proto", fileDescriptor_47c60bd892d94aaf) }

var fileDescriptor_47c60bd892d94aaf = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xfc, 0xa5, 0x49, 0x9d, 0x49, 0xda, 0x44, 0xd3, 0x16, 0x8d, 0x4a, 0x51, 0xac, 0x22,
	0x24, 0xb3, 0xb1, 0x51, 0xbb, 0x62, 0x49, 0x14, 0x16, 0xe1, 0xaf, 0xc5, 0xa1, 0x1b, 0x36, 0xd6,
	0xd8, 0x73, 0x6b, 0x4d, 0x6b, 0x7b, 0xac, 0xf1, 0x18, 0x35, 0x4b, 0xde, 0x80, 0x97, 0x42, 0xe2,
	0x19, 0x58, 0x94, 0x57, 0x41, 0x1e, 0xff, 0x05, 0x68, 0x17, 0xb0, 0x9b, 0x7b, 0xee, 0x99, 0x3b,
	0x67, 0xce, 0x3d, 0x08, 0x27, 0xa0, 0x28, 0x4f, 0x2f, 0x85, 0x9f, 0x53, 0xe5, 0x64, 0x52, 0x28,
	0x81, 0x71, 0x4e, 0x15, 0xc4, 0x31, 0x57, 0xe0, 0x34, 0xdd, 0xc3, 0x29, 0xa4, 0xa1, 0x5c, 0x67,
	0x8a, 0x8b, 0xb4, 0x62, 0x1d, 0xa2, 0x48, 0x44, 0xa2, 0x3e, 0xcf, 0x22, 0x21, 0xa2, 0x18, 0x5c,
	0x5d, 0x05, 0xc5, 0xa5, 0xab, 0x78, 0x02, 0xb9, 0xa2, 0x49, 0x56, 0x13, 0x76, 0x9b, 0x41, 0x55,
	0x7d, 0xfc, 0x75, 0x0b, 0x99, 0x2b, 0x25, 0x81, 0x26, 0xcb, 0x05, 0x7e, 0x80, 0x06, 0x41, 0x11,
	0x5e, 0x83, 0x22, 0x86, 0x65, 0xd8, 0x63, 0xaf, 0xae, 0xf0, 0x33, 0xb4, 0x5f, 0xbf, 0x0a, 0xcc,
	0x17, 0xc1, 0x15, 0x84, 0xca, 0xbf, 0x86, 0x35, 0xf9, 0x5f, 0xb3, 0x70, 0xdb, 0x3b, 0xd3, 0xad,
	0xd7, 0xb0, 0xc6, 0x04, 0x6d, 0x7f, 0x02, 0x99, 0x73, 0x91, 0x92, 0x9e, 0x65, 0xd8, 0x3d, 0xaf,
	0x29, 0xf1, 0x05, 0x3a, 0xe8, 0x7e, 0xe0, 0x67, 0x54, 0xd2, 0x04, 0x14, 0xc8, 0x9c, 0x8c, 0x2d,
	0xc3, 0x1e, 0x9d, 0x58, 0xce, 0xc6, 0xff, 0x5e, 0xb6, 0xc7, 0xf3, 0x96, 0xe7, 0xed, 0xc3, 0x1d,
	0x28, 0x5e, 0xa2, 0x9d, 0x50, 0x02, 0xd5, 0x43, 0x19, 0x55, 0x40, 0xfa, 0x7a, 0xdc, 0xa1, 0x53,
	0x19, 0xe2, 0x34, 0x86, 0x38, 0x1f, 0x1a, 0x43, 0xe6, 0xe6, 0xb7, 0xdb, 0xd9, 0x7f, 0x5f, 0x7e,
	0xcc, 0x0c, 0x6f, 0xdc, 0x5c, 0x5d, 0x50, 0x05, 0xf8, 0x2d, 0x9a, 0xc0, 0x4d, 0xc6, 0xe5, 0xc6,
	0xb0, 0xc1, 0x5f, 0x0c, 0xdb, 0xed, 0x2e, 0xeb, 0x71, 0x4f, 0xd1, 0x34, 0x29, 0x62, 0xc5, 0x33,
	0x2a, 0x55, 0x6d, 0x1e, 0x19, 0x59, 0x86, 0x6d, 0x7a, 0x93, 0x16, 0xaf, 0x8c, 0xc3, 0x2e, 0xda,
	0x6b, 0x37, 0xee, 0xe7, 0x3c, 0x4a, 0xa9, 0x2a, 0x24, 0x90, 0x61, 0x65, 0x73, 0xdb, 0x5a, 0x35,
	0x1d, 0xfc, 0x10, 0x0d, 0x73, 0xbd, 0x3c, 0x9f, 0x33, 0x82, 0x34, 0xcd, 0xac, 0x80, 0x25, 0xc3,
	0x47, 0x68, 0x98, 0xc5, 0x34, 0x84, 0x04, 0x52, 0x45, 0x76, 0x2c, 0xc3, 0xee, 0x7b, 0x1d, 0x50,
	0x76, 0xeb, 0x95, 0x00, 0x23, 0x13, 0xad, 0xa7, 0x03, 0x7e, 0x15, 0x5d, 0x64, 0xb1, 0xa0, 0x8c,
	0x4c, 0x7f, 0x13, 0x7d, 0xa1, 0xe1, 0x57, 0x5b, 0xe6, 0xee, 0x74, 0x72, 0xfc, 0xb9, 0x87, 0x86,
	0x2b, 0x88, 0xca, 0xd1, 0xcb, 0x05, 0x7e, 0xbe, 0xa9, 0xcb, 0xd0, 0xe6, 0x1d, 0x39, 0x7f, 0x86,
	0xd9, 0x69, 0x92, 0xb7, 0xa1, 0x7a, 0x86, 0x46, 0xfa, 0xd1, 0xb4, 0x48, 0x02, 0x90, 0x3a, 0x62,
	0x7d, 0x0f, 0x95, 0xd0, 0x3b, 0x8d, 0xe0, 0x7d, 0xd4, 0xe7, 0x29, 0x83, 0x1b, 0x1d, 0xac, 0xbe,
	0x57, 0x15, 0xf8, 0x14, 0xed, 0x48, 0x21, 0x94, 0x9f, 0x71, 0x08, 0xa1, 0x7c, 0xb5, 0xdc, 0xff,
	0x78, 0x3e, 0x29, 0xd7, 0xf2, 0xfd, 0x76, 0xb6, 0x7d, 0x5e, 0xe2, 0xcb, 0x85, 0x37, 0x2a, 0x59,
	0x55, 0xc1, 0xf0, 0x7b, 0x74, 0x20, 0x24, 0x8f, 0x78, 0x4a, 0x63, 0x5f, 0x48, 0x06, 0xd2, 0x8f,
	0x79, 0xc2, 0x55, 0x4e, 0x06, 0x56, 0xcf, 0x1e, 0x9d, 0x3c, 0xea, 0x84, 0xbe, 0x60, 0x4c, 0x42,
	0x9e, 0x03, 0x3b, 0x2b, 0x69, 0x6f, 0x4a, 0x96, 0xb7, 0xd7, 0xdc, 0xed, 0xb0, 0x3b, 0x72, 0xb8,
	0xfd, 0xcf, 0x39, 0xbc, 0x27, 0x0d, 0xe6, 0x7d, 0x69, 0x98, 0x3f, 0xf9, 0xf8, 0x38, 0x57, 0x42,
	0x5e, 0x39, 0x5c, 0xb8, 0xfa, 0xe0, 0xb6, 0x24, 0x97, 0xa7, 0x0a, 0x64, 0x4a, 0xe3, 0x2c, 0x08,
	0x06, 0x5a, 0xc3, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x6d, 0x31, 0x48, 0x72, 0x04,
	0x00, 0x00,
}
