// Copyright (C) 2018 Storj Labs, Inc.
// See LICENSE for copying information.

package satellitedb

import (
	"context"

	"github.com/skyrings/skyring-common/tools/uuid"
	"github.com/zeebo/errs"

	"storj.io/storj/satellite/console"
	dbx "storj.io/storj/satellite/satellitedb/dbx"
)

// regTokens is an implementation of RegTokens interface using spacemonkeygo/dbx orm
type regTokens struct {
	db dbx.Methods
}

// CreateRegToken creates new registration token
func (rt *regTokens) CreateRegToken(ctx context.Context, projLimit int) (*console.RegToken, error) {
	secret, err := uuid.New()
	if err != nil {
		return nil, err
	}

	regToken, err := rt.db.Create_SatelliteRegToken(
		ctx,
		dbx.SatelliteRegToken_Secret(secret[:]),
		dbx.SatelliteRegToken_ProjLimit(projLimit),
		dbx.SatelliteRegToken_Create_Fields{},
	)
	if err != nil {
		return nil, err
	}

	return regTokenDBX(regToken)
}

// GetBySecret retrieves RegTokenInfo with given Secret
func (rt *regTokens) GetBySecret(ctx context.Context, secret uuid.UUID) (*console.RegToken, error) {
	regToken, err := rt.db.Get_SatelliteRegToken_By_Secret(ctx, dbx.SatelliteRegToken_Secret(secret[:]))
	if err != nil {
		return nil, err
	}

	return regTokenDBX(regToken)
}

// GetByOwnerID retrieves RegTokenInfo by ownerID
func (rt *regTokens) GetByOwnerID(ctx context.Context, ownerID uuid.UUID) (*console.RegToken, error) {
	regToken, err := rt.db.Get_SatelliteRegToken_By_OwnerId(ctx, dbx.SatelliteRegToken_OwnerId(ownerID[:]))
	if err != nil {
		return nil, err
	}

	return regTokenDBX(regToken)
}

// UpdateOwner updates registration token's owner
func (rt *regTokens) UpdateOwner(ctx context.Context, secret, ownerID uuid.UUID) error {
	_, err := rt.db.Update_SatelliteRegToken_By_Secret(
		ctx,
		dbx.SatelliteRegToken_Secret(secret[:]),
		dbx.SatelliteRegToken_Update_Fields{
			OwnerId: dbx.SatelliteRegToken_OwnerId(ownerID[:]),
		},
	)

	return err
}

// regTokenDBX is used for creating RegToken entity from autogenerated dbx.SatelliteRegToken struct
func regTokenDBX(regToken *dbx.SatelliteRegToken) (*console.RegToken, error) {
	if regToken == nil {
		return nil, errs.New("token parameter is nil")
	}

	secret, err := bytesToUUID(regToken.Secret)
	if err != nil {
		return nil, err
	}

	result := &console.RegToken{
		Secret:    secret,
		OwnerID:   nil,
		ProjLimit: regToken.ProjLimit,
		CreatedAt: regToken.CreatedAt,
	}

	if regToken.OwnerId != nil {
		ownerID, err := bytesToUUID(regToken.OwnerId)
		if err != nil {
			return nil, err
		}

		result.OwnerID = &ownerID
	}

	return result, nil
}
