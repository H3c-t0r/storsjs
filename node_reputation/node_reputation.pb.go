// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node_reputation.proto

package nodereputation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColumnName int32

const (
	ColumnName_source                ColumnName = 0
	ColumnName_node_name             ColumnName = 1
	ColumnName_uptime                ColumnName = 2
	ColumnName_timestamp             ColumnName = 3
	ColumnName_audit_success         ColumnName = 4
	ColumnName_audit_fail            ColumnName = 5
	ColumnName_latency               ColumnName = 6
	ColumnName_amount_of_data_stored ColumnName = 7
	ColumnName_false_claims          ColumnName = 8
	ColumnName_shards_modified       ColumnName = 9
)

var ColumnName_name = map[int32]string{
	0: "source",
	1: "node_name",
	2: "uptime",
	3: "timestamp",
	4: "audit_success",
	5: "audit_fail",
	6: "latency",
	7: "amount_of_data_stored",
	8: "false_claims",
	9: "shards_modified",
}
var ColumnName_value = map[string]int32{
	"source":                0,
	"node_name":             1,
	"uptime":                2,
	"timestamp":             3,
	"audit_success":         4,
	"audit_fail":            5,
	"latency":               6,
	"amount_of_data_stored": 7,
	"false_claims":          8,
	"shards_modified":       9,
}

func (x ColumnName) String() string {
	return proto.EnumName(ColumnName_name, int32(x))
}
func (ColumnName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{0}
}

type UpdateReply_ReplyType int32

const (
	UpdateReply_UPDATE_SUCCESS UpdateReply_ReplyType = 0
	UpdateReply_UPDATE_FAILED  UpdateReply_ReplyType = 1
)

var UpdateReply_ReplyType_name = map[int32]string{
	0: "UPDATE_SUCCESS",
	1: "UPDATE_FAILED",
}
var UpdateReply_ReplyType_value = map[string]int32{
	"UPDATE_SUCCESS": 0,
	"UPDATE_FAILED":  1,
}

func (x UpdateReply_ReplyType) String() string {
	return proto.EnumName(UpdateReply_ReplyType_name, int32(x))
}
func (UpdateReply_ReplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{2, 0}
}

type NodeFilter_Operand int32

const (
	NodeFilter_EQUAL_TO              NodeFilter_Operand = 0
	NodeFilter_GREATER_THAN          NodeFilter_Operand = 1
	NodeFilter_GREATER_THAN_EQUAL_TO NodeFilter_Operand = 2
	NodeFilter_LESS_THAN             NodeFilter_Operand = 3
	NodeFilter_LESS_THAN_EQUAL_TO    NodeFilter_Operand = 4
	NodeFilter_NOT_EQUAL_TO          NodeFilter_Operand = 5
)

var NodeFilter_Operand_name = map[int32]string{
	0: "EQUAL_TO",
	1: "GREATER_THAN",
	2: "GREATER_THAN_EQUAL_TO",
	3: "LESS_THAN",
	4: "LESS_THAN_EQUAL_TO",
	5: "NOT_EQUAL_TO",
}
var NodeFilter_Operand_value = map[string]int32{
	"EQUAL_TO":              0,
	"GREATER_THAN":          1,
	"GREATER_THAN_EQUAL_TO": 2,
	"LESS_THAN":             3,
	"LESS_THAN_EQUAL_TO":    4,
	"NOT_EQUAL_TO":          5,
}

func (x NodeFilter_Operand) String() string {
	return proto.EnumName(NodeFilter_Operand_name, int32(x))
}
func (NodeFilter_Operand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{5, 0}
}

type NodeReputationRecord struct {
	Source               string   `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	NodeName             string   `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	Timestamp            string   `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Uptime               int64    `protobuf:"varint,4,opt,name=uptime" json:"uptime,omitempty"`
	AuditSuccess         int64    `protobuf:"varint,5,opt,name=auditSuccess" json:"auditSuccess,omitempty"`
	AuditFail            int64    `protobuf:"varint,6,opt,name=auditFail" json:"auditFail,omitempty"`
	Latency              int64    `protobuf:"varint,7,opt,name=latency" json:"latency,omitempty"`
	AmountOfDataStored   int64    `protobuf:"varint,8,opt,name=amountOfDataStored" json:"amountOfDataStored,omitempty"`
	FalseClaims          int64    `protobuf:"varint,9,opt,name=falseClaims" json:"falseClaims,omitempty"`
	ShardsModified       int64    `protobuf:"varint,10,opt,name=shardsModified" json:"shardsModified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReputationRecord) Reset()         { *m = NodeReputationRecord{} }
func (m *NodeReputationRecord) String() string { return proto.CompactTextString(m) }
func (*NodeReputationRecord) ProtoMessage()    {}
func (*NodeReputationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{0}
}
func (m *NodeReputationRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationRecord.Unmarshal(m, b)
}
func (m *NodeReputationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationRecord.Marshal(b, m, deterministic)
}
func (dst *NodeReputationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationRecord.Merge(dst, src)
}
func (m *NodeReputationRecord) XXX_Size() int {
	return xxx_messageInfo_NodeReputationRecord.Size(m)
}
func (m *NodeReputationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationRecord proto.InternalMessageInfo

func (m *NodeReputationRecord) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NodeReputationRecord) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeReputationRecord) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *NodeReputationRecord) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeReputationRecord) GetAuditSuccess() int64 {
	if m != nil {
		return m.AuditSuccess
	}
	return 0
}

func (m *NodeReputationRecord) GetAuditFail() int64 {
	if m != nil {
		return m.AuditFail
	}
	return 0
}

func (m *NodeReputationRecord) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *NodeReputationRecord) GetAmountOfDataStored() int64 {
	if m != nil {
		return m.AmountOfDataStored
	}
	return 0
}

func (m *NodeReputationRecord) GetFalseClaims() int64 {
	if m != nil {
		return m.FalseClaims
	}
	return 0
}

func (m *NodeReputationRecord) GetShardsModified() int64 {
	if m != nil {
		return m.ShardsModified
	}
	return 0
}

type NodeReputationRecords struct {
	Records              []*NodeReputationRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeReputationRecords) Reset()         { *m = NodeReputationRecords{} }
func (m *NodeReputationRecords) String() string { return proto.CompactTextString(m) }
func (*NodeReputationRecords) ProtoMessage()    {}
func (*NodeReputationRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{1}
}
func (m *NodeReputationRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationRecords.Unmarshal(m, b)
}
func (m *NodeReputationRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationRecords.Marshal(b, m, deterministic)
}
func (dst *NodeReputationRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationRecords.Merge(dst, src)
}
func (m *NodeReputationRecords) XXX_Size() int {
	return xxx_messageInfo_NodeReputationRecords.Size(m)
}
func (m *NodeReputationRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationRecords.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationRecords proto.InternalMessageInfo

func (m *NodeReputationRecords) GetRecords() []*NodeReputationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type UpdateReply struct {
	BridgeName           string                `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	NodeName             string                `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	Source               string                `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Status               UpdateReply_ReplyType `protobuf:"varint,4,opt,name=status,enum=nodereputation.UpdateReply_ReplyType" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateReply) Reset()         { *m = UpdateReply{} }
func (m *UpdateReply) String() string { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()    {}
func (*UpdateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{2}
}
func (m *UpdateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReply.Unmarshal(m, b)
}
func (m *UpdateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReply.Marshal(b, m, deterministic)
}
func (dst *UpdateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReply.Merge(dst, src)
}
func (m *UpdateReply) XXX_Size() int {
	return xxx_messageInfo_UpdateReply.Size(m)
}
func (m *UpdateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReply proto.InternalMessageInfo

func (m *UpdateReply) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *UpdateReply) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UpdateReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UpdateReply) GetStatus() UpdateReply_ReplyType {
	if m != nil {
		return m.Status
	}
	return UpdateReply_UPDATE_SUCCESS
}

type NodeQuery struct {
	Source               string   `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	NodeName             string   `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeQuery) Reset()         { *m = NodeQuery{} }
func (m *NodeQuery) String() string { return proto.CompactTextString(m) }
func (*NodeQuery) ProtoMessage()    {}
func (*NodeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{3}
}
func (m *NodeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeQuery.Unmarshal(m, b)
}
func (m *NodeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeQuery.Marshal(b, m, deterministic)
}
func (dst *NodeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeQuery.Merge(dst, src)
}
func (m *NodeQuery) XXX_Size() int {
	return xxx_messageInfo_NodeQuery.Size(m)
}
func (m *NodeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NodeQuery proto.InternalMessageInfo

func (m *NodeQuery) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NodeQuery) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type NodeUpdate struct {
	Source               string     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	NodeName             string     `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	ColumnName           ColumnName `protobuf:"varint,3,opt,name=columnName,enum=nodereputation.ColumnName" json:"columnName,omitempty"`
	ColumnValue          string     `protobuf:"bytes,4,opt,name=columnValue" json:"columnValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeUpdate) Reset()         { *m = NodeUpdate{} }
func (m *NodeUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeUpdate) ProtoMessage()    {}
func (*NodeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{4}
}
func (m *NodeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUpdate.Unmarshal(m, b)
}
func (m *NodeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUpdate.Marshal(b, m, deterministic)
}
func (dst *NodeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpdate.Merge(dst, src)
}
func (m *NodeUpdate) XXX_Size() int {
	return xxx_messageInfo_NodeUpdate.Size(m)
}
func (m *NodeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpdate proto.InternalMessageInfo

func (m *NodeUpdate) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NodeUpdate) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeUpdate) GetColumnName() ColumnName {
	if m != nil {
		return m.ColumnName
	}
	return ColumnName_source
}

func (m *NodeUpdate) GetColumnValue() string {
	if m != nil {
		return m.ColumnValue
	}
	return ""
}

type NodeFilter struct {
	Source               string             `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	ColumnName           ColumnName         `protobuf:"varint,2,opt,name=columnName,enum=nodereputation.ColumnName" json:"columnName,omitempty"`
	Operand              NodeFilter_Operand `protobuf:"varint,3,opt,name=operand,enum=nodereputation.NodeFilter_Operand" json:"operand,omitempty"`
	ColumnValue          string             `protobuf:"bytes,4,opt,name=columnValue" json:"columnValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeFilter) Reset()         { *m = NodeFilter{} }
func (m *NodeFilter) String() string { return proto.CompactTextString(m) }
func (*NodeFilter) ProtoMessage()    {}
func (*NodeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_reputation_4bb00ee6e376dab4, []int{5}
}
func (m *NodeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeFilter.Unmarshal(m, b)
}
func (m *NodeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeFilter.Marshal(b, m, deterministic)
}
func (dst *NodeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFilter.Merge(dst, src)
}
func (m *NodeFilter) XXX_Size() int {
	return xxx_messageInfo_NodeFilter.Size(m)
}
func (m *NodeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFilter proto.InternalMessageInfo

func (m *NodeFilter) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NodeFilter) GetColumnName() ColumnName {
	if m != nil {
		return m.ColumnName
	}
	return ColumnName_source
}

func (m *NodeFilter) GetOperand() NodeFilter_Operand {
	if m != nil {
		return m.Operand
	}
	return NodeFilter_EQUAL_TO
}

func (m *NodeFilter) GetColumnValue() string {
	if m != nil {
		return m.ColumnValue
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeReputationRecord)(nil), "nodereputation.NodeReputationRecord")
	proto.RegisterType((*NodeReputationRecords)(nil), "nodereputation.NodeReputationRecords")
	proto.RegisterType((*UpdateReply)(nil), "nodereputation.UpdateReply")
	proto.RegisterType((*NodeQuery)(nil), "nodereputation.NodeQuery")
	proto.RegisterType((*NodeUpdate)(nil), "nodereputation.NodeUpdate")
	proto.RegisterType((*NodeFilter)(nil), "nodereputation.NodeFilter")
	proto.RegisterEnum("nodereputation.ColumnName", ColumnName_name, ColumnName_value)
	proto.RegisterEnum("nodereputation.UpdateReply_ReplyType", UpdateReply_ReplyType_name, UpdateReply_ReplyType_value)
	proto.RegisterEnum("nodereputation.NodeFilter_Operand", NodeFilter_Operand_name, NodeFilter_Operand_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeReputation service

type NodeReputationClient interface {
	NodeReputation(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*NodeReputationRecord, error)
	UpdateReputation(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*UpdateReply, error)
	FilterNodeReputation(ctx context.Context, in *NodeFilter, opts ...grpc.CallOption) (*NodeReputationRecords, error)
}

type nodeReputationClient struct {
	cc *grpc.ClientConn
}

func NewNodeReputationClient(cc *grpc.ClientConn) NodeReputationClient {
	return &nodeReputationClient{cc}
}

func (c *nodeReputationClient) NodeReputation(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*NodeReputationRecord, error) {
	out := new(NodeReputationRecord)
	err := grpc.Invoke(ctx, "/nodereputation.NodeReputation/NodeReputation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) UpdateReputation(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := grpc.Invoke(ctx, "/nodereputation.NodeReputation/UpdateReputation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) FilterNodeReputation(ctx context.Context, in *NodeFilter, opts ...grpc.CallOption) (*NodeReputationRecords, error) {
	out := new(NodeReputationRecords)
	err := grpc.Invoke(ctx, "/nodereputation.NodeReputation/FilterNodeReputation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeReputation service

type NodeReputationServer interface {
	NodeReputation(context.Context, *NodeQuery) (*NodeReputationRecord, error)
	UpdateReputation(context.Context, *NodeUpdate) (*UpdateReply, error)
	FilterNodeReputation(context.Context, *NodeFilter) (*NodeReputationRecords, error)
}

func RegisterNodeReputationServer(s *grpc.Server, srv NodeReputationServer) {
	s.RegisterService(&_NodeReputation_serviceDesc, srv)
}

func _NodeReputation_NodeReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).NodeReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/NodeReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).NodeReputation(ctx, req.(*NodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_UpdateReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).UpdateReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/UpdateReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).UpdateReputation(ctx, req.(*NodeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_FilterNodeReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).FilterNodeReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/FilterNodeReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).FilterNodeReputation(ctx, req.(*NodeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeReputation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodereputation.NodeReputation",
	HandlerType: (*NodeReputationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeReputation",
			Handler:    _NodeReputation_NodeReputation_Handler,
		},
		{
			MethodName: "UpdateReputation",
			Handler:    _NodeReputation_UpdateReputation_Handler,
		},
		{
			MethodName: "FilterNodeReputation",
			Handler:    _NodeReputation_FilterNodeReputation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_reputation.proto",
}

func init() {
	proto.RegisterFile("node_reputation.proto", fileDescriptor_node_reputation_4bb00ee6e376dab4)
}

var fileDescriptor_node_reputation_4bb00ee6e376dab4 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6e, 0xda, 0x4c,
	0x10, 0xc7, 0x90, 0x00, 0x1e, 0x12, 0xbe, 0xfd, 0xe6, 0x4b, 0x22, 0x87, 0xaf, 0xaa, 0x90, 0xd5,
	0x54, 0x51, 0x0f, 0x1c, 0xe8, 0xad, 0xea, 0x1f, 0x21, 0x42, 0xda, 0x4a, 0x09, 0x34, 0x36, 0xb4,
	0x87, 0x1e, 0xac, 0x0d, 0x5e, 0x5a, 0x4b, 0x36, 0x46, 0xde, 0xf5, 0x81, 0x43, 0x1f, 0xa2, 0x2f,
	0xd0, 0xa7, 0xe8, 0xbd, 0x2f, 0x51, 0xf5, 0x79, 0xaa, 0xdd, 0x05, 0x1b, 0x28, 0x89, 0xd2, 0x5c,
	0xa2, 0xcc, 0x6f, 0x7e, 0x33, 0xf9, 0x8d, 0x67, 0xf6, 0x17, 0x38, 0x9c, 0xc6, 0x3e, 0xf3, 0x12,
	0x36, 0x4b, 0x05, 0x15, 0x41, 0x3c, 0x6d, 0xcd, 0x92, 0x58, 0xc4, 0x58, 0x97, 0x70, 0x8e, 0xda,
	0xbf, 0x8a, 0x70, 0xd0, 0x8f, 0x7d, 0xe6, 0x64, 0x90, 0xc3, 0xc6, 0x71, 0xe2, 0xe3, 0x11, 0x94,
	0x79, 0x9c, 0x26, 0x63, 0x66, 0x19, 0x4d, 0xe3, 0xd4, 0x74, 0x16, 0x11, 0x36, 0xa0, 0x2a, 0x5b,
	0xf4, 0x69, 0xc4, 0xac, 0xa2, 0xca, 0x64, 0x31, 0x3e, 0x00, 0x53, 0x04, 0x11, 0xe3, 0x82, 0x46,
	0x33, 0xab, 0xa4, 0x92, 0x39, 0x20, 0x3b, 0xa6, 0x33, 0x19, 0x5a, 0x3b, 0x4d, 0xe3, 0xb4, 0xe4,
	0x2c, 0x22, 0xb4, 0x61, 0x8f, 0xa6, 0x7e, 0x20, 0xdc, 0x74, 0x3c, 0x66, 0x9c, 0x5b, 0xbb, 0x2a,
	0xbb, 0x86, 0xc9, 0xce, 0x2a, 0x3e, 0xa7, 0x41, 0x68, 0x95, 0x15, 0x21, 0x07, 0xd0, 0x82, 0x4a,
	0x48, 0x05, 0x9b, 0x8e, 0xe7, 0x56, 0x45, 0xe5, 0x96, 0x21, 0xb6, 0x00, 0x69, 0x14, 0xa7, 0x53,
	0x31, 0x98, 0x9c, 0x51, 0x41, 0x5d, 0x11, 0x27, 0xcc, 0xb7, 0xaa, 0x8a, 0xb4, 0x25, 0x83, 0x4d,
	0xa8, 0x4d, 0x68, 0xc8, 0x59, 0x37, 0xa4, 0x41, 0xc4, 0x2d, 0x53, 0x11, 0x57, 0x21, 0x7c, 0x0c,
	0x75, 0xfe, 0x99, 0x26, 0x3e, 0xbf, 0x8c, 0xfd, 0x60, 0x12, 0x30, 0xdf, 0x02, 0x45, 0xda, 0x40,
	0xed, 0x0f, 0x70, 0xb8, 0xed, 0xbb, 0x72, 0x7c, 0x09, 0x95, 0x44, 0xff, 0x6a, 0x19, 0xcd, 0xd2,
	0x69, 0xad, 0xfd, 0xa8, 0xb5, 0xbe, 0x93, 0xd6, 0xb6, 0x3a, 0x67, 0x59, 0x64, 0xff, 0x34, 0xa0,
	0x36, 0x9a, 0xf9, 0x54, 0x48, 0x4e, 0x38, 0xc7, 0x87, 0x00, 0xd7, 0x49, 0xe0, 0x7f, 0xd2, 0x2b,
	0xd1, 0xcb, 0x5a, 0x41, 0x6e, 0x5d, 0x58, 0xbe, 0xe4, 0xd2, 0xda, 0x92, 0x5f, 0x40, 0x99, 0x0b,
	0x2a, 0x52, 0xae, 0x56, 0x55, 0x6f, 0x9f, 0x6c, 0x4a, 0x5c, 0x11, 0xd0, 0x52, 0x3f, 0x87, 0xf3,
	0x19, 0x73, 0x16, 0x45, 0x76, 0x1b, 0xcc, 0x0c, 0x44, 0x84, 0xfa, 0xe8, 0xdd, 0x59, 0x67, 0xd8,
	0xf3, 0xdc, 0x51, 0xb7, 0xdb, 0x73, 0x5d, 0x52, 0xc0, 0x7f, 0x61, 0x7f, 0x81, 0x9d, 0x77, 0xde,
	0x5e, 0xf4, 0xce, 0x88, 0x61, 0xbf, 0x02, 0x53, 0xce, 0x7d, 0x95, 0xb2, 0x64, 0x7e, 0x9f, 0xe3,
	0xb3, 0xbf, 0x19, 0x00, 0xb2, 0x83, 0x96, 0x76, 0xaf, 0xfb, 0x7d, 0x06, 0x30, 0x8e, 0xc3, 0x34,
	0x9a, 0xaa, 0x6c, 0x49, 0x8d, 0xde, 0xd8, 0x1c, 0xbd, 0x9b, 0x31, 0x9c, 0x15, 0xb6, 0xbc, 0x1c,
	0x1d, 0xbd, 0xa7, 0x61, 0xaa, 0x4f, 0xdc, 0x74, 0x56, 0x21, 0xfb, 0x47, 0x51, 0x0b, 0x3c, 0x0f,
	0x42, 0xc1, 0x92, 0x1b, 0x05, 0xae, 0x8b, 0x28, 0xfe, 0x95, 0x88, 0xe7, 0x50, 0x89, 0x67, 0x2c,
	0xa1, 0x53, 0x7f, 0xa1, 0xde, 0xde, 0x76, 0x5b, 0x5a, 0x40, 0x6b, 0xa0, 0x99, 0xce, 0xb2, 0xe4,
	0x0e, 0x23, 0x7c, 0x81, 0xca, 0xa2, 0x0a, 0xf7, 0xa0, 0xda, 0xbb, 0x1a, 0x75, 0x2e, 0xbc, 0xe1,
	0x80, 0x14, 0x90, 0xc0, 0xde, 0x6b, 0xa7, 0xd7, 0x19, 0xf6, 0x1c, 0x6f, 0xf8, 0xa6, 0xd3, 0x27,
	0x06, 0x1e, 0xc3, 0xe1, 0x2a, 0xe2, 0x65, 0xe4, 0x22, 0xee, 0x83, 0x79, 0xd1, 0x73, 0x5d, 0xcd,
	0x2c, 0xe1, 0x11, 0x60, 0x16, 0xe6, 0xb4, 0x1d, 0xd9, 0xb3, 0x3f, 0x18, 0xe6, 0xc8, 0xee, 0x93,
	0xef, 0x06, 0x40, 0x3e, 0x39, 0xc2, 0xf2, 0x0b, 0x92, 0x82, 0xec, 0xa9, 0x0c, 0x6f, 0x4a, 0x23,
	0x46, 0x0c, 0x99, 0xd2, 0xee, 0xa2, 0xff, 0x5c, 0x66, 0x42, 0xa4, 0x24, 0x6f, 0x4f, 0x39, 0x87,
	0xc7, 0xb5, 0xb7, 0x90, 0x1d, 0xac, 0x03, 0x68, 0x68, 0x42, 0x83, 0x90, 0xec, 0x62, 0x2d, 0xf3,
	0x13, 0x52, 0x96, 0x83, 0x68, 0xa3, 0xf0, 0xe2, 0x89, 0xe7, 0x53, 0x41, 0x3d, 0xae, 0xbc, 0x82,
	0x54, 0xa4, 0x42, 0x65, 0x0d, 0xde, 0x58, 0x79, 0x03, 0xa9, 0xe2, 0x7f, 0xf0, 0x8f, 0xf6, 0x01,
	0x2f, 0x5a, 0x18, 0x01, 0x31, 0xdb, 0x5f, 0x8b, 0x50, 0x5f, 0x7f, 0xd3, 0xe8, 0xfe, 0x81, 0x1c,
	0x6f, 0xdb, 0x94, 0x7a, 0x0d, 0x8d, 0x3b, 0x19, 0x84, 0x5d, 0xc0, 0x4b, 0x20, 0xd9, 0xbb, 0x5c,
	0xb6, 0x6d, 0x6c, 0xab, 0xd5, 0xac, 0xc6, 0xff, 0xb7, 0xbc, 0x6a, 0xbb, 0x80, 0x1f, 0xe1, 0x40,
	0x5f, 0xca, 0x86, 0xd2, 0xc6, 0xcd, 0x37, 0xd5, 0x38, 0xb9, 0x8b, 0x54, 0x6e, 0x17, 0xae, 0xcb,
	0xea, 0xdf, 0xd1, 0xd3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x83, 0x44, 0xfd, 0xa7, 0x06,
	0x00, 0x00,
}
